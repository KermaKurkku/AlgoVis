[{"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/index.tsx":"1","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/App.tsx":"2","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/index.ts":"3","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/list/listReducer.ts":"4","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/Components/Bar.tsx":"5","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts":"6","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/worker/index.ts":"7","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/list/types.ts":"8","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/list/actions.ts":"9","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/services/lists.ts":"10","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/worker/worker.ts":"11","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/currentNumber/actions.ts":"12","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/currentNumber/types.ts":"13","/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/constants.ts":"14"},{"size":285,"mtime":1609855217189,"results":"15","hashOfConfig":"16"},{"size":2170,"mtime":1609855744929,"results":"17","hashOfConfig":"16"},{"size":745,"mtime":1609855217189,"results":"18","hashOfConfig":"16"},{"size":647,"mtime":1609855217189,"results":"19","hashOfConfig":"16"},{"size":603,"mtime":1609855217189,"results":"20","hashOfConfig":"16"},{"size":824,"mtime":1609855217189,"results":"21","hashOfConfig":"16"},{"size":111,"mtime":1609855217189,"results":"22","hashOfConfig":"16"},{"size":203,"mtime":1609855217189,"results":"23","hashOfConfig":"16"},{"size":181,"mtime":1609855217189,"results":"24","hashOfConfig":"16"},{"size":262,"mtime":1609855217189,"results":"25","hashOfConfig":"16"},{"size":2075,"mtime":1609855217189,"results":"26","hashOfConfig":"16"},{"size":329,"mtime":1609855217189,"results":"27","hashOfConfig":"16"},{"size":369,"mtime":1609855217189,"results":"28","hashOfConfig":"16"},{"size":53,"mtime":1609855217189,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17nv9im",{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/index.tsx",[],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/App.tsx",["60","61"],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/index.ts",["62"],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/list/listReducer.ts",[],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/Components/Bar.tsx",[],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts",[],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/worker/index.ts",[],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/list/types.ts",[],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/list/actions.ts",[],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/services/lists.ts",[],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/worker/worker.ts",["63","64","65","66","67"],"import { setCurrentAction, removeCurrentAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\n\nimport store from '../store'\n\ndeclare function postMessage(message: any): void\n\nconst wait = async (ms: number): Promise<void> => await new Promise(resolve => setTimeout(resolve, ms))\n\nconst partition = async (low: number, high: number): Promise<number> => {\n  const list: number[] = [...store.getState().numberList.list]\n  const pivot: number = list[high]\n  let i = store.getState().currentNumber.current\n  console.log('pivot', pivot)\n  store.dispatch(setCurrentAction(i))\n\n  for (let j = low; j < high; j++) {\n    await wait(20)\n     if (list[j] < pivot) {\n      const newList = [...list.map(\n        n => n === list[i] ? list[j] : n === list[j] ? list[i] : n\n        )]\n        store.dispatch(setNewAction(newList))\n        i++\n     }\n  }\n  const newList = [...list.map(\n    n => n === list[i] ? list[high] : n === list[high] ? list[i] : n\n    )]\n  store.dispatch(setNewAction(newList))\n  return i\n}\n\nconst timeoutLoop = async (i: number, j: number, pivot: number, low: number,  high: number) => {\n  const list: number[] = [...store.getState().numberList.list]\n  setTimeout(() => {\n    if (list[j] < pivot) {\n      const newList = [...list.map(\n        n => n === list[i] ? list[j] : n === list[j] ? list[i] : n\n        )]\n      store.dispatch(setNewAction(newList))\n      i++\n      store.dispatch(setCurrentAction(i))\n    }\n    if (j === high) {\n      const newList = [...list.map(\n        n => n === list[i] ? list[high] : n === list[high] ? list[i] : n\n        )]\n      console.log(newList)\n      store.dispatch(setNewAction(list))\n      \n    } else {\n      timeoutLoop(i, ++j, pivot, low, high)\n    }\n  }, 20)\n}\n\nconst sort = async (low: number, high: number): Promise<void> => {\n  const p = await partition(low, high)\n  sort(low, p - 1)\n  sort(p + 1, high)\n  \n}\n\nexport const quickSort = (): void => {\n  const list = [...store.getState().numberList.list]\n  postMessage('currentValue')\n  //sort(0, list.length-1)\n}\n\nquickSort()",[],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/currentNumber/actions.ts",[],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/store/currentNumber/types.ts",[],"/home/jere/Documents/fullstack_open/AlgoVis/frontend/src/constants.ts",[],{"ruleId":"68","severity":1,"message":"69","line":32,"column":34,"nodeType":"70","messageId":"71","endLine":32,"endColumn":37,"suggestions":"72"},{"ruleId":"68","severity":1,"message":"69","line":38,"column":34,"nodeType":"70","messageId":"71","endLine":38,"endColumn":37,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":2,"column":18,"nodeType":"76","messageId":"77","endLine":2,"endColumn":23},{"ruleId":"74","severity":1,"message":"78","line":1,"column":28,"nodeType":"76","messageId":"77","endLine":1,"endColumn":47},{"ruleId":"68","severity":1,"message":"69","line":6,"column":39,"nodeType":"70","messageId":"71","endLine":6,"endColumn":42,"suggestions":"79"},{"ruleId":"74","severity":1,"message":"80","line":53,"column":7,"nodeType":"76","messageId":"77","endLine":53,"endColumn":18},{"ruleId":"74","severity":1,"message":"81","line":61,"column":3,"nodeType":"76","messageId":"77","endLine":61,"endColumn":7},{"ruleId":"74","severity":1,"message":"82","line":66,"column":9,"nodeType":"76","messageId":"77","endLine":66,"endColumn":13},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["83","84"],["85","86"],"@typescript-eslint/no-unused-vars","'Store' is defined but never used.","Identifier","unusedVar","'removeCurrentAction' is defined but never used.",["87","88"],"'timeoutLoop' is assigned a value but never used.","'sort' is assigned a value but never used.","'list' is assigned a value but never used.",{"messageId":"89","fix":"90","desc":"91"},{"messageId":"92","fix":"93","desc":"94"},{"messageId":"89","fix":"95","desc":"91"},{"messageId":"92","fix":"96","desc":"94"},{"messageId":"89","fix":"97","desc":"91"},{"messageId":"92","fix":"98","desc":"94"},"suggestUnknown",{"range":"99","text":"100"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"99","text":"101"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"102","text":"100"},{"range":"102","text":"101"},{"range":"103","text":"100"},{"range":"103","text":"101"},[819,822],"unknown","never",[965,968],[209,212]]