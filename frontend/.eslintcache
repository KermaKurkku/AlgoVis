[{"/home/jere/Documents/fullstack_open/Algovis/frontend/src/index.tsx":"1","/home/jere/Documents/fullstack_open/Algovis/frontend/src/App.tsx":"2","/home/jere/Documents/fullstack_open/Algovis/frontend/src/utils/listGenerator.ts":"3","/home/jere/Documents/fullstack_open/Algovis/frontend/src/Components/Bar.tsx":"4","/home/jere/Documents/fullstack_open/Algovis/frontend/src/constants.ts":"5"},{"size":176,"mtime":1609251618226,"results":"6","hashOfConfig":"7"},{"size":1836,"mtime":1609337441996,"results":"8","hashOfConfig":"7"},{"size":629,"mtime":1609251470878,"results":"9","hashOfConfig":"7"},{"size":530,"mtime":1609336254458,"results":"10","hashOfConfig":"7"},{"size":53,"mtime":1609338813473,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"hyxyy6",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jere/Documents/fullstack_open/Algovis/frontend/src/index.tsx",[],[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/App.tsx",["24"],"import React, { useState, useEffect } from 'react'\nimport { Slider, InputNumber, Row, Col } from 'antd'\n\nimport Bar from './Components/Bar'\nimport listGenerator from './utils/listGenerator'\nimport axios from 'axios'\n\nimport { apiBaseUrl } from './constants'\n\nconst App: React.FC = () => {\n  const [listSize, setListSize] = useState<number>(25)\n  const [numbers, setNumbers] = useState<number[]>([\n    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25\n  ])\n\n  useEffect(() => {\n    // eslint-disable-next-line\n    axios.get<void>(`${apiBaseUrl}/ping`)\n    const fetchNewList = async () => {\n      try {\n        const { data: newList } = await axios.get<number[]>(`${apiBaseUrl}/list?size=${listSize}`)\n        console.log(newList)\n        setNumbers(newList)\n      } catch (e) {\n        return (<h2>Error</h2>)\n      }\n    }\n    // eslint-disable-next-line\n    fetchNewList()\n  }, [listSize])\n\n  const setSliderValue = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > 200)\n      value = 200\n    setNumbers(listGenerator(value))\n    setListSize(value)\n  }\n\n  console.log(numbers)\n  return (\n    <div>\n      <h1>AlgoVis</h1>\n      <br />\n      <Row>\n        <Col span={12}>\n          <Slider\n            min={3}\n            max={200}\n            onChange={setSliderValue}\n            value={typeof listSize === 'number' ? listSize : 0}\n          />\n        </Col>\n        <Col span={4}>\n          <InputNumber\n            min={3}\n            max={200}\n            value={listSize}\n            onChange={setSliderValue}\n          />\n        </Col>\n      </Row>\n\n      <h3>{listSize}</h3>\n\n      <div style={{ display: 'flex' }}>\n        {numbers.map(n => (\n          <Bar key={n} width={100/numbers.length} height={n/listSize}/>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","/home/jere/Documents/fullstack_open/Algovis/frontend/src/utils/listGenerator.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/Components/Bar.tsx",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/constants.ts",[],{"ruleId":"25","severity":1,"message":"26","line":32,"column":34,"nodeType":"27","messageId":"28","endLine":32,"endColumn":37,"suggestions":"29"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["30","31"],{"messageId":"32","fix":"33","desc":"34"},{"messageId":"35","fix":"36","desc":"37"},"suggestUnknown",{"range":"38","text":"39"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"38","text":"40"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[942,945],"unknown","never"]