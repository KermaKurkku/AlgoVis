[{"/home/jere/Documents/fullstack_open/Algovis/frontend/src/index.tsx":"1","/home/jere/Documents/fullstack_open/Algovis/frontend/src/App.tsx":"2","/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/list/listReducer.ts":"3","/home/jere/Documents/fullstack_open/Algovis/frontend/src/Components/Bar.tsx":"4","/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/list/types.ts":"5","/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/list/actions.ts":"6","/home/jere/Documents/fullstack_open/Algovis/frontend/src/services/lists.ts":"7","/home/jere/Documents/fullstack_open/Algovis/frontend/src/constants.ts":"8","/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/index.ts":"9","/home/jere/Documents/fullstack_open/Algovis/frontend/src/Algorithms/bubbleSortRedux.ts":"10","/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/currentNumber/actions.ts":"11","/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/currentNumber/currentNumberReducer.ts":"12","/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/currentNumber/types.ts":"13","/home/jere/Documents/fullstack_open/Algovis/frontend/src/Algorithms/index.ts":"14","/home/jere/Documents/fullstack_open/Algovis/frontend/src/Algorithms/quickSortRedux.ts":"15","/home/jere/Documents/fullstack_open/Algovis/frontend/src/worker/index.ts":"16","/home/jere/Documents/fullstack_open/Algovis/frontend/src/worker/worker.ts":"17"},{"size":285,"mtime":1609688835937,"results":"18","hashOfConfig":"19"},{"size":2032,"mtime":1609771019645,"results":"20","hashOfConfig":"19"},{"size":647,"mtime":1609688835937,"results":"21","hashOfConfig":"19"},{"size":603,"mtime":1609688835937,"results":"22","hashOfConfig":"19"},{"size":203,"mtime":1609688835937,"results":"23","hashOfConfig":"19"},{"size":181,"mtime":1609688835937,"results":"24","hashOfConfig":"19"},{"size":262,"mtime":1609688835937,"results":"25","hashOfConfig":"19"},{"size":53,"mtime":1609338813473,"results":"26","hashOfConfig":"19"},{"size":745,"mtime":1609698838232,"results":"27","hashOfConfig":"19"},{"size":868,"mtime":1609696311304,"results":"28","hashOfConfig":"19"},{"size":329,"mtime":1609689704868,"results":"29","hashOfConfig":"19"},{"size":824,"mtime":1609689704868,"results":"30","hashOfConfig":"19"},{"size":369,"mtime":1609689704868,"results":"31","hashOfConfig":"19"},{"size":66,"mtime":1609696793132,"results":"32","hashOfConfig":"19"},{"size":1999,"mtime":1609764228183,"results":"33","hashOfConfig":"19"},{"size":111,"mtime":1609767273455,"results":"34","hashOfConfig":"19"},{"size":2087,"mtime":1609769544037,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"2qth77",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},"/home/jere/Documents/fullstack_open/Algovis/frontend/src/index.tsx",[],[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/App.tsx",["75","76"],"import React, { useState, useEffect } from 'react'\nimport {\n  Slider,\n  InputNumber,\n  Row,\n  Col,\n} from 'antd'\n\nimport Bar from './Components/Bar'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { RootState } from './store'\nimport { fetchNewList } from './store/list/listReducer'\n\nimport Worker from './worker'\n\nconst App: React.FC = () => {\n  const [listSize, setListSize] = useState<number>(25)\n  const [sliderValue, setSliderValue] = useState<number>(25)\n\n\n  const dispatch = useDispatch()\n  const numbers = useSelector((state: RootState) => state.numberList.list)\n  const current = useSelector((state: RootState) => state.currentNumber.current)\n\n\n  useEffect(() => {\n    dispatch(fetchNewList(listSize))\n  }, [listSize])\n\n  const onSliderChange = (value: any) => {\n    if (typeof value !== 'number' || isNaN(Number(value)))\n      return\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > 200)\n      value = 200\n    setListSize(value)\n  }\n\n  return (\n    <div>\n      <h1>AlgoVis</h1>\n      <br />\n      <Row>\n        <Col span={12}>\n          <Slider\n            min={3}\n            max={200}\n            onChange={onSliderChange}\n            onAfterChange={setNewListSize}\n            value={typeof sliderValue === 'number' ? sliderValue : 25}\n          />\n        </Col>\n        <Col span={4}>\n          <InputNumber\n            min={3}\n            max={200}\n            value={sliderValue}\n            onChange={setNewListSize}\n          />\n        </Col>\n      </Row>\n      <button onClick={async () => {\n        const instance = new Worker()\n        await instance.quickSortRedux()\n        instance.terminate()\n      }}>test</button>\n\n      <h3>{listSize}</h3>\n        \n      <div style={{ display: 'flex' }}>\n          {numbers.map(n => (\n            <Bar key={n} width={100/numbers.length} height={n/listSize} selected={numbers.indexOf(n) === current}/>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/list/listReducer.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/Components/Bar.tsx",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/list/types.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/list/actions.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/services/lists.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/constants.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/index.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/Algorithms/bubbleSortRedux.ts",[],[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/currentNumber/actions.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/currentNumber/currentNumberReducer.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/store/currentNumber/types.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/Algorithms/index.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/Algorithms/quickSortRedux.ts",["77","78","79"],"import { setCurrentAction, removeCurrentAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\n\nimport store from '../store'\n\nconst wait = async (ms: number): Promise<void> => await new Promise(resolve => setTimeout(resolve, ms))\n\nconst partition = async (low: number, high: number): Promise<number> => {\n  const list: number[] = [...store.getState().numberList.list]\n  const pivot: number = list[high]\n  let i = store.getState().currentNumber.current\n  console.log('pivot', pivot)\n  store.dispatch(setCurrentAction(i))\n\n  for (let j = low; j < high; j++) {\n     if (list[j] < pivot) {\n      const newList = [...list.map(\n        n => n === list[i] ? list[j] : n === list[j] ? list[i] : n\n        )]\n        store.dispatch(setNewAction(newList))\n        i++\n     }\n  }\n  const newList = [...list.map(\n    n => n === list[i] ? list[high] : n === list[high] ? list[i] : n\n    )]\n  store.dispatch(setNewAction(newList))\n  return i\n}\n\nconst timeoutLoop = async (i: number, j: number, pivot: number, low: number,  high: number) => {\n  const list: number[] = [...store.getState().numberList.list]\n  setTimeout(() => {\n    if (list[j] < pivot) {\n      const newList = [...list.map(\n        n => n === list[i] ? list[j] : n === list[j] ? list[i] : n\n        )]\n      store.dispatch(setNewAction(newList))\n      i++\n      store.dispatch(setCurrentAction(i))\n    }\n    if (j === high) {\n      const newList = [...list.map(\n        n => n === list[i] ? list[high] : n === list[high] ? list[i] : n\n        )]\n      console.log(newList)\n      store.dispatch(setNewAction(list))\n      \n    } else {\n      timeoutLoop(i, ++j, pivot, low, high)\n    }\n  }, 20)\n}\n\nconst sort = async (low: number, high: number): Promise<void> => {\n  const p = await partition(low, high)\n  sort(low, p - 1)\n  sort(p + 1, high)\n  \n}\n\nexport const quickSort = (): void => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setCurrentAction(0))\n  sort(0, list.length-1)\n}","/home/jere/Documents/fullstack_open/Algovis/frontend/src/worker/index.ts",[],"/home/jere/Documents/fullstack_open/Algovis/frontend/src/worker/worker.ts",["80","81","82","83"],"import { setCurrentAction, removeCurrentAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\n\nimport store from '../store'\n\nconst wait = async (ms: number): Promise<void> => await new Promise(resolve => setTimeout(resolve, ms))\n\nconst partition = async (low: number, high: number): Promise<number> => {\n  const list: number[] = [...store.getState().numberList.list]\n  const pivot: number = list[high]\n  const i = store.getState().currentNumber.current\n  console.log('pivot', pivot)\n  store.dispatch(setCurrentAction(i))\n\n  /* for (let j = low; j < high; j++) {\n    await wait(200)\n     if (list[j] < pivot) {\n      const newList = [...list.map(\n        n => n === list[i] ? list[j] : n === list[j] ? list[i] : n\n        )]\n        store.dispatch(setNewAction(newList))\n        i++\n     }\n  }\n  const newList = [...list.map(\n    n => n === list[i] ? list[high] : n === list[high] ? list[i] : n\n    )]\n  store.dispatch(setNewAction(newList)) */\n  return i\n}\n\nconst timeoutLoop = async (i: number, j: number, pivot: number, low: number,  high: number) => {\n  const list: number[] = [...store.getState().numberList.list]\n  setTimeout(() => {\n    if (list[j] < pivot) {\n      const newList = [...list.map(\n        n => n === list[i] ? list[j] : n === list[j] ? list[i] : n\n        )]\n      store.dispatch(setNewAction(newList))\n      i++\n      store.dispatch(setCurrentAction(i))\n    }\n    if (j === high) {\n      const newList = [...list.map(\n        n => n === list[i] ? list[high] : n === list[high] ? list[i] : n\n        )]\n      console.log(newList)\n      store.dispatch(setNewAction(list))\n      \n    } else {\n      timeoutLoop(i, ++j, pivot, low, high)\n    }\n  }, 20)\n}\n\nconst sort = async (low: number, high: number): Promise<void> => {\n  const p = await partition(low, high)\n  /* sort(low, p - 1)\n  sort(p + 1, high) */\n  \n}\n\nexport const quickSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setCurrentAction(0))\n  await sort(0, list.length-1)\n  console.log(list)\n}\n\nquickSort()",{"ruleId":"84","severity":1,"message":"85","line":31,"column":34,"nodeType":"86","messageId":"87","endLine":31,"endColumn":37,"suggestions":"88"},{"ruleId":"84","severity":1,"message":"85","line":37,"column":34,"nodeType":"86","messageId":"87","endLine":37,"endColumn":37,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":47},{"ruleId":"90","severity":1,"message":"94","line":6,"column":7,"nodeType":"92","messageId":"93","endLine":6,"endColumn":11},{"ruleId":"90","severity":1,"message":"95","line":50,"column":7,"nodeType":"92","messageId":"93","endLine":50,"endColumn":18},{"ruleId":"90","severity":1,"message":"91","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":47},{"ruleId":"90","severity":1,"message":"94","line":6,"column":7,"nodeType":"92","messageId":"93","endLine":6,"endColumn":11},{"ruleId":"90","severity":1,"message":"95","line":51,"column":7,"nodeType":"92","messageId":"93","endLine":51,"endColumn":18},{"ruleId":"90","severity":1,"message":"96","line":57,"column":9,"nodeType":"92","messageId":"93","endLine":57,"endColumn":10},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["97","98"],["99","100"],"@typescript-eslint/no-unused-vars","'removeCurrentAction' is defined but never used.","Identifier","unusedVar","'wait' is assigned a value but never used.","'timeoutLoop' is assigned a value but never used.","'p' is assigned a value but never used.",{"messageId":"101","fix":"102","desc":"103"},{"messageId":"104","fix":"105","desc":"106"},{"messageId":"101","fix":"107","desc":"103"},{"messageId":"104","fix":"108","desc":"106"},"suggestUnknown",{"range":"109","text":"110"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"109","text":"111"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"112","text":"110"},{"range":"112","text":"111"},[776,779],"unknown","never",[922,925]]