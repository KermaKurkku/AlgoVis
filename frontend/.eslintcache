[{"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/index.tsx":"1","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/App.tsx":"2","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/index.ts":"3","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/runningReducer.ts":"4","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/listReducer.ts":"5","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/ListSizeSlider.tsx":"6","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Bars.tsx":"7","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/types.ts":"8","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/types.ts":"9","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/types.ts":"10","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts":"11","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/actions.ts":"12","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/actions.ts":"13","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/lists.ts":"14","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/hooks/index.ts":"15","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts":"16","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/Bar.tsx":"17","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/actions.ts":"18","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/constants.ts":"19","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts":"20","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts":"21","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/index.ts":"22","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bogoSort.ts":"23","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/quickSort.ts":"24","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bubbleSort.ts":"25","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/AnimateBars.tsx":"26","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/calculateBoundingBoxes.ts":"27","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/insertionSort.ts":"28","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/index.ts":"29","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/stalinSort.ts":"30","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/mergeSort.ts":"31"},{"size":285,"mtime":1610374432987,"results":"32","hashOfConfig":"33"},{"size":4199,"mtime":1612101517644,"results":"34","hashOfConfig":"33"},{"size":929,"mtime":1610364646582,"results":"35","hashOfConfig":"33"},{"size":1008,"mtime":1610454073810,"results":"36","hashOfConfig":"33"},{"size":929,"mtime":1610454073810,"results":"37","hashOfConfig":"33"},{"size":1308,"mtime":1611411038009,"results":"38","hashOfConfig":"33"},{"size":1421,"mtime":1610963396066,"results":"39","hashOfConfig":"33"},{"size":342,"mtime":1610454073810,"results":"40","hashOfConfig":"33"},{"size":545,"mtime":1610454073810,"results":"41","hashOfConfig":"33"},{"size":825,"mtime":1610454424853,"results":"42","hashOfConfig":"33"},{"size":1506,"mtime":1612106561531,"results":"43","hashOfConfig":"33"},{"size":509,"mtime":1610454073810,"results":"44","hashOfConfig":"33"},{"size":324,"mtime":1610454073810,"results":"45","hashOfConfig":"33"},{"size":261,"mtime":1610454073810,"results":"46","hashOfConfig":"33"},{"size":1100,"mtime":1611042169501,"results":"47","hashOfConfig":"33"},{"size":57,"mtime":1609944163854,"results":"48","hashOfConfig":"33"},{"size":932,"mtime":1612106576221,"results":"49","hashOfConfig":"33"},{"size":820,"mtime":1610108861279,"results":"50","hashOfConfig":"33"},{"size":219,"mtime":1611397814343,"results":"51","hashOfConfig":"33"},{"size":569,"mtime":1611654060746,"results":"52","hashOfConfig":"33"},{"size":585,"mtime":1612101360389,"results":"53","hashOfConfig":"33"},{"size":172,"mtime":1612097147477,"results":"54","hashOfConfig":"33"},{"size":1202,"mtime":1612106368489,"results":"55","hashOfConfig":"33"},{"size":1727,"mtime":1612106411513,"results":"56","hashOfConfig":"33"},{"size":1207,"mtime":1612106383523,"results":"57","hashOfConfig":"33"},{"size":2324,"mtime":1611397854748,"results":"58","hashOfConfig":"33"},{"size":734,"mtime":1611041454372,"results":"59","hashOfConfig":"33"},{"size":1254,"mtime":1612106436030,"results":"60","hashOfConfig":"33"},{"size":423,"mtime":1611048405364,"results":"61","hashOfConfig":"33"},{"size":1061,"mtime":1612106526934,"results":"62","hashOfConfig":"33"},{"size":2164,"mtime":1612101694749,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"15q74u",{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/index.tsx",[],[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/App.tsx",["134"],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/runningReducer.ts",["135"],"import {\n  RunningStateAction,\n  runningType,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\nimport {\n  setRunningAction,\n  setStoppedAction,\n  setFinishedAction,\n  setWaitingAction\n} from './actions'\n\nimport { AppType } from '..'\n\nconst initialState: runningType = 'waiting'\n\nexport const setRunning = (): AppType => async dispatch => {\n  dispatch(setRunningAction())\n}\n\nexport const setStopped = (): AppType => async dispatch => {\n  dispatch(setStoppedAction())\n}\n\nexport const setFinished = (): AppType => async dispatch => {\n  dispatch(setFinishedAction())\n}\n\nexport const setWaiting = (): AppType => async dispatch => {\n  dispatch(setWaitingAction())\n}\n\nconst reducer = (state = initialState, action: RunningStateAction) => {\n  switch (action.type){\n  case SET_RUNNING:\n    return 'running'\n  case SET_STOPPED:\n    return 'stopped'\n  case SET_FINISHED:\n    return 'finished'\n  case SET_WAITING:\n    return 'waiting'\n  default:\n    return state\n  }\n}\n\nexport default reducer","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/listReducer.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/ListSizeSlider.tsx",["136","137"],"import React, { useState, useEffect } from 'react'\nimport { Slider } from 'antd'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\n\nimport { fetchNewList, changeListSize } from '../store/list/listReducer'\n\nimport { isRunning } from '../utils'\nimport { setWaiting } from '../store/running/runningReducer'\n\n\nconst ListSizeSlider: React.FC = () => {\n  const dispatch = useDispatch()\n\n  const [sliderValue, setSliderValue] = useState(20)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  useEffect(() => {\n    dispatch(fetchNewList(listSize))\n    dispatch(setWaiting())\n  }, [listSize])\n\n  const onSliderChange = (value: any) => {\n    if (typeof value !== 'number' || isNaN(Number(value)))\n      return\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > 40)\n      value = 40\n    dispatch(changeListSize(value))\n  }\n\n  return (\n    <div>\n      <Slider\n        min={3}\n        max={40}\n        onChange={onSliderChange}\n        onAfterChange={setNewListSize}\n        value={typeof sliderValue === 'number' ? sliderValue : 20}\n        tipFormatter={null}\n        disabled={isRunning() === 'running'}\n      />\n    </div>\n  )\n}\n\nexport default ListSizeSlider","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Bars.tsx",["138","139"],"import React, { useState, useEffect, createRef } from 'react'\n\nimport Bar from './Visualization/Bar'\n\nimport { useSelector } from 'react-redux'\n\nimport { RootState, CurrentNumberState } from '../store'\n\nimport AnimateBars from './Visualization/AnimateBars'\n\ninterface Props {\n  componentWidth: number;\n}\n\n// wery much in progress\n// Maybe\n// https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba\n// https://codesandbox.io/s/reorder-elements-with-slide-transition-and-react-hooks-flip-211f2?from-embed\nconst Bars: React.FC<Props> = ({componentWidth}: { componentWidth: number } ) => {\n  const listSize: number = useSelector((state: RootState) => state.numberList.size)\n  const list: number[] = useSelector((state: RootState) => state.numberList.list)\n  const selected: CurrentNumberState = useSelector((state: RootState) => state.currentNumber)\n  \n  const width: number = 100/listSize * componentWidth/listSize \n\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <AnimateBars>\n        {\n          list.map((b, i) => {\n            const barRef = createRef<HTMLDivElement>()\n            return <Bar key={b} width={width} height={b/listSize}\n            // Fix types here\n            // @ts-expect-error\n              main={i === selected.main} sub={i === selected.sub} ref={barRef} // Ref is null for some reason\n            />\n        })}\n      </AnimateBars>\n    </div>\n  )\n}\n\nexport default Bars","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/actions.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/actions.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/lists.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/hooks/index.ts",["140","141","142"],"import { useState, useEffect, useRef} from 'react'\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport const useContainerDimensions = (myRef: React.MutableRefObject<HTMLDivElement | null>): Dimensions => {\n  const getDimensions = (): Dimensions => ({\n    width: myRef.current?.offsetWidth || 0,\n    height: myRef.current?.offsetHeight || 0\n  })\n\n  const [dimensions, setDimensions] = useState<Dimensions>({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current)\n      setDimensions(getDimensions())\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [myRef])\n\n  return dimensions\n\n}\n\n// https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n// Used to get the previous value of an object\nexport const usePrevious = (value: any): any => {\n  const prevChildrenRef = useRef()\n\n  useEffect(() => {\n    prevChildrenRef.current = value\n  }, [value])\n\n  return prevChildrenRef.current\n}","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/Bar.tsx",["143"],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/actions.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/constants.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts",["144"],"import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  InsertionSort,\n  StalinSort,\n  MergeSort,\n  Algorithms\n} from './types'\n\nimport * as a from '../../Algorithms'\n\nexport const runAlgorithm = async (type: Algorithms) => {\n  switch (type) {\n  case BubbleSort:\n    return await a.bubbleSort()\n  case QuickSort:\n    return await a.quickSort()\n  case BogoSort:\n    return await a.bogoSort()\n  case InsertionSort:\n    return await a.insertionSort()\n  case StalinSort:\n    return await a.stalinSort()\n  case MergeSort:\n    return await a.mergeSort()\n  default:\n    return\n  }\n}","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bogoSort.ts",["145"],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/quickSort.ts",["146"],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bubbleSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/AnimateBars.tsx",["147","148","149"],"\n/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Used to animate changing bar positions\n*/\n\nimport React, { useState, useEffect, useLayoutEffect, ReactChildren } from 'react'\nimport { usePrevious } from '../../hooks'\nimport calculateBoundingBoxes from '../../utils/calculateBoundingBoxes'\n\nimport { AnimationChild, DOMRectDict } from '../../types'\n\nconst AnimateBars: React.FC<any> = ({ children }: { children: any}) => {\n  const [boundingBox, setBoundingBox] = useState<DOMRectDict | null>({})\n  const [prevBoundingBox, setPrevBoundingBox] = useState<DOMRectDict | null>({})\n  const prevChildren = usePrevious(children)\n\n  // Fix bounding boxes updating when list size updates\n  useLayoutEffect(() => {\n    const newBoundingBox = calculateBoundingBoxes(children)\n    setBoundingBox(newBoundingBox)\n  }, [children])\n\n  useLayoutEffect(() => {\n    const prevBoundingBox = calculateBoundingBoxes(prevChildren)\n    setPrevBoundingBox(prevBoundingBox)\n  }, [prevChildren])\n\n  useEffect(() => {\n    if (!prevBoundingBox || !boundingBox || Object.keys(prevBoundingBox).length < Object.keys(boundingBox).length)\n      return\n\n    const hasPrevBoundingBox = Object.keys(prevBoundingBox).length\n\n    if (hasPrevBoundingBox) {\n      React.Children.forEach(children, (child: AnimationChild) => {\n        const domNode = child.ref.current\n        const firstBox = prevBoundingBox[child.key]\n        const lastBox = boundingBox[child.key]\n        if (!firstBox || !lastBox)\n          return\n\n        const changeInX = firstBox.left - lastBox.left\n\n\n        if (changeInX) {\n          requestAnimationFrame(() => {\n            // Before DOM paints, invert child to old position\n            // Maybe longer animation time?\n            // Reduce speed of sorting so the animation shows\n            domNode.style.transform = `translateX(${changeInX}px)`\n            domNode.style.transition = `transform 0ms`\n\n            requestAnimationFrame(() => {\n              // After previous frame, remove the transition to play the animation\n              domNode.style.transform = ''\n              domNode.style.transition = 'transform 200ms'\n            })\n          })\n        }\n      })\n    }\n  }, [boundingBox, prevBoundingBox, children])\n\n  return children\n\n}\n\nexport default AnimateBars\n","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/calculateBoundingBoxes.ts",["150"],"/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Calculates the bounding boxes of elements given to it\n*/\n\nimport React, { ReactChildren } from 'react'\n\nimport { AnimationChild, AnimationChildren, DOMRectDict } from '../types'\n\nconst calculateBoundingBoxes = (children: AnimationChildren): DOMRectDict | null => {\n  const boundingBoxes: DOMRectDict = {}\n\n  React.Children.forEach(children, (child: AnimationChild) => {\n    if (!child.ref.current)\n      return null\n    const domNode = child.ref.current\n    const nodeBoundingBox = domNode.getBoundingClientRect()\n\n\n    boundingBoxes[child.key] = nodeBoundingBox\n  })\n\n  return boundingBoxes\n}\n\nexport default calculateBoundingBoxes","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/insertionSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/stalinSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/mergeSort.ts",[],{"ruleId":"151","severity":1,"message":"152","line":58,"column":31,"nodeType":"153","messageId":"154","endLine":58,"endColumn":34,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":36,"column":17,"nodeType":"158","messageId":"159","endLine":36,"endColumn":70},{"ruleId":"151","severity":1,"message":"152","line":24,"column":34,"nodeType":"153","messageId":"154","endLine":24,"endColumn":37,"suggestions":"160"},{"ruleId":"151","severity":1,"message":"152","line":30,"column":34,"nodeType":"153","messageId":"154","endLine":30,"endColumn":37,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"166","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"156","severity":1,"message":"167","line":37,"column":29,"nodeType":"164","messageId":"168","endLine":37,"endColumn":39},{"ruleId":"151","severity":1,"message":"152","line":37,"column":36,"nodeType":"153","messageId":"154","endLine":37,"endColumn":39,"suggestions":"169"},{"ruleId":"151","severity":1,"message":"152","line":37,"column":42,"nodeType":"153","messageId":"154","endLine":37,"endColumn":45,"suggestions":"170"},{"ruleId":"162","severity":1,"message":"171","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":33},{"ruleId":"156","severity":1,"message":"157","line":13,"column":29,"nodeType":"158","messageId":"159","endLine":13,"endColumn":56},{"ruleId":"162","severity":1,"message":"172","line":6,"column":8,"nodeType":"164","messageId":"165","endLine":6,"endColumn":19},{"ruleId":"162","severity":1,"message":"173","line":9,"column":10,"nodeType":"164","messageId":"165","endLine":9,"endColumn":19},{"ruleId":"162","severity":1,"message":"174","line":7,"column":55,"nodeType":"164","messageId":"165","endLine":7,"endColumn":68},{"ruleId":"151","severity":1,"message":"152","line":13,"column":29,"nodeType":"153","messageId":"154","endLine":13,"endColumn":32,"suggestions":"175"},{"ruleId":"151","severity":1,"message":"152","line":13,"column":63,"nodeType":"153","messageId":"154","endLine":13,"endColumn":66,"suggestions":"176"},{"ruleId":"162","severity":1,"message":"174","line":6,"column":17,"nodeType":"164","messageId":"165","endLine":6,"endColumn":30},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["177","178"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType",["179","180"],["181","182"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","Argument 'value' should be typed with a non-any type.","anyTypedArg",["183","184"],["185","186"],"'MutableRefObject' is defined but never used.","'listService' is defined but never used.","'removeSub' is defined but never used.","'ReactChildren' is defined but never used.",["187","188"],["189","190"],{"messageId":"191","fix":"192","desc":"193"},{"messageId":"194","fix":"195","desc":"196"},{"messageId":"191","fix":"197","desc":"193"},{"messageId":"194","fix":"198","desc":"196"},{"messageId":"191","fix":"199","desc":"193"},{"messageId":"194","fix":"200","desc":"196"},{"messageId":"191","fix":"201","desc":"193"},{"messageId":"194","fix":"202","desc":"196"},{"messageId":"191","fix":"203","desc":"193"},{"messageId":"194","fix":"204","desc":"196"},{"messageId":"191","fix":"205","desc":"193"},{"messageId":"194","fix":"206","desc":"196"},{"messageId":"191","fix":"207","desc":"193"},{"messageId":"194","fix":"208","desc":"196"},"suggestUnknown",{"range":"209","text":"210"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"209","text":"211"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"212","text":"210"},{"range":"212","text":"211"},{"range":"213","text":"210"},{"range":"213","text":"211"},{"range":"214","text":"210"},{"range":"214","text":"211"},{"range":"215","text":"210"},{"range":"215","text":"211"},{"range":"216","text":"210"},{"range":"216","text":"211"},{"range":"217","text":"210"},{"range":"217","text":"211"},[1646,1649],"unknown","never",[689,692],[835,838],[944,947],[950,953],[431,434],[465,468]]