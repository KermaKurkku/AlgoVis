[{"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/index.tsx":"1","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/App.tsx":"2","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/index.ts":"3","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Bars.tsx":"4","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/AlgorithmSider.tsx":"5","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/listReducer.ts":"6","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/types.ts":"7","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts":"8","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/types.ts":"9","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/runningReducer.ts":"10","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/types.ts":"11","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/hooks/index.ts":"12","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Visualization/Bar.tsx":"13","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Visualization/AnimateBars.tsx":"14","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/ListSizeSlider.tsx":"15","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/actions.ts":"16","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/actions.ts":"17","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/actions.ts":"18","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/lists.ts":"19","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts":"20","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/utils/calculateBoundingBoxes.ts":"21","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/constants.ts":"22","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts":"23","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts":"24","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/utils/index.ts":"25","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/index.ts":"26","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/mergeSort.ts":"27","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/stalinSort.ts":"28","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/insertionSort.ts":"29","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/bogoSort.ts":"30","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/quickSort.ts":"31","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/bubbleSort.ts":"32"},{"size":285,"mtime":1609669047044,"results":"33","hashOfConfig":"34"},{"size":1994,"mtime":1614352192974,"results":"35","hashOfConfig":"34"},{"size":929,"mtime":1610437831433,"results":"36","hashOfConfig":"34"},{"size":1478,"mtime":1612616353020,"results":"37","hashOfConfig":"34"},{"size":4725,"mtime":1614351671433,"results":"38","hashOfConfig":"34"},{"size":707,"mtime":1614087815835,"results":"39","hashOfConfig":"34"},{"size":241,"mtime":1614087754796,"results":"40","hashOfConfig":"34"},{"size":1767,"mtime":1612616310270,"results":"41","hashOfConfig":"34"},{"size":1036,"mtime":1612616196153,"results":"42","hashOfConfig":"34"},{"size":1009,"mtime":1614083868553,"results":"43","hashOfConfig":"34"},{"size":545,"mtime":1610609236540,"results":"44","hashOfConfig":"34"},{"size":1100,"mtime":1612605720151,"results":"45","hashOfConfig":"34"},{"size":1183,"mtime":1614352156094,"results":"46","hashOfConfig":"34"},{"size":2324,"mtime":1612613580522,"results":"47","hashOfConfig":"34"},{"size":1712,"mtime":1614352224758,"results":"48","hashOfConfig":"34"},{"size":509,"mtime":1610609236540,"results":"49","hashOfConfig":"34"},{"size":1012,"mtime":1612616199793,"results":"50","hashOfConfig":"34"},{"size":230,"mtime":1614087793076,"results":"51","hashOfConfig":"34"},{"size":261,"mtime":1610609236540,"results":"52","hashOfConfig":"34"},{"size":57,"mtime":1610437831433,"results":"53","hashOfConfig":"34"},{"size":734,"mtime":1612613580525,"results":"54","hashOfConfig":"34"},{"size":219,"mtime":1612605720151,"results":"55","hashOfConfig":"34"},{"size":569,"mtime":1612605720151,"results":"56","hashOfConfig":"34"},{"size":585,"mtime":1612605720151,"results":"57","hashOfConfig":"34"},{"size":423,"mtime":1612605720151,"results":"58","hashOfConfig":"34"},{"size":172,"mtime":1612605720151,"results":"59","hashOfConfig":"34"},{"size":2379,"mtime":1614087914825,"results":"60","hashOfConfig":"34"},{"size":1122,"mtime":1614087867395,"results":"61","hashOfConfig":"34"},{"size":1367,"mtime":1614087900119,"results":"62","hashOfConfig":"34"},{"size":1209,"mtime":1614087889949,"results":"63","hashOfConfig":"34"},{"size":1806,"mtime":1614087874432,"results":"64","hashOfConfig":"34"},{"size":1220,"mtime":1614087855452,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"shqhgg",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/index.tsx",[],[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/App.tsx",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/index.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Bars.tsx",["138","139"],"import React, { useState, useEffect, createRef } from 'react'\n\nimport Bar from './Visualization/Bar'\n\nimport { useSelector } from 'react-redux'\n\nimport { RootState, CurrentNumberState } from '../store'\n\nimport AnimateBars from './Visualization/AnimateBars'\n\ninterface Props {\n  componentWidth: number;\n}\n\n// wery much in progress\n// Maybe\n// https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba\n// https://codesandbox.io/s/reorder-elements-with-slide-transition-and-react-hooks-flip-211f2?from-embed\nconst Bars: React.FC<Props> = ({componentWidth}: { componentWidth: number } ) => {\n  const listSize: number = useSelector((state: RootState) => state.numberList.size)\n  const list: number[] = useSelector((state: RootState) => state.numberList.list)\n  const selected: CurrentNumberState = useSelector((state: RootState) => state.currentNumber)\n  \n  const width: number = 100/listSize * componentWidth/listSize \n\n  return (\n    <div style={{ display: 'flex' }}>\n      <AnimateBars>\n        {\n          list.map((b, i) => {\n            const barRef = createRef<HTMLDivElement>()\n            return <Bar key={b} width={width} height={b/listSize} area={i >= selected.area.start && i <= selected.area.end}\n            // Fix types here\n            // @ts-expect-error\n              main={i === selected.main} sub={i === selected.sub} ref={barRef} // Ref is null for some reason\n            />\n        })}\n      </AnimateBars>\n    </div>\n  )\n}\n\nexport default Bars","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/AlgorithmSider.tsx",["140"],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/listReducer.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/types.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts",["141"],"import {\n  CurrentNumberState,\n  CurrentNumberActionType,\n  SET_CURRENT,\n  SET_MAIN,\n  SET_SUB,\n  REMOVE_CURRENT,\n  REMOVE_SUB,\n  SET_AREA\n} from './types'\nimport {\n  setCurrentAction,\n  setMainAction,\n  setSubAction,\n  removeCurrentAction,\n  removeSubAction,\n  setAreaAction\n} from './actions'\nimport { AppType } from '../'\n\nconst initialState: CurrentNumberState = {\n  main: -1,\n  sub: null,\n  area: {\n    start: -1,\n    end: -1\n  }\n}\n\nexport const setCurrent = (main: number, sub: number | null): AppType => async dispatch => {\n  dispatch(setCurrentAction(main, sub))\n}\n\nexport const setMain = (main: number): AppType => async dispatch => {\n  dispatch(setMainAction(main))\n}\n\nexport const setSub = (sub: number): AppType => async dispatch => {\n  dispatch(setSubAction(sub))\n}\n\nexport const removeCurrent = (): AppType => async dispatch => {\n  dispatch(removeCurrentAction())\n}\n\nexport const removeSub = (): AppType => async dispatch => {\n  dispatch(removeSubAction())\n}\n\nconst reducer = (state = initialState, action: CurrentNumberActionType): CurrentNumberState => {\n  switch(action.type) {\n  case SET_CURRENT:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: action.payload.sub\n    }\n  case SET_MAIN:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: state.sub\n    }\n  case SET_SUB:\n    return {\n      ...state,\n      main: state.main,\n      sub: action.payload.sub\n    }\n  case REMOVE_CURRENT:\n    return {\n      ...state,\n      main: -1\n    }\n  case REMOVE_SUB:\n    return {\n      ...state,\n      sub: null\n    }\n  case SET_AREA:\n    return {\n      ...state,\n      area: {\n        start: action.payload.start,\n        end: action.payload.end\n      }\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/types.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/runningReducer.ts",["142"],"import {\n  RunningStateAction,\n  runningType,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\nimport {\n  setRunningAction,\n  setStoppedAction,\n  setFinishedAction,\n  setWaitingAction\n} from './actions'\n\nimport { AppType } from '..'\n\nconst initialState: runningType = 'finished'\n\nexport const setRunning = (): AppType => async dispatch => {\n  dispatch(setRunningAction())\n}\n\nexport const setStopped = (): AppType => async dispatch => {\n  dispatch(setStoppedAction())\n}\n\nexport const setFinished = (): AppType => async dispatch => {\n  dispatch(setFinishedAction())\n}\n\nexport const setWaiting = (): AppType => async dispatch => {\n  dispatch(setWaitingAction())\n}\n\nconst reducer = (state = initialState, action: RunningStateAction) => {\n  switch (action.type){\n  case SET_RUNNING:\n    return 'running'\n  case SET_STOPPED:\n    return 'stopped'\n  case SET_FINISHED:\n    return 'finished'\n  case SET_WAITING:\n    return 'waiting'\n  default:\n    return state\n  }\n}\n\nexport default reducer","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/types.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/hooks/index.ts",["143","144","145"],"import { useState, useEffect, useRef} from 'react'\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport const useContainerDimensions = (myRef: React.MutableRefObject<HTMLDivElement | null>): Dimensions => {\n  const getDimensions = (): Dimensions => ({\n    width: myRef.current?.offsetWidth || 0,\n    height: myRef.current?.offsetHeight || 0\n  })\n\n  const [dimensions, setDimensions] = useState<Dimensions>({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current)\n      setDimensions(getDimensions())\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [myRef])\n\n  return dimensions\n\n}\n\n// https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n// Used to get the previous value of an object\nexport const usePrevious = (value: any): any => {\n  const prevChildrenRef = useRef()\n\n  useEffect(() => {\n    prevChildrenRef.current = value\n  }, [value])\n\n  return prevChildrenRef.current\n}","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Visualization/Bar.tsx",["146"],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Visualization/AnimateBars.tsx",["147","148","149"],"\n/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Used to animate changing bar positions\n*/\n\nimport React, { useState, useEffect, useLayoutEffect, ReactChildren } from 'react'\nimport { usePrevious } from '../../hooks'\nimport calculateBoundingBoxes from '../../utils/calculateBoundingBoxes'\n\nimport { AnimationChild, DOMRectDict } from '../../types'\n\nconst AnimateBars: React.FC<any> = ({ children }: { children: any}) => {\n  const [boundingBox, setBoundingBox] = useState<DOMRectDict | null>({})\n  const [prevBoundingBox, setPrevBoundingBox] = useState<DOMRectDict | null>({})\n  const prevChildren = usePrevious(children)\n\n  // Fix bounding boxes updating when list size updates\n  useLayoutEffect(() => {\n    const newBoundingBox = calculateBoundingBoxes(children)\n    setBoundingBox(newBoundingBox)\n  }, [children])\n\n  useLayoutEffect(() => {\n    const prevBoundingBox = calculateBoundingBoxes(prevChildren)\n    setPrevBoundingBox(prevBoundingBox)\n  }, [prevChildren])\n\n  useEffect(() => {\n    if (!prevBoundingBox || !boundingBox || Object.keys(prevBoundingBox).length < Object.keys(boundingBox).length)\n      return\n\n    const hasPrevBoundingBox = Object.keys(prevBoundingBox).length\n\n    if (hasPrevBoundingBox) {\n      React.Children.forEach(children, (child: AnimationChild) => {\n        const domNode = child.ref.current\n        const firstBox = prevBoundingBox[child.key]\n        const lastBox = boundingBox[child.key]\n        if (!firstBox || !lastBox)\n          return\n\n        const changeInX = firstBox.left - lastBox.left\n\n\n        if (changeInX) {\n          requestAnimationFrame(() => {\n            // Before DOM paints, invert child to old position\n            // Maybe longer animation time?\n            // Reduce speed of sorting so the animation shows\n            domNode.style.transform = `translateX(${changeInX}px)`\n            domNode.style.transition = `transform 0ms`\n\n            requestAnimationFrame(() => {\n              // After previous frame, remove the transition to play the animation\n              domNode.style.transform = ''\n              domNode.style.transition = 'transform 200ms'\n            })\n          })\n        }\n      })\n    }\n  }, [boundingBox, prevBoundingBox, children])\n\n  return children\n\n}\n\nexport default AnimateBars\n","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/ListSizeSlider.tsx",["150","151","152","153"],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/actions.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/actions.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/actions.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/lists.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/utils/calculateBoundingBoxes.ts",["154"],"/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Calculates the bounding boxes of elements given to it\n*/\n\nimport React, { ReactChildren } from 'react'\n\nimport { AnimationChild, AnimationChildren, DOMRectDict } from '../types'\n\nconst calculateBoundingBoxes = (children: AnimationChildren): DOMRectDict | null => {\n  const boundingBoxes: DOMRectDict = {}\n\n  React.Children.forEach(children, (child: AnimationChild) => {\n    if (!child.ref.current)\n      return null\n    const domNode = child.ref.current\n    const nodeBoundingBox = domNode.getBoundingClientRect()\n\n\n    boundingBoxes[child.key] = nodeBoundingBox\n  })\n\n  return boundingBoxes\n}\n\nexport default calculateBoundingBoxes","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/constants.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts",["155"],"import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  InsertionSort,\n  StalinSort,\n  MergeSort,\n  Algorithms\n} from './types'\n\nimport * as a from '../../Algorithms'\n\nexport const runAlgorithm = async (type: Algorithms) => {\n  switch (type) {\n  case BubbleSort:\n    return await a.bubbleSort()\n  case QuickSort:\n    return await a.quickSort()\n  case BogoSort:\n    return await a.bogoSort()\n  case InsertionSort:\n    return await a.insertionSort()\n  case StalinSort:\n    return await a.stalinSort()\n  case MergeSort:\n    return await a.mergeSort()\n  default:\n    return\n  }\n}","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/utils/index.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/index.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/mergeSort.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/stalinSort.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/insertionSort.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/bogoSort.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/quickSort.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/bubbleSort.ts",[],{"ruleId":"156","severity":1,"message":"157","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":25},{"ruleId":"156","severity":1,"message":"160","line":1,"column":27,"nodeType":"158","messageId":"159","endLine":1,"endColumn":36},{"ruleId":"161","severity":1,"message":"162","line":61,"column":31,"nodeType":"163","messageId":"164","endLine":61,"endColumn":34,"suggestions":"165"},{"ruleId":"156","severity":1,"message":"166","line":17,"column":3,"nodeType":"158","messageId":"159","endLine":17,"endColumn":16},{"ruleId":"167","severity":1,"message":"168","line":36,"column":17,"nodeType":"169","messageId":"170","endLine":36,"endColumn":70},{"ruleId":"167","severity":1,"message":"171","line":37,"column":29,"nodeType":"158","messageId":"172","endLine":37,"endColumn":39},{"ruleId":"161","severity":1,"message":"162","line":37,"column":36,"nodeType":"163","messageId":"164","endLine":37,"endColumn":39,"suggestions":"173"},{"ruleId":"161","severity":1,"message":"162","line":37,"column":42,"nodeType":"163","messageId":"164","endLine":37,"endColumn":45,"suggestions":"174"},{"ruleId":"156","severity":1,"message":"175","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":33},{"ruleId":"156","severity":1,"message":"176","line":7,"column":55,"nodeType":"158","messageId":"159","endLine":7,"endColumn":68},{"ruleId":"161","severity":1,"message":"162","line":13,"column":29,"nodeType":"163","messageId":"164","endLine":13,"endColumn":32,"suggestions":"177"},{"ruleId":"161","severity":1,"message":"162","line":13,"column":63,"nodeType":"163","messageId":"164","endLine":13,"endColumn":66,"suggestions":"178"},{"ruleId":"156","severity":1,"message":"179","line":1,"column":38,"nodeType":"158","messageId":"159","endLine":1,"endColumn":44},{"ruleId":"167","severity":1,"message":"168","line":16,"column":24,"nodeType":"169","messageId":"170","endLine":16,"endColumn":56},{"ruleId":"161","severity":1,"message":"162","line":40,"column":34,"nodeType":"163","messageId":"164","endLine":40,"endColumn":37,"suggestions":"180"},{"ruleId":"161","severity":1,"message":"162","line":46,"column":34,"nodeType":"163","messageId":"164","endLine":46,"endColumn":37,"suggestions":"181"},{"ruleId":"156","severity":1,"message":"176","line":6,"column":17,"nodeType":"158","messageId":"159","endLine":6,"endColumn":30},{"ruleId":"167","severity":1,"message":"168","line":13,"column":29,"nodeType":"169","messageId":"170","endLine":13,"endColumn":56},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["182","183"],"'setAreaAction' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'value' should be typed with a non-any type.","anyTypedArg",["184","185"],["186","187"],"'MutableRefObject' is defined but never used.","'ReactChildren' is defined but never used.",["188","189"],["190","191"],"'useRef' is defined but never used.",["192","193"],["194","195"],{"messageId":"196","fix":"197","desc":"198"},{"messageId":"199","fix":"200","desc":"201"},{"messageId":"196","fix":"202","desc":"198"},{"messageId":"199","fix":"203","desc":"201"},{"messageId":"196","fix":"204","desc":"198"},{"messageId":"199","fix":"205","desc":"201"},{"messageId":"196","fix":"206","desc":"198"},{"messageId":"199","fix":"207","desc":"201"},{"messageId":"196","fix":"208","desc":"198"},{"messageId":"199","fix":"209","desc":"201"},{"messageId":"196","fix":"210","desc":"198"},{"messageId":"199","fix":"211","desc":"201"},{"messageId":"196","fix":"212","desc":"198"},{"messageId":"199","fix":"213","desc":"201"},"suggestUnknown",{"range":"214","text":"215"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"214","text":"216"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"217","text":"215"},{"range":"217","text":"216"},{"range":"218","text":"215"},{"range":"218","text":"216"},{"range":"219","text":"215"},{"range":"219","text":"216"},{"range":"220","text":"215"},{"range":"220","text":"216"},{"range":"221","text":"215"},{"range":"221","text":"216"},{"range":"222","text":"215"},{"range":"222","text":"216"},[1683,1686],"unknown","never",[944,947],[950,953],[431,434],[465,468],[1096,1099],[1242,1245]]