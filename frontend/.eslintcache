[{"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/index.tsx":"1","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/App.tsx":"2","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/index.ts":"3","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Bars.tsx":"4","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/PageHeader.tsx":"5","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/AlgorithmSider.tsx":"6","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/types.ts":"7","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts":"8","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/types.ts":"9","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/types.ts":"10","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/listReducer.ts":"11","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/runningReducer.ts":"12","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/hooks/index.ts":"13","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/AnimateBars.tsx":"14","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/ListSizeSlider.tsx":"15","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/Bar.tsx":"16","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/actions.ts":"17","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/actions.ts":"18","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/lists.ts":"19","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/actions.ts":"20","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts":"21","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/calculateBoundingBoxes.ts":"22","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/constants.ts":"23","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts":"24","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/index.ts":"25","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts":"26","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/index.ts":"27","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/mergeSort.ts":"28","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/stalinSort.ts":"29","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bogoSort.ts":"30","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/quickSort.ts":"31","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bubbleSort.ts":"32","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/insertionSort.ts":"33","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Description.tsx":"34","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/descriptions.ts":"35"},{"size":285,"mtime":1612696469920,"results":"36","hashOfConfig":"37"},{"size":1901,"mtime":1615110164026,"results":"38","hashOfConfig":"37"},{"size":929,"mtime":1612696469920,"results":"39","hashOfConfig":"37"},{"size":1478,"mtime":1612696469920,"results":"40","hashOfConfig":"37"},{"size":2310,"mtime":1615114135064,"results":"41","hashOfConfig":"37"},{"size":4635,"mtime":1615114156847,"results":"42","hashOfConfig":"37"},{"size":1036,"mtime":1612696469920,"results":"43","hashOfConfig":"37"},{"size":1767,"mtime":1612696469920,"results":"44","hashOfConfig":"37"},{"size":852,"mtime":1615113923706,"results":"45","hashOfConfig":"37"},{"size":241,"mtime":1614682718511,"results":"46","hashOfConfig":"37"},{"size":707,"mtime":1614682718511,"results":"47","hashOfConfig":"37"},{"size":1655,"mtime":1615113904882,"results":"48","hashOfConfig":"37"},{"size":1100,"mtime":1612696469920,"results":"49","hashOfConfig":"37"},{"size":2324,"mtime":1612696469920,"results":"50","hashOfConfig":"37"},{"size":1718,"mtime":1615113695200,"results":"51","hashOfConfig":"37"},{"size":1183,"mtime":1614682718511,"results":"52","hashOfConfig":"37"},{"size":1012,"mtime":1612696469920,"results":"53","hashOfConfig":"37"},{"size":740,"mtime":1615113883982,"results":"54","hashOfConfig":"37"},{"size":261,"mtime":1612696469920,"results":"55","hashOfConfig":"37"},{"size":230,"mtime":1614682718511,"results":"56","hashOfConfig":"37"},{"size":104,"mtime":1615114086060,"results":"57","hashOfConfig":"37"},{"size":734,"mtime":1612696469920,"results":"58","hashOfConfig":"37"},{"size":219,"mtime":1612696469920,"results":"59","hashOfConfig":"37"},{"size":585,"mtime":1615113116713,"results":"60","hashOfConfig":"37"},{"size":429,"mtime":1615113773571,"results":"61","hashOfConfig":"37"},{"size":642,"mtime":1615114057076,"results":"62","hashOfConfig":"37"},{"size":172,"mtime":1612696469920,"results":"63","hashOfConfig":"37"},{"size":2379,"mtime":1614682718511,"results":"64","hashOfConfig":"37"},{"size":1175,"mtime":1614682718511,"results":"65","hashOfConfig":"37"},{"size":1209,"mtime":1614682718508,"results":"66","hashOfConfig":"37"},{"size":1806,"mtime":1614682718511,"results":"67","hashOfConfig":"37"},{"size":1220,"mtime":1614682718508,"results":"68","hashOfConfig":"37"},{"size":1367,"mtime":1614682718511,"results":"69","hashOfConfig":"37"},{"size":1442,"mtime":1615119223134,"results":"70","hashOfConfig":"37"},{"size":276,"mtime":1615112138833,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"19r9wms",{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"74"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"74"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"74"},"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/index.tsx",[],[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/App.tsx",["157","158","159"],"import React, { useRef, useEffect, useState} from 'react'\nimport {\n  Layout,\n  Menu,\n  Skeleton,\n  Divider,\n  Button\n} from 'antd'\n\nconst { Header, Footer, Content } = Layout\n\nimport Bars from './Components/Bars'\nimport AlgorithmSider from './Components/AlgorithmSider'\nimport PageHeader from './Components/PageHeader'\n\n// Figure out webworkers at some point maybe?\n//import SortWorker from 'comlink-loader!./worker'\n\nimport { useContainerDimensions } from './hooks'\nimport Description from './Components/Description'\n\n\nconst App: React.FC = () => {\n\n  const [loading, setLoading] = useState<boolean>(false)\n  const componentRef = useRef<HTMLDivElement>(null)\n  const { width } = useContainerDimensions(componentRef)\n\n\n  useEffect(() => {\n    if (loading === false) {\n      setTimeout(() => {\n        setLoading(false)\n      }, 250)\n      setLoading(true)\n    }\n    \n  }, [width])\n\n  return (\n    <div ref={componentRef}>\n      <Layout>\n        <PageHeader width={width} />\n        <Layout style={{ \n          margin: width > 992 ? '0 5em 0 5em' : '0',\n          marginTop: width > 922 ? 0 : '64px'\n        }}>\n\n          <AlgorithmSider />\n\n          <Layout style={{ padding: '0 10em em' }}>\n            <Content className=\"site-layout-content\" id='container'\n                style={{\n                  padding: 24,\n                  marginTop: width > 922 ? 0 : 20,\n                }}\n              >\n              <div className=\"bar-desc-container\" >\n                {\n                  loading ? <Skeleton/> :\n                    <Bars componentWidth={width} />\n                }\n                <Divider />\n                <Description />\n              </div>\n            </Content>\n          </Layout>\n        </Layout>\n        <Footer style={{ textAlign: 'center' }}>AlgoVis algorithm visualizer @2020 Created by Jere Salmensaari</Footer>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App\n","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Bars.tsx",["160","161"],"import React, { useState, useEffect, createRef } from 'react'\n\nimport Bar from './Visualization/Bar'\n\nimport { useSelector } from 'react-redux'\n\nimport { RootState, CurrentNumberState } from '../store'\n\nimport AnimateBars from './Visualization/AnimateBars'\n\ninterface Props {\n  componentWidth: number;\n}\n\n// wery much in progress\n// Maybe\n// https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba\n// https://codesandbox.io/s/reorder-elements-with-slide-transition-and-react-hooks-flip-211f2?from-embed\nconst Bars: React.FC<Props> = ({componentWidth}: { componentWidth: number } ) => {\n  const listSize: number = useSelector((state: RootState) => state.numberList.size)\n  const list: number[] = useSelector((state: RootState) => state.numberList.list)\n  const selected: CurrentNumberState = useSelector((state: RootState) => state.currentNumber)\n  \n  const width: number = 100/listSize * componentWidth/listSize \n\n  return (\n    <div style={{ display: 'flex' }}>\n      <AnimateBars>\n        {\n          list.map((b, i) => {\n            const barRef = createRef<HTMLDivElement>()\n            return <Bar key={b} width={width} height={b/listSize} area={i >= selected.area.start && i <= selected.area.end}\n            // Fix types here\n            // @ts-expect-error\n              main={i === selected.main} sub={i === selected.sub} ref={barRef} // Ref is null for some reason\n            />\n        })}\n      </AnimateBars>\n    </div>\n  )\n}\n\nexport default Bars","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/PageHeader.tsx",["162","163","164","165","166","167","168"],"import React, { useRef, useEffect, useState} from 'react'\nimport {\n  Layout,\n  Menu,\n  Button\n} from 'antd'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport algorithmRunner, {\n  Algorithms,\n  AlgorithmTypes\n} from '../services/AlgorithmRunner'\n\nimport { RootState } from '../store'\nimport { fetchNewList } from '../store/list/listReducer'\nimport { setStopped, setRunning, setWaiting } from '../store/running/runningReducer'\n\n\nconst { Header } = Layout\n\ntype PageHeaderProps = {\n  width: number\n}\n\nconst PageHeader = ({ width }: PageHeaderProps) => {\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running.state)\n  const algorithm = useSelector((state: RootState) => state.running.runnable)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished')\n      await dispatch(fetchNewList(listSize))\n\n    dispatch(setRunning())\n    \n    await algorithmRunner(algorithm)\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n  }\n\n  const buttonStyle: React.CSSProperties = { \n    display: 'inline-block', float: 'right', height: '90%', margin: 'auto 1em', \n    width: 'auto', transform: 'translate(0, -50%)', top: '50%'\n  }\n\n  const RunButton = () => (\n    running !== 'running' ?\n          <Button \n            type='primary' block size='large'\n            style={buttonStyle}\n            onClick={startVisualization}\n          >\n          Start Visualization\n          </Button>\n          : <Button\n              type='primary' block size='large'\n              style={buttonStyle} onClick={stopVisualization}\n            >\n              Stop Visualization\n            </Button>\n  )\n\n  return (\n    <Header className='header' style={{ \n      padding: width > 992 ? '0 5em 0 5em' : '0 1em 0 1em',\n      position: width > 922 ? 'relative' : 'fixed', width: '100%',\n      zIndex: 1000\n      }}>\n      <div />\n      <Menu\n        theme='dark' mode='horizontal' defaultSelectedKeys={['1']}\n        style={{ display: 'inline-block'}}\n      >\n        <Menu.Item key=\"1\">AlgoVis</Menu.Item>\n      </Menu>\n        {\n          width < 992 ? \n          <RunButton />\n          :null\n        }\n    </Header>\n  )\n}\n\nexport default PageHeader","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/AlgorithmSider.tsx",["169"],"import React, { useEffect, useState } from 'react'\nimport {\n  Layout,\n  Typography,\n  Menu,\n  Button,\n  Divider\n} from 'antd'\n\nconst { Title } = Typography\nconst { Sider } = Layout\n\nimport ListSizeSlider from '../Components/ListSizeSlider'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setStopped, setRunning, setWaiting, setRunnable} from '../store/running/runningReducer'\n\nimport algorithmRunner, {\n  Algorithms,\n  AlgorithmTypes\n} from '../services/AlgorithmRunner'\nimport { RootState } from '../store'\nimport { fetchNewList } from '../store/list/listReducer'\n\nconst AlgorithmSider: React.FC = () => {\n\n  const algorithmOptions: string[] = Object.values(AlgorithmTypes) as string[]\n\n  const [open, setOpen] = useState<boolean>(false)\n  const [breakpoint, setBreakpoint] = useState<boolean>(false)\n\n  const [currStyle, setCurrStyle] = useState<React.CSSProperties>({ position: 'relative' })\n  const [wrapperStyle, setWrappperStyle] = useState<React.CSSProperties>({ opacity: 1 })\n\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running.state)\n  const algorithm = useSelector((state: RootState) => state.running.runnable)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  useEffect(() => {\n    if (running === 'running' && breakpoint && open)\n      toggleOpen(true)\n  }, [running])\n\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished')\n      await dispatch(fetchNewList(listSize))\n\n    dispatch(setRunning())\n    \n    await algorithmRunner(algorithm)\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n  }\n\n  const menuOnClick = (event: any)  => {\n    const checkIfNotWaiting = async () => {\n      if (running !== 'waiting') {\n        await dispatch(fetchNewList(listSize))\n        dispatch(setWaiting())\n      }\n    }\n\n    checkIfNotWaiting()\n    dispatch(setRunnable(event.key as Algorithms))\n\n  }\n\n  const toggleOpen = (collapsed: boolean) => {\n    3\n\n    setOpen(!collapsed)\n    if (collapsed) \n      setWrappperStyle({\n        opacity: 0,\n        transition: 'opacity, 0.2s cubic-bezier(0,1,0,1)',\n      })\n    else \n      setWrappperStyle({\n        ...wrapperStyle,\n        opacity: 1,\n        transition: 'opacity, 0.2s cubic-bezier(1,0,1,0)',\n      })\n    \n  }\n\n  const handleBreakpoint = (breakpoint: boolean) => {\n    if (breakpoint) {\n      setCurrStyle({\n        position: 'absolute',\n        zIndex: 100,\n        transition: 'all 0.2s'\n      })\n      setWrappperStyle({\n        opacity: 0,\n        transition: 'opacity, 0.2s cubic-bezier(0,1,0,1)',\n      })\n    } else {\n      setCurrStyle({\n        position: 'relative',\n        zIndex: 1,\n        transition: 'none'\n      })\n      setWrappperStyle({\n        ...wrapperStyle,\n        opacity: 1,\n        transition: 'none',\n      })\n    }\n      \n\n    setBreakpoint(breakpoint)\n  }\n\n  const RunButton = () => (\n    running === 'stopped' || running === 'finished' || running === 'waiting' ?\n      <Button type='primary' block size='large' style={{\n          margin: '1em auto',\n        }}\n        onClick={startVisualization}\n      >Visualize</Button> :\n      <Button type='primary' block size='large' style={{\n          margin: '1em auto'\n        }}\n        onClick={stopVisualization}\n      >Stop visualization</Button>\n    \n  )\n\n\n  return (\n    <>\n      <Sider\n        width={'19em'} className='sider-root' theme='light'\n        collapsed={!open}\n        collapsedWidth=\"0\" onCollapse={toggleOpen} breakpoint=\"lg\"\n        onBreakpoint={handleBreakpoint} style={currStyle} zeroWidthTriggerStyle={{ top: 0 }}\n      >\n       <div className='sider-wrapper' style={wrapperStyle}>\n        <Title level={2} style={{ margin: '0,5em auto', padding: '0.2em 1em' }}>Select list size</Title>\n          {/* List size slider */}\n          <ListSizeSlider breakpoint={breakpoint} />\n\n          {/* Run button */}\n          {\n            breakpoint ? null \n            : <RunButton />\n          }\n\n          <Divider>Select sorting algorithm</Divider>\n          {/*Menu for selecting sorting algorithm*/}\n          <Menu\n            mode=\"inline\"\n            style={{ borderRight: 0 , transition: 'none'}}\n            defaultSelectedKeys={[algorithm]}\n            onClick={menuOnClick}\n          >\n          \n          {algorithmOptions.map(a =>\n            <Menu.Item\n              key={a}\n              disabled={running === 'running' ? true : false}\n              style={{ transition: 'none' }}\n            >{a}</Menu.Item>\n          )}\n          </Menu>\n       </div>\n      </Sider>\n    </>\n  )\n}\n\nexport default AlgorithmSider","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts",["170"],"import {\n  CurrentNumberState,\n  CurrentNumberActionType,\n  SET_CURRENT,\n  SET_MAIN,\n  SET_SUB,\n  REMOVE_CURRENT,\n  REMOVE_SUB,\n  SET_AREA\n} from './types'\nimport {\n  setCurrentAction,\n  setMainAction,\n  setSubAction,\n  removeCurrentAction,\n  removeSubAction,\n  setAreaAction\n} from './actions'\nimport { AppType } from '../'\n\nconst initialState: CurrentNumberState = {\n  main: -1,\n  sub: null,\n  area: {\n    start: -1,\n    end: -1\n  }\n}\n\nexport const setCurrent = (main: number, sub: number | null): AppType => async dispatch => {\n  dispatch(setCurrentAction(main, sub))\n}\n\nexport const setMain = (main: number): AppType => async dispatch => {\n  dispatch(setMainAction(main))\n}\n\nexport const setSub = (sub: number): AppType => async dispatch => {\n  dispatch(setSubAction(sub))\n}\n\nexport const removeCurrent = (): AppType => async dispatch => {\n  dispatch(removeCurrentAction())\n}\n\nexport const removeSub = (): AppType => async dispatch => {\n  dispatch(removeSubAction())\n}\n\nconst reducer = (state = initialState, action: CurrentNumberActionType): CurrentNumberState => {\n  switch(action.type) {\n  case SET_CURRENT:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: action.payload.sub\n    }\n  case SET_MAIN:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: state.sub\n    }\n  case SET_SUB:\n    return {\n      ...state,\n      main: state.main,\n      sub: action.payload.sub\n    }\n  case REMOVE_CURRENT:\n    return {\n      ...state,\n      main: -1\n    }\n  case REMOVE_SUB:\n    return {\n      ...state,\n      sub: null\n    }\n  case SET_AREA:\n    return {\n      ...state,\n      area: {\n        start: action.payload.start,\n        end: action.payload.end\n      }\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/listReducer.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/runningReducer.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/hooks/index.ts",["171","172","173"],"import { useState, useEffect, useRef} from 'react'\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport const useContainerDimensions = (myRef: React.MutableRefObject<HTMLDivElement | null>): Dimensions => {\n  const getDimensions = (): Dimensions => ({\n    width: myRef.current?.offsetWidth || 0,\n    height: myRef.current?.offsetHeight || 0\n  })\n\n  const [dimensions, setDimensions] = useState<Dimensions>({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current)\n      setDimensions(getDimensions())\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [myRef])\n\n  return dimensions\n\n}\n\n// https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n// Used to get the previous value of an object\nexport const usePrevious = (value: any): any => {\n  const prevChildrenRef = useRef()\n\n  useEffect(() => {\n    prevChildrenRef.current = value\n  }, [value])\n\n  return prevChildrenRef.current\n}","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/AnimateBars.tsx",["174","175","176"],"\n/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Used to animate changing bar positions\n*/\n\nimport React, { useState, useEffect, useLayoutEffect, ReactChildren } from 'react'\nimport { usePrevious } from '../../hooks'\nimport calculateBoundingBoxes from '../../utils/calculateBoundingBoxes'\n\nimport { AnimationChild, DOMRectDict } from '../../types'\n\nconst AnimateBars: React.FC<any> = ({ children }: { children: any}) => {\n  const [boundingBox, setBoundingBox] = useState<DOMRectDict | null>({})\n  const [prevBoundingBox, setPrevBoundingBox] = useState<DOMRectDict | null>({})\n  const prevChildren = usePrevious(children)\n\n  // Fix bounding boxes updating when list size updates\n  useLayoutEffect(() => {\n    const newBoundingBox = calculateBoundingBoxes(children)\n    setBoundingBox(newBoundingBox)\n  }, [children])\n\n  useLayoutEffect(() => {\n    const prevBoundingBox = calculateBoundingBoxes(prevChildren)\n    setPrevBoundingBox(prevBoundingBox)\n  }, [prevChildren])\n\n  useEffect(() => {\n    if (!prevBoundingBox || !boundingBox || Object.keys(prevBoundingBox).length < Object.keys(boundingBox).length)\n      return\n\n    const hasPrevBoundingBox = Object.keys(prevBoundingBox).length\n\n    if (hasPrevBoundingBox) {\n      React.Children.forEach(children, (child: AnimationChild) => {\n        const domNode = child.ref.current\n        const firstBox = prevBoundingBox[child.key]\n        const lastBox = boundingBox[child.key]\n        if (!firstBox || !lastBox)\n          return\n\n        const changeInX = firstBox.left - lastBox.left\n\n\n        if (changeInX) {\n          requestAnimationFrame(() => {\n            // Before DOM paints, invert child to old position\n            // Maybe longer animation time?\n            // Reduce speed of sorting so the animation shows\n            domNode.style.transform = `translateX(${changeInX}px)`\n            domNode.style.transition = `transform 0ms`\n\n            requestAnimationFrame(() => {\n              // After previous frame, remove the transition to play the animation\n              domNode.style.transform = ''\n              domNode.style.transition = 'transform 200ms'\n            })\n          })\n        }\n      })\n    }\n  }, [boundingBox, prevBoundingBox, children])\n\n  return children\n\n}\n\nexport default AnimateBars\n","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/ListSizeSlider.tsx",["177","178","179","180"],"import React, { useState, useEffect, useRef } from 'react'\nimport { Slider } from 'antd'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\n\nimport { fetchNewList } from '../store/list/listReducer'\n\nimport { isRunning } from '../utils'\nimport { setWaiting } from '../store/running/runningReducer'\n\ntype SliderProps = {\n  breakpoint: boolean\n}\n\nconst ListSizeSlider = ({ breakpoint }: SliderProps) => {\n  const dispatch = useDispatch()\n  const maxSliderValue = breakpoint ? 20 : 40\n\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n  const visualizationStatus = useSelector((state: RootState) => state.running.state)\n\n  const [sliderValue, setSliderValue] = useState(listSize)\n \n  useEffect(() => {\n    dispatch(setWaiting());\n    dispatch(fetchNewList(maxSliderValue/2))\n    setSliderValue(maxSliderValue/2)\n  }, [maxSliderValue])\n\n  useEffect(() => {\n    if (visualizationStatus === 'finished') {\n      dispatch(setWaiting())\n      dispatch(fetchNewList(listSize))\n    }\n    \n    \n  }, [listSize])\n\n  const onSliderChange = (value: any) => {\n    if (typeof value !== 'number' || isNaN(Number(value)))\n      return\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > maxSliderValue)\n      value = maxSliderValue\n    dispatch(fetchNewList(value))\n  }\n\n  return (\n    <div>\n      <Slider\n        min={3}\n        max={ maxSliderValue }\n        onChange={onSliderChange}\n        onAfterChange={setNewListSize}\n        value={sliderValue}\n        tipFormatter={null}\n        disabled={isRunning() === 'running'}\n      />\n    </div>\n  )\n}\n\nexport default ListSizeSlider","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/Bar.tsx",["181"],"import React, { MutableRefObject } from 'react'\n\ntype Props = {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\ntype Ref = HTMLDivElement\n\ninterface Bar {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\n// Renders a bar to represent a number in the list\nconst Bar: React.FC<Bar> = React.forwardRef<Ref, Props>((props: Props, ref) => {\n\n  const normal = !props.main && !props.sub\n  const maxHeight = 30\n  const style = {\n    height: `${maxHeight+1}em`,\n    width: `${props.width}%`,\n    background: props.area ? \"rgb(170, 182, 193, 0.6)\" : 'transparent',\n    \n  }\n  const barStyle = {\n    height: `${maxHeight*props.height}em`,\n    maxHeight: `${maxHeight}em`,\n    width: 'auto',\n    background: normal ? '#f0f2f5' : props.main ? '#FF7A32' : \n    props.sub ? '#2EF550' : '#f0f2f5',\n    zIndex: 50,\n    borderStyle: 'solid',\n    borderWidth: '0.2em',\n    borderColor: '#1890ff',//'#f0f2f5',\n    margin: '0.1em',\n    opacity: '100%'\n  }\n\n  return (\n    <div style={style} >\n      <div style={barStyle} ref={ref} />\n    </div>\n  )\n})\n\n// Eslint is being a douche\nBar.displayName = 'Bar'\n\nexport default Bar\n","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/actions.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/actions.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/lists.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/actions.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/calculateBoundingBoxes.ts",["182"],"/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Calculates the bounding boxes of elements given to it\n*/\n\nimport React, { ReactChildren } from 'react'\n\nimport { AnimationChild, AnimationChildren, DOMRectDict } from '../types'\n\nconst calculateBoundingBoxes = (children: AnimationChildren): DOMRectDict | null => {\n  const boundingBoxes: DOMRectDict = {}\n\n  React.Children.forEach(children, (child: AnimationChild) => {\n    if (!child.ref.current)\n      return null\n    const domNode = child.ref.current\n    const nodeBoundingBox = domNode.getBoundingClientRect()\n\n\n    boundingBoxes[child.key] = nodeBoundingBox\n  })\n\n  return boundingBoxes\n}\n\nexport default calculateBoundingBoxes","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/constants.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts",["183"],"import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  InsertionSort,\n  StalinSort,\n  MergeSort,\n  Algorithms\n} from './types'\n\nimport * as a from '../../Algorithms'\n\nconst algorithmRunner = async (algorithm: Algorithms) =>  {  \n    switch (algorithm) {\n    case BubbleSort:\n      return await a.bubbleSort()\n    case QuickSort:\n      return await a.quickSort()\n    case BogoSort:\n      return await a.bogoSort()\n    case InsertionSort:\n      return await a.insertionSort()\n    case StalinSort:\n      return await a.stalinSort()\n    case MergeSort:\n      return await a.mergeSort()\n    default:\n      return\n    }\n}\n\nexport default algorithmRunner","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/mergeSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/stalinSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bogoSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/quickSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bubbleSort.ts",[],[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/insertionSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Description.tsx",["184","185","186","187","188"],"import React, { useState, useEffect, ReactElement, ReactHTML } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\n\nimport { Skeleton, Typography } from 'antd'\nconst { Paragraph, Title } = Typography\n\nimport descriptionService from '../services/descriptions'\nimport { RootState } from '../store'\n\n\nconst Description = () => {\n\tconst [description, setDescription] = useState<string>(\"\")\n\n\tconst algorithm = useSelector((state: RootState) => state.running.runnable)\n\t\n\tuseEffect(() => {\n\t\tconst getDesc = async () => {\n\t\t\tconst desc = await descriptionService.fetchDescription(algorithm.toLowerCase())\n\t\t\tsetDescription(desc)\n\t\t\tconsole.log(desc)\n\t\t}\n\t\tconsole.log('useEffect')\n\t\tconsole.log(algorithm)\n\n\t\tgetDesc()\n\t}, [algorithm])\n\n\tconst mapToParagraphs = (par: string, i: number) => {\n\t\tconsole.log\n\n\t\tconst mapToCode = (desc: any, i: number) => {\n\t\t\treturn <span key={i} style={{whiteSpace: 'pre'}}>{desc}<br/></span>\n\t\t}\n\n\t\tif (par[0] === '#')\n\t\t\treturn <Title level={4} >{par.substring(1)}</Title>\n\t\telse if (par[0]==='/' && par[1]==='/')\n\t\t\treturn <Paragraph code >{par.substring(2).split('//').map(mapToCode)}</Paragraph>\n\t\telse \n\t\t\treturn <Paragraph key={i}>{par}</Paragraph>\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Title level={3}>Description</Title>\n\t\t\t{description ? \n\t\t\tdescription.split(\"\\n\").map((d, i) => mapToParagraphs(d, i)) : \n\t\t\t<div>\n\t\t\t\t<Skeleton/>\n\t\t\t\t<Skeleton/>\n\t\t\t</div>}\n\t\t</div>\n\t)\n}\n\nexport default Description","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/descriptions.ts",["189"],"import axios from 'axios'\nimport {apiBaseUrl} from '../constants'\n\nconst fetchDescription = async (algorithmName: string) => {\n\tconst { data: desc } = await axios.post(`${apiBaseUrl}/description`, {algorithm: algorithmName})\n\treturn desc\n}\n\nexport default { fetchDescription }",{"ruleId":"190","severity":1,"message":"191","line":4,"column":3,"nodeType":"192","messageId":"193","endLine":4,"endColumn":7},{"ruleId":"190","severity":1,"message":"194","line":7,"column":3,"nodeType":"192","messageId":"193","endLine":7,"endColumn":9},{"ruleId":"190","severity":1,"message":"195","line":10,"column":9,"nodeType":"192","messageId":"193","endLine":10,"endColumn":15},{"ruleId":"190","severity":1,"message":"196","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":25},{"ruleId":"190","severity":1,"message":"197","line":1,"column":27,"nodeType":"192","messageId":"193","endLine":1,"endColumn":36},{"ruleId":"190","severity":1,"message":"198","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":23},{"ruleId":"190","severity":1,"message":"197","line":1,"column":25,"nodeType":"192","messageId":"193","endLine":1,"endColumn":34},{"ruleId":"190","severity":1,"message":"196","line":1,"column":36,"nodeType":"192","messageId":"193","endLine":1,"endColumn":44},{"ruleId":"190","severity":1,"message":"199","line":11,"column":3,"nodeType":"192","messageId":"193","endLine":11,"endColumn":13},{"ruleId":"190","severity":1,"message":"200","line":12,"column":3,"nodeType":"192","messageId":"193","endLine":12,"endColumn":17},{"ruleId":"190","severity":1,"message":"201","line":17,"column":34,"nodeType":"192","messageId":"193","endLine":17,"endColumn":44},{"ruleId":"202","severity":1,"message":"203","line":26,"column":20,"nodeType":"204","messageId":"205","endLine":26,"endColumn":51},{"ruleId":"206","severity":1,"message":"207","line":60,"column":31,"nodeType":"208","messageId":"209","endLine":60,"endColumn":34,"suggestions":"210"},{"ruleId":"190","severity":1,"message":"211","line":17,"column":3,"nodeType":"192","messageId":"193","endLine":17,"endColumn":16},{"ruleId":"202","severity":1,"message":"212","line":37,"column":29,"nodeType":"192","messageId":"213","endLine":37,"endColumn":39},{"ruleId":"206","severity":1,"message":"207","line":37,"column":36,"nodeType":"208","messageId":"209","endLine":37,"endColumn":39,"suggestions":"214"},{"ruleId":"206","severity":1,"message":"207","line":37,"column":42,"nodeType":"208","messageId":"209","endLine":37,"endColumn":45,"suggestions":"215"},{"ruleId":"190","severity":1,"message":"216","line":7,"column":55,"nodeType":"192","messageId":"193","endLine":7,"endColumn":68},{"ruleId":"206","severity":1,"message":"207","line":13,"column":29,"nodeType":"208","messageId":"209","endLine":13,"endColumn":32,"suggestions":"217"},{"ruleId":"206","severity":1,"message":"207","line":13,"column":63,"nodeType":"208","messageId":"209","endLine":13,"endColumn":66,"suggestions":"218"},{"ruleId":"190","severity":1,"message":"198","line":1,"column":38,"nodeType":"192","messageId":"193","endLine":1,"endColumn":44},{"ruleId":"202","severity":1,"message":"203","line":16,"column":24,"nodeType":"204","messageId":"205","endLine":16,"endColumn":56},{"ruleId":"206","severity":1,"message":"207","line":40,"column":34,"nodeType":"208","messageId":"209","endLine":40,"endColumn":37,"suggestions":"219"},{"ruleId":"206","severity":1,"message":"207","line":46,"column":34,"nodeType":"208","messageId":"209","endLine":46,"endColumn":37,"suggestions":"220"},{"ruleId":"190","severity":1,"message":"221","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":33},{"ruleId":"190","severity":1,"message":"216","line":6,"column":17,"nodeType":"192","messageId":"193","endLine":6,"endColumn":30},{"ruleId":"202","severity":1,"message":"203","line":13,"column":25,"nodeType":"204","messageId":"205","endLine":13,"endColumn":57},{"ruleId":"190","severity":1,"message":"222","line":1,"column":38,"nodeType":"192","messageId":"193","endLine":1,"endColumn":50},{"ruleId":"190","severity":1,"message":"223","line":1,"column":52,"nodeType":"192","messageId":"193","endLine":1,"endColumn":61},{"ruleId":"190","severity":1,"message":"224","line":2,"column":10,"nodeType":"192","messageId":"193","endLine":2,"endColumn":21},{"ruleId":"202","severity":1,"message":"203","line":12,"column":21,"nodeType":"204","messageId":"205","endLine":12,"endColumn":26},{"ruleId":"206","severity":1,"message":"207","line":32,"column":28,"nodeType":"208","messageId":"209","endLine":32,"endColumn":31,"suggestions":"225"},{"ruleId":"202","severity":1,"message":"203","line":4,"column":26,"nodeType":"204","messageId":"205","endLine":4,"endColumn":58},"@typescript-eslint/no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Header' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Algorithms' is defined but never used.","'AlgorithmTypes' is defined but never used.","'setWaiting' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["226","227"],"'setAreaAction' is defined but never used.","Argument 'value' should be typed with a non-any type.","anyTypedArg",["228","229"],["230","231"],"'ReactChildren' is defined but never used.",["232","233"],["234","235"],["236","237"],["238","239"],"'MutableRefObject' is defined but never used.","'ReactElement' is defined but never used.","'ReactHTML' is defined but never used.","'useDispatch' is defined but never used.",["240","241"],{"messageId":"242","fix":"243","desc":"244"},{"messageId":"245","fix":"246","desc":"247"},{"messageId":"242","fix":"248","desc":"244"},{"messageId":"245","fix":"249","desc":"247"},{"messageId":"242","fix":"250","desc":"244"},{"messageId":"245","fix":"251","desc":"247"},{"messageId":"242","fix":"252","desc":"244"},{"messageId":"245","fix":"253","desc":"247"},{"messageId":"242","fix":"254","desc":"244"},{"messageId":"245","fix":"255","desc":"247"},{"messageId":"242","fix":"256","desc":"244"},{"messageId":"245","fix":"257","desc":"247"},{"messageId":"242","fix":"258","desc":"244"},{"messageId":"245","fix":"259","desc":"247"},{"messageId":"242","fix":"260","desc":"244"},{"messageId":"245","fix":"261","desc":"247"},"suggestUnknown",{"range":"262","text":"263"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"262","text":"264"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"265","text":"263"},{"range":"265","text":"264"},{"range":"266","text":"263"},{"range":"266","text":"264"},{"range":"267","text":"263"},{"range":"267","text":"264"},{"range":"268","text":"263"},{"range":"268","text":"264"},{"range":"269","text":"263"},{"range":"269","text":"264"},{"range":"270","text":"263"},{"range":"270","text":"264"},{"range":"271","text":"263"},{"range":"271","text":"264"},[1692,1695],"unknown","never",[944,947],[950,953],[431,434],[465,468],[1102,1105],[1248,1251],[846,849]]