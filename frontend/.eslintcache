[{"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/index.tsx":"1","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/App.tsx":"2","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/index.ts":"3","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Bars.tsx":"4","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/ListSizeSlider.tsx":"5","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/types.ts":"6","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/listReducer.ts":"7","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/types.ts":"8","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts":"9","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts":"10","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/Bar.tsx":"11","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/actions.ts":"12","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/lists.ts":"13","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/actions.ts":"14","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts":"15","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts":"16","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/constants.ts":"17","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/index.ts":"18","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/quickSort.ts":"19","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bubbleSort.ts":"20","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bogoSort.ts":"21","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/isRunning.ts":"22","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/runningReducer.ts":"23","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/types.ts":"24","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/actions.ts":"25"},{"size":285,"mtime":1610374432987,"results":"26","hashOfConfig":"27"},{"size":4042,"mtime":1610368984664,"results":"28","hashOfConfig":"27"},{"size":929,"mtime":1610364646582,"results":"29","hashOfConfig":"27"},{"size":957,"mtime":1610379949591,"results":"30","hashOfConfig":"27"},{"size":1209,"mtime":1610365199840,"results":"31","hashOfConfig":"27"},{"size":341,"mtime":1610379928511,"results":"32","hashOfConfig":"27"},{"size":959,"mtime":1610379957758,"results":"33","hashOfConfig":"27"},{"size":816,"mtime":1610365360377,"results":"34","hashOfConfig":"27"},{"size":1560,"mtime":1610365380874,"results":"35","hashOfConfig":"27"},{"size":57,"mtime":1609944163854,"results":"36","hashOfConfig":"27"},{"size":641,"mtime":1610370144842,"results":"37","hashOfConfig":"27"},{"size":332,"mtime":1610379915314,"results":"38","hashOfConfig":"27"},{"size":262,"mtime":1609855217189,"results":"39","hashOfConfig":"27"},{"size":820,"mtime":1610108861279,"results":"40","hashOfConfig":"27"},{"size":395,"mtime":1610108473356,"results":"41","hashOfConfig":"27"},{"size":413,"mtime":1610368483474,"results":"42","hashOfConfig":"27"},{"size":153,"mtime":1610106741682,"results":"43","hashOfConfig":"27"},{"size":83,"mtime":1610108518906,"results":"44","hashOfConfig":"27"},{"size":1667,"mtime":1610368429427,"results":"45","hashOfConfig":"27"},{"size":1096,"mtime":1610379857713,"results":"46","hashOfConfig":"27"},{"size":1239,"mtime":1610379874327,"results":"47","hashOfConfig":"27"},{"size":324,"mtime":1610368400300,"results":"48","hashOfConfig":"27"},{"size":1029,"mtime":1610367889693,"results":"49","hashOfConfig":"27"},{"size":542,"mtime":1610367605606,"results":"50","hashOfConfig":"27"},{"size":488,"mtime":1610367640493,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"5g5ilw",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/index.tsx",[],[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/App.tsx",["107"],"import React, { useState } from 'react'\nimport {\n  Layout,\n  Typography,\n  Menu,\n  Button,\n  Skeleton,\n  Divider\n} from 'antd'\n\nconst { Title } = Typography\nconst { Header, Footer, Sider, Content } = Layout\n\nimport Bars from './Components/Bars'\nimport ListSizeSlider from './Components/ListSizeSlider'\n\nimport isRunning from './utils/isRunning'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setStopped, setRunning, setWaiting } from './store/running/runningReducer'\n\n// Figure out webworkers at some point maybe?\n//import SortWorker from 'comlink-loader!./worker'\n\nimport {\n  runAlgorithm,\n  Algorithms,\n  AlgorithmTypes\n} from './services/AlgorithmRunner'\nimport { RootState } from './store'\nimport { fetchNewList } from './store/list/listReducer'\n\nconst App: React.FC = () => {\n  const algorithmOptions: string[] = Object.values(AlgorithmTypes) as string[]\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<string>(algorithmOptions[0])\n\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished') \n      await dispatch(fetchNewList(listSize))\n      \n    dispatch(setRunning())\n    const selected: Algorithms =  selectedAlgorithm as Algorithms\n    await runAlgorithm(selected)\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n    setTimeout(() => {\n      isRunning()\n    }, 20);\n  }\n\n  const menuOnClick = (event: any)  => {\n    const checkIfNotWaiting = async () => {\n      if (running !== 'waiting') {\n        await dispatch(fetchNewList(listSize))\n        dispatch(setWaiting())\n      }\n    }\n    \n    checkIfNotWaiting()\n\n    setSelectedAlgorithm(event.key)\n  }\n\n  return (\n    <div>\n      <Layout>\n        <Header className='header'>\n          <div />\n          <Menu theme='dark' mode='horizontal' defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\">AlgoVis</Menu.Item>\n          </Menu>\n        </Header>\n        <Layout style={{ margin: '0 5em 0 5em'}}>\n          <Sider width={'20%'} className='site-layout-background' theme='light'>\n\n            \n\n            <Title level={2} style={{ margin: '0,5em auto', padding: '0.2em 1em'}}>Select list size</Title>\n            <ListSizeSlider />\n            {running === 'stopped' || running === 'finished' || running === 'waiting' ? \n              <Button type='primary' block size='large' style={{\n                  margin: '1em auto',\n                }}\n                onClick={startVisualization}\n              >Visualize</Button> :\n              <Button type='primary' block size='large' style={{\n                  margin: '1em auto'\n                }}\n                onClick={stopVisualization}\n              >Stop visualization</Button>\n            }\n            <Divider>Select sorting algorithm</Divider>\n            {/*Menu for selecting sorting algorithm*/}\n            <Menu\n              mode=\"inline\"\n              style={{ borderRight: 0 }}\n              defaultOpenKeys={['slider', 'sub2']}\n              defaultSelectedKeys={[algorithmOptions[0]]}\n              onClick={menuOnClick}\n            >\n              {algorithmOptions.map(a => \n                <Menu.Item\n                  key={a}\n                  disabled={running === 'running' ? true : false}\n                >{a}</Menu.Item>  \n              )}\n            </Menu>\n            \n          </Sider>\n          <Layout style={{ padding: '0 10em em'}}>\n            <Content className=\"site-layout-content\"\n              style={{\n                padding: 24,\n                margin: 0,\n              }}>\n              <Bars />\n              <Divider />\n              <Skeleton />\n              <Skeleton />\n            </Content>\n          </Layout>\n        </Layout>\n        <Footer style={{ textAlign: 'center'}}>AlgoVis algorithm visualizer @2020 Created by Jere Salmensaari</Footer>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App\n","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Bars.tsx",["108","109","110","111","112"],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/ListSizeSlider.tsx",["113","114"],"import React, { useState, useEffect } from 'react'\nimport { Slider } from 'antd'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\n\nimport { fetchNewList, changeListSize } from '../store/list/listReducer'\n\nimport isRunning from '../utils/isRunning'\n\n\nconst ListSizeSlider: React.FC = () => {\n  const dispatch = useDispatch()\n\n  const [sliderValue, setSliderValue] = useState(25)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n\tuseEffect(() => {\n    dispatch(fetchNewList(listSize))\n  }, [listSize])\n\n  const onSliderChange = (value: any) => {\n    if (typeof value !== 'number' || isNaN(Number(value)))\n      return\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > 60)\n      value = 60\n    dispatch(changeListSize(value))\n  }\n\n\treturn (\n\t\t<div>\n\t\t\t<Slider\n\t\t\t\tmin={3}\n        max={60}\n        onChange={onSliderChange}\n        onAfterChange={setNewListSize}\n        value={typeof sliderValue === 'number' ? sliderValue : 25}\n        tipFormatter={null}\n        disabled={isRunning() === 'running'}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default ListSizeSlider","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/listReducer.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/Bar.tsx",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/actions.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/lists.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/actions.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts",["115"],"import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  Algorithms\n} from './types'\n\nimport {\n  quickSort,\n  bubbleSort,\n  bogoSort\n} from '../../Algorithms'\n\nexport const runAlgorithm = async (type: Algorithms) => {\n  switch (type) {\n    case BubbleSort:\n      return await bubbleSort()\n    case QuickSort:\n      return await quickSort()\n    case BogoSort:\n      return await bogoSort()\n    default:\n      return\n  }\n}","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/constants.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/quickSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bubbleSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bogoSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/isRunning.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/runningReducer.ts",["116"],"import {\n  RunningStateAction,\n  runningType,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\nimport {\n  setRunningAction,\n  setStoppedAction,\n  setFinishedAction,\n  setWaitingAction\n} from './actions'\n\nimport { AppType } from '..'\n\nconst initialState: runningType = 'waiting'\n\nexport const setRunning = (): AppType => async dispatch => {\n  dispatch(setRunningAction())\n}\n\nexport const setStopped = (): AppType => async dispatch => {\n  dispatch(setStoppedAction())\n}\n\nexport const setFinished = (): AppType => async dispatch => {\n  dispatch(setFinishedAction())\n}\n\nexport const setWaiting = (): AppType => async dispatch => {\n  dispatch(setWaitingAction())\n}\n\nconst reducer = (state = initialState, action: RunningStateAction) => {\n  switch (action.type){\n    case SET_RUNNING:\n      return 'running' \n    case SET_STOPPED:\n      return 'stopped'\n    case SET_FINISHED:\n      return 'finished'\n    case SET_WAITING:\n      return 'waiting'\n    default:\n      return state\n  }\n}\n\nexport default reducer","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/actions.ts",[],{"ruleId":"117","severity":1,"message":"118","line":58,"column":31,"nodeType":"119","messageId":"120","endLine":58,"endColumn":34,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":1,"column":17,"nodeType":"124","messageId":"125","endLine":1,"endColumn":25},{"ruleId":"122","severity":1,"message":"126","line":1,"column":27,"nodeType":"124","messageId":"125","endLine":1,"endColumn":36},{"ruleId":"122","severity":1,"message":"127","line":5,"column":8,"nodeType":"124","messageId":"125","endLine":5,"endColumn":17},{"ruleId":"122","severity":1,"message":"128","line":7,"column":10,"nodeType":"124","messageId":"125","endLine":7,"endColumn":21},{"ruleId":"122","severity":1,"message":"129","line":16,"column":9,"nodeType":"124","messageId":"125","endLine":16,"endColumn":16},{"ruleId":"117","severity":1,"message":"118","line":22,"column":34,"nodeType":"119","messageId":"120","endLine":22,"endColumn":37,"suggestions":"130"},{"ruleId":"117","severity":1,"message":"118","line":28,"column":34,"nodeType":"119","messageId":"120","endLine":28,"endColumn":37,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":14,"column":29,"nodeType":"134","messageId":"135","endLine":14,"endColumn":56},{"ruleId":"132","severity":1,"message":"133","line":36,"column":17,"nodeType":"134","messageId":"135","endLine":36,"endColumn":70},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["136","137"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'NodeGroup' is defined but never used.","'useDispatch' is defined but never used.","'barList' is assigned a value but never used.",["138","139"],["140","141"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType",{"messageId":"142","fix":"143","desc":"144"},{"messageId":"145","fix":"146","desc":"147"},{"messageId":"142","fix":"148","desc":"144"},{"messageId":"145","fix":"149","desc":"147"},{"messageId":"142","fix":"150","desc":"144"},{"messageId":"145","fix":"151","desc":"147"},"suggestUnknown",{"range":"152","text":"153"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"152","text":"154"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"155","text":"153"},{"range":"155","text":"154"},{"range":"156","text":"153"},{"range":"156","text":"154"},[1578,1581],"unknown","never",[606,609],[752,755]]