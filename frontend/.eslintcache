[{"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/index.tsx":"1","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/App.tsx":"2","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/index.ts":"3","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Bars.tsx":"4","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/AlgorithmSider.tsx":"5","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/listReducer.ts":"6","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/types.ts":"7","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts":"8","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/types.ts":"9","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/runningReducer.ts":"10","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/types.ts":"11","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/hooks/index.ts":"12","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Visualization/Bar.tsx":"13","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Visualization/AnimateBars.tsx":"14","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/ListSizeSlider.tsx":"15","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/actions.ts":"16","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/actions.ts":"17","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/actions.ts":"18","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/lists.ts":"19","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts":"20","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/utils/calculateBoundingBoxes.ts":"21","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/constants.ts":"22","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts":"23","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts":"24","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/utils/index.ts":"25","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/index.ts":"26","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/mergeSort.ts":"27","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/stalinSort.ts":"28","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/insertionSort.ts":"29","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/bogoSort.ts":"30","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/quickSort.ts":"31","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/bubbleSort.ts":"32","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/PageHeader.tsx":"33"},{"size":285,"mtime":1609669047044,"results":"34","hashOfConfig":"35"},{"size":1876,"mtime":1614436159512,"results":"36","hashOfConfig":"35"},{"size":929,"mtime":1610437831433,"results":"37","hashOfConfig":"35"},{"size":1478,"mtime":1612616353020,"results":"38","hashOfConfig":"35"},{"size":4587,"mtime":1614435008551,"results":"39","hashOfConfig":"35"},{"size":707,"mtime":1614087815835,"results":"40","hashOfConfig":"35"},{"size":241,"mtime":1614087754796,"results":"41","hashOfConfig":"35"},{"size":1767,"mtime":1612616310270,"results":"42","hashOfConfig":"35"},{"size":1036,"mtime":1612616196153,"results":"43","hashOfConfig":"35"},{"size":1009,"mtime":1614083868553,"results":"44","hashOfConfig":"35"},{"size":545,"mtime":1610609236540,"results":"45","hashOfConfig":"35"},{"size":1100,"mtime":1612605720151,"results":"46","hashOfConfig":"35"},{"size":1183,"mtime":1614352156094,"results":"47","hashOfConfig":"35"},{"size":2324,"mtime":1612613580522,"results":"48","hashOfConfig":"35"},{"size":1712,"mtime":1614352224758,"results":"49","hashOfConfig":"35"},{"size":509,"mtime":1610609236540,"results":"50","hashOfConfig":"35"},{"size":1012,"mtime":1612616199793,"results":"51","hashOfConfig":"35"},{"size":230,"mtime":1614087793076,"results":"52","hashOfConfig":"35"},{"size":261,"mtime":1610609236540,"results":"53","hashOfConfig":"35"},{"size":57,"mtime":1610437831433,"results":"54","hashOfConfig":"35"},{"size":734,"mtime":1612613580525,"results":"55","hashOfConfig":"35"},{"size":219,"mtime":1612605720151,"results":"56","hashOfConfig":"35"},{"size":946,"mtime":1614433969865,"results":"57","hashOfConfig":"35"},{"size":585,"mtime":1612605720151,"results":"58","hashOfConfig":"35"},{"size":423,"mtime":1612605720151,"results":"59","hashOfConfig":"35"},{"size":172,"mtime":1612605720151,"results":"60","hashOfConfig":"35"},{"size":2379,"mtime":1614087914825,"results":"61","hashOfConfig":"35"},{"size":1175,"mtime":1614420104722,"results":"62","hashOfConfig":"35"},{"size":1367,"mtime":1614087900119,"results":"63","hashOfConfig":"35"},{"size":1209,"mtime":1614087889949,"results":"64","hashOfConfig":"35"},{"size":1806,"mtime":1614087874432,"results":"65","hashOfConfig":"35"},{"size":1220,"mtime":1614087855452,"results":"66","hashOfConfig":"35"},{"size":2263,"mtime":1614436107956,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"shqhgg",{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/index.tsx",[],[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/App.tsx",["145","146","147"],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/index.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Bars.tsx",["148","149"],"import React, { useState, useEffect, createRef } from 'react'\n\nimport Bar from './Visualization/Bar'\n\nimport { useSelector } from 'react-redux'\n\nimport { RootState, CurrentNumberState } from '../store'\n\nimport AnimateBars from './Visualization/AnimateBars'\n\ninterface Props {\n  componentWidth: number;\n}\n\n// wery much in progress\n// Maybe\n// https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba\n// https://codesandbox.io/s/reorder-elements-with-slide-transition-and-react-hooks-flip-211f2?from-embed\nconst Bars: React.FC<Props> = ({componentWidth}: { componentWidth: number } ) => {\n  const listSize: number = useSelector((state: RootState) => state.numberList.size)\n  const list: number[] = useSelector((state: RootState) => state.numberList.list)\n  const selected: CurrentNumberState = useSelector((state: RootState) => state.currentNumber)\n  \n  const width: number = 100/listSize * componentWidth/listSize \n\n  return (\n    <div style={{ display: 'flex' }}>\n      <AnimateBars>\n        {\n          list.map((b, i) => {\n            const barRef = createRef<HTMLDivElement>()\n            return <Bar key={b} width={width} height={b/listSize} area={i >= selected.area.start && i <= selected.area.end}\n            // Fix types here\n            // @ts-expect-error\n              main={i === selected.main} sub={i === selected.sub} ref={barRef} // Ref is null for some reason\n            />\n        })}\n      </AnimateBars>\n    </div>\n  )\n}\n\nexport default Bars","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/AlgorithmSider.tsx",["150"],"import React, { useEffect, useState } from 'react'\nimport {\n  Layout,\n  Typography,\n  Menu,\n  Button,\n  Divider\n} from 'antd'\n\nconst { Title } = Typography\nconst { Sider } = Layout\n\nimport ListSizeSlider from '../Components/ListSizeSlider'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setStopped, setRunning, setWaiting } from '../store/running/runningReducer'\n\nimport {\n  AlgorithmRunner,\n  Algorithms,\n  AlgorithmTypes\n} from '../services/AlgorithmRunner'\nimport { RootState } from '../store'\nimport { fetchNewList } from '../store/list/listReducer'\n\nconst AlgorithmSider: React.FC = () => {\n\n  const algorithmOptions: string[] = Object.values(AlgorithmTypes) as string[]\n\n  const [open, setOpen] = useState<boolean>(false)\n  const [breakpoint, setBreakpoint] = useState<boolean>(false)\n\n  const [currStyle, setCurrStyle] = useState<React.CSSProperties>({ position: 'relative' })\n  const [wrapperStyle, setWrappperStyle] = useState<React.CSSProperties>({ opacity: 1 })\n\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  const runner = new AlgorithmRunner()\n\n  useEffect(() => {\n    if (running === 'running' && breakpoint && open)\n      toggleOpen(true)\n  }, [running])\n\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished')\n      await dispatch(fetchNewList(listSize))\n\n    dispatch(setRunning())\n    \n    await runner.runAlgorithm()\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n  }\n\n  const menuOnClick = (event: any)  => {\n    const checkIfNotWaiting = async () => {\n      if (running !== 'waiting') {\n        await dispatch(fetchNewList(listSize))\n        dispatch(setWaiting())\n      }\n    }\n\n    checkIfNotWaiting()\n\n    runner.setAlgorithm(event.key as Algorithms)\n\n  }\n\n  const toggleOpen = (collapsed: boolean) => {\n    3\n\n    setOpen(!collapsed)\n    if (collapsed) \n      setWrappperStyle({\n        opacity: 0,\n        transition: 'opacity, 0.2s cubic-bezier(0,1,0,1)',\n      })\n    else \n      setWrappperStyle({\n        ...wrapperStyle,\n        opacity: 1,\n        transition: 'opacity, 0.2s cubic-bezier(1,0,1,0)',\n      })\n    \n  }\n\n  const handleBreakpoint = (breakpoint: boolean) => {\n    if (breakpoint) {\n      setCurrStyle({\n        position: 'absolute',\n        zIndex: 100,\n        transition: 'all 0.2s'\n      })\n      setWrappperStyle({\n        opacity: 0,\n        transition: 'opacity, 0.2s cubic-bezier(0,1,0,1)',\n      })\n    } else {\n      setCurrStyle({\n        position: 'relative',\n        zIndex: 1,\n        transition: 'none'\n      })\n      setWrappperStyle({\n        ...wrapperStyle,\n        opacity: 1,\n        transition: 'none',\n      })\n    }\n      \n\n    setBreakpoint(breakpoint)\n  }\n\n  const RunButton = () => (\n    running === 'stopped' || running === 'finished' || running === 'waiting' ?\n      <Button type='primary' block size='large' style={{\n          margin: '1em auto',\n        }}\n        onClick={startVisualization}\n      >Visualize</Button> :\n      <Button type='primary' block size='large' style={{\n          margin: '1em auto'\n        }}\n        onClick={stopVisualization}\n      >Stop visualization</Button>\n    \n  )\n\n\n  return (\n    <>\n      <Sider\n        width={'19em'} className='sider-root' theme='light'\n        collapsed={!open}\n        collapsedWidth=\"0\" onCollapse={toggleOpen} breakpoint=\"lg\"\n        onBreakpoint={handleBreakpoint} style={currStyle} zeroWidthTriggerStyle={{ top: 0 }}\n      >\n       <div className='sider-wrapper' style={wrapperStyle}>\n        <Title level={2} style={{ margin: '0,5em auto', padding: '0.2em 1em' }}>Select list size</Title>\n          {/* List size slider */}\n          <ListSizeSlider breakpoint={breakpoint} />\n\n          {/* Run button */}\n          {\n            breakpoint ? null \n            : <RunButton />\n          }\n\n          <Divider>Select sorting algorithm</Divider>\n          {/*Menu for selecting sorting algorithm*/}\n          <Menu\n            mode=\"inline\"\n            style={{ borderRight: 0 , transition: 'none'}}\n            defaultSelectedKeys={[runner.getAlgorithm()]}\n            onClick={menuOnClick}\n          >\n          \n          {algorithmOptions.map(a =>\n            <Menu.Item\n              key={a}\n              disabled={running === 'running' ? true : false}\n              style={{ transition: 'none' }}\n            >{a}</Menu.Item>\n          )}\n          </Menu>\n       </div>\n      </Sider>\n    </>\n  )\n}\n\nexport default AlgorithmSider","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/listReducer.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/types.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts",["151"],"import {\n  CurrentNumberState,\n  CurrentNumberActionType,\n  SET_CURRENT,\n  SET_MAIN,\n  SET_SUB,\n  REMOVE_CURRENT,\n  REMOVE_SUB,\n  SET_AREA\n} from './types'\nimport {\n  setCurrentAction,\n  setMainAction,\n  setSubAction,\n  removeCurrentAction,\n  removeSubAction,\n  setAreaAction\n} from './actions'\nimport { AppType } from '../'\n\nconst initialState: CurrentNumberState = {\n  main: -1,\n  sub: null,\n  area: {\n    start: -1,\n    end: -1\n  }\n}\n\nexport const setCurrent = (main: number, sub: number | null): AppType => async dispatch => {\n  dispatch(setCurrentAction(main, sub))\n}\n\nexport const setMain = (main: number): AppType => async dispatch => {\n  dispatch(setMainAction(main))\n}\n\nexport const setSub = (sub: number): AppType => async dispatch => {\n  dispatch(setSubAction(sub))\n}\n\nexport const removeCurrent = (): AppType => async dispatch => {\n  dispatch(removeCurrentAction())\n}\n\nexport const removeSub = (): AppType => async dispatch => {\n  dispatch(removeSubAction())\n}\n\nconst reducer = (state = initialState, action: CurrentNumberActionType): CurrentNumberState => {\n  switch(action.type) {\n  case SET_CURRENT:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: action.payload.sub\n    }\n  case SET_MAIN:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: state.sub\n    }\n  case SET_SUB:\n    return {\n      ...state,\n      main: state.main,\n      sub: action.payload.sub\n    }\n  case REMOVE_CURRENT:\n    return {\n      ...state,\n      main: -1\n    }\n  case REMOVE_SUB:\n    return {\n      ...state,\n      sub: null\n    }\n  case SET_AREA:\n    return {\n      ...state,\n      area: {\n        start: action.payload.start,\n        end: action.payload.end\n      }\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/types.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/runningReducer.ts",["152"],"import {\n  RunningStateAction,\n  runningType,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\nimport {\n  setRunningAction,\n  setStoppedAction,\n  setFinishedAction,\n  setWaitingAction\n} from './actions'\n\nimport { AppType } from '..'\n\nconst initialState: runningType = 'finished'\n\nexport const setRunning = (): AppType => async dispatch => {\n  dispatch(setRunningAction())\n}\n\nexport const setStopped = (): AppType => async dispatch => {\n  dispatch(setStoppedAction())\n}\n\nexport const setFinished = (): AppType => async dispatch => {\n  dispatch(setFinishedAction())\n}\n\nexport const setWaiting = (): AppType => async dispatch => {\n  dispatch(setWaitingAction())\n}\n\nconst reducer = (state = initialState, action: RunningStateAction) => {\n  switch (action.type){\n  case SET_RUNNING:\n    return 'running'\n  case SET_STOPPED:\n    return 'stopped'\n  case SET_FINISHED:\n    return 'finished'\n  case SET_WAITING:\n    return 'waiting'\n  default:\n    return state\n  }\n}\n\nexport default reducer","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/types.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/hooks/index.ts",["153","154","155"],"import { useState, useEffect, useRef} from 'react'\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport const useContainerDimensions = (myRef: React.MutableRefObject<HTMLDivElement | null>): Dimensions => {\n  const getDimensions = (): Dimensions => ({\n    width: myRef.current?.offsetWidth || 0,\n    height: myRef.current?.offsetHeight || 0\n  })\n\n  const [dimensions, setDimensions] = useState<Dimensions>({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current)\n      setDimensions(getDimensions())\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [myRef])\n\n  return dimensions\n\n}\n\n// https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n// Used to get the previous value of an object\nexport const usePrevious = (value: any): any => {\n  const prevChildrenRef = useRef()\n\n  useEffect(() => {\n    prevChildrenRef.current = value\n  }, [value])\n\n  return prevChildrenRef.current\n}","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Visualization/Bar.tsx",["156"],"import React, { MutableRefObject } from 'react'\n\ntype Props = {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\ntype Ref = HTMLDivElement\n\ninterface Bar {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\n// Renders a bar to represent a number in the list\nconst Bar: React.FC<Bar> = React.forwardRef<Ref, Props>((props: Props, ref) => {\n\n  const normal = !props.main && !props.sub\n  const maxHeight = 30\n  const style = {\n    height: `${maxHeight+1}em`,\n    width: `${props.width}%`,\n    background: props.area ? \"rgb(170, 182, 193, 0.6)\" : 'transparent',\n    \n  }\n  const barStyle = {\n    height: `${maxHeight*props.height}em`,\n    maxHeight: `${maxHeight}em`,\n    width: 'auto',\n    background: normal ? '#f0f2f5' : props.main ? '#FF7A32' : \n    props.sub ? '#2EF550' : '#f0f2f5',\n    zIndex: 50,\n    borderStyle: 'solid',\n    borderWidth: '0.2em',\n    borderColor: '#1890ff',//'#f0f2f5',\n    margin: '0.1em',\n    opacity: '100%'\n  }\n\n  return (\n    <div style={style} >\n      <div style={barStyle} ref={ref} />\n    </div>\n  )\n})\n\n// Eslint is being a douche\nBar.displayName = 'Bar'\n\nexport default Bar\n","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/Visualization/AnimateBars.tsx",["157","158","159"],"\n/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Used to animate changing bar positions\n*/\n\nimport React, { useState, useEffect, useLayoutEffect, ReactChildren } from 'react'\nimport { usePrevious } from '../../hooks'\nimport calculateBoundingBoxes from '../../utils/calculateBoundingBoxes'\n\nimport { AnimationChild, DOMRectDict } from '../../types'\n\nconst AnimateBars: React.FC<any> = ({ children }: { children: any}) => {\n  const [boundingBox, setBoundingBox] = useState<DOMRectDict | null>({})\n  const [prevBoundingBox, setPrevBoundingBox] = useState<DOMRectDict | null>({})\n  const prevChildren = usePrevious(children)\n\n  // Fix bounding boxes updating when list size updates\n  useLayoutEffect(() => {\n    const newBoundingBox = calculateBoundingBoxes(children)\n    setBoundingBox(newBoundingBox)\n  }, [children])\n\n  useLayoutEffect(() => {\n    const prevBoundingBox = calculateBoundingBoxes(prevChildren)\n    setPrevBoundingBox(prevBoundingBox)\n  }, [prevChildren])\n\n  useEffect(() => {\n    if (!prevBoundingBox || !boundingBox || Object.keys(prevBoundingBox).length < Object.keys(boundingBox).length)\n      return\n\n    const hasPrevBoundingBox = Object.keys(prevBoundingBox).length\n\n    if (hasPrevBoundingBox) {\n      React.Children.forEach(children, (child: AnimationChild) => {\n        const domNode = child.ref.current\n        const firstBox = prevBoundingBox[child.key]\n        const lastBox = boundingBox[child.key]\n        if (!firstBox || !lastBox)\n          return\n\n        const changeInX = firstBox.left - lastBox.left\n\n\n        if (changeInX) {\n          requestAnimationFrame(() => {\n            // Before DOM paints, invert child to old position\n            // Maybe longer animation time?\n            // Reduce speed of sorting so the animation shows\n            domNode.style.transform = `translateX(${changeInX}px)`\n            domNode.style.transition = `transform 0ms`\n\n            requestAnimationFrame(() => {\n              // After previous frame, remove the transition to play the animation\n              domNode.style.transform = ''\n              domNode.style.transition = 'transform 200ms'\n            })\n          })\n        }\n      })\n    }\n  }, [boundingBox, prevBoundingBox, children])\n\n  return children\n\n}\n\nexport default AnimateBars\n","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/ListSizeSlider.tsx",["160","161","162","163"],"import React, { useState, useEffect, useRef } from 'react'\nimport { Slider } from 'antd'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\n\nimport { fetchNewList } from '../store/list/listReducer'\n\nimport { isRunning } from '../utils'\nimport { setWaiting } from '../store/running/runningReducer'\n\ntype SliderProps = {\n  breakpoint: boolean\n}\n\nconst ListSizeSlider = ({ breakpoint }: SliderProps) => {\n  const dispatch = useDispatch()\n  const maxSliderValue = breakpoint ? 20 : 40\n\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n  const visualizationStatus = useSelector((state: RootState) => state.running)\n\n  const [sliderValue, setSliderValue] = useState(listSize)\n \n  useEffect(() => {\n    dispatch(setWaiting());\n    dispatch(fetchNewList(maxSliderValue/2))\n    setSliderValue(maxSliderValue/2)\n  }, [maxSliderValue])\n\n  useEffect(() => {\n    if (visualizationStatus === 'finished') {\n      dispatch(setWaiting())\n      dispatch(fetchNewList(listSize))\n    }\n    \n    \n  }, [listSize])\n\n  const onSliderChange = (value: any) => {\n    if (typeof value !== 'number' || isNaN(Number(value)))\n      return\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > maxSliderValue)\n      value = maxSliderValue\n    dispatch(fetchNewList(value))\n  }\n\n  return (\n    <div>\n      <Slider\n        min={3}\n        max={ maxSliderValue }\n        onChange={onSliderChange}\n        onAfterChange={setNewListSize}\n        value={sliderValue}\n        tipFormatter={null}\n        disabled={isRunning() === 'running'}\n      />\n    </div>\n  )\n}\n\nexport default ListSizeSlider","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/running/actions.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/currentNumber/actions.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/store/list/actions.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/lists.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/utils/calculateBoundingBoxes.ts",["164"],"/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Calculates the bounding boxes of elements given to it\n*/\n\nimport React, { ReactChildren } from 'react'\n\nimport { AnimationChild, AnimationChildren, DOMRectDict } from '../types'\n\nconst calculateBoundingBoxes = (children: AnimationChildren): DOMRectDict | null => {\n  const boundingBoxes: DOMRectDict = {}\n\n  React.Children.forEach(children, (child: AnimationChild) => {\n    if (!child.ref.current)\n      return null\n    const domNode = child.ref.current\n    const nodeBoundingBox = domNode.getBoundingClientRect()\n\n\n    boundingBoxes[child.key] = nodeBoundingBox\n  })\n\n  return boundingBoxes\n}\n\nexport default calculateBoundingBoxes","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/constants.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts",["165","166","167"],"import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  InsertionSort,\n  StalinSort,\n  MergeSort,\n  Algorithms\n} from './types'\n\nimport * as a from '../../Algorithms'\n\nexport class AlgorithmRunner {  \n  selectedAlgorithm: Algorithms\n\n  constructor() {\n    this.selectedAlgorithm = 'BubbleSort' as Algorithms\n  }\n\n  setAlgorithm(algorithm: Algorithms) {\n    this.selectedAlgorithm = algorithm\n    console.log('selected algorithm', this.selectedAlgorithm)\n  }\n\n  getAlgorithm() {\n    return this.selectedAlgorithm\n  }\n\n  runAlgorithm = async () => {\n    switch (this.selectedAlgorithm) {\n    case BubbleSort:\n      return await a.bubbleSort()\n    case QuickSort:\n      return await a.quickSort()\n    case BogoSort:\n      return await a.bogoSort()\n    case InsertionSort:\n      return await a.insertionSort()\n    case StalinSort:\n      return await a.stalinSort()\n    case MergeSort:\n      return await a.mergeSort()\n    default:\n      return\n    }\n  }\n\n}","/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/utils/index.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/index.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/mergeSort.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/stalinSort.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/insertionSort.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/bogoSort.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/quickSort.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Algorithms/bubbleSort.ts",[],"/home/jere/Documents/FullStack-Open/AlgoVis/frontend/src/Components/PageHeader.tsx",["168","169","170","171","172","173","174"],{"ruleId":"175","severity":1,"message":"176","line":4,"column":3,"nodeType":"177","messageId":"178","endLine":4,"endColumn":7},{"ruleId":"175","severity":1,"message":"179","line":7,"column":3,"nodeType":"177","messageId":"178","endLine":7,"endColumn":9},{"ruleId":"175","severity":1,"message":"180","line":10,"column":9,"nodeType":"177","messageId":"178","endLine":10,"endColumn":15},{"ruleId":"175","severity":1,"message":"181","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":25},{"ruleId":"175","severity":1,"message":"182","line":1,"column":27,"nodeType":"177","messageId":"178","endLine":1,"endColumn":36},{"ruleId":"183","severity":1,"message":"184","line":62,"column":31,"nodeType":"185","messageId":"186","endLine":62,"endColumn":34,"suggestions":"187"},{"ruleId":"175","severity":1,"message":"188","line":17,"column":3,"nodeType":"177","messageId":"178","endLine":17,"endColumn":16},{"ruleId":"189","severity":1,"message":"190","line":36,"column":17,"nodeType":"191","messageId":"192","endLine":36,"endColumn":70},{"ruleId":"189","severity":1,"message":"193","line":37,"column":29,"nodeType":"177","messageId":"194","endLine":37,"endColumn":39},{"ruleId":"183","severity":1,"message":"184","line":37,"column":36,"nodeType":"185","messageId":"186","endLine":37,"endColumn":39,"suggestions":"195"},{"ruleId":"183","severity":1,"message":"184","line":37,"column":42,"nodeType":"185","messageId":"186","endLine":37,"endColumn":45,"suggestions":"196"},{"ruleId":"175","severity":1,"message":"197","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":33},{"ruleId":"175","severity":1,"message":"198","line":7,"column":55,"nodeType":"177","messageId":"178","endLine":7,"endColumn":68},{"ruleId":"183","severity":1,"message":"184","line":13,"column":29,"nodeType":"185","messageId":"186","endLine":13,"endColumn":32,"suggestions":"199"},{"ruleId":"183","severity":1,"message":"184","line":13,"column":63,"nodeType":"185","messageId":"186","endLine":13,"endColumn":66,"suggestions":"200"},{"ruleId":"175","severity":1,"message":"201","line":1,"column":38,"nodeType":"177","messageId":"178","endLine":1,"endColumn":44},{"ruleId":"189","severity":1,"message":"190","line":16,"column":24,"nodeType":"191","messageId":"192","endLine":16,"endColumn":56},{"ruleId":"183","severity":1,"message":"184","line":40,"column":34,"nodeType":"185","messageId":"186","endLine":40,"endColumn":37,"suggestions":"202"},{"ruleId":"183","severity":1,"message":"184","line":46,"column":34,"nodeType":"185","messageId":"186","endLine":46,"endColumn":37,"suggestions":"203"},{"ruleId":"175","severity":1,"message":"198","line":6,"column":17,"nodeType":"177","messageId":"178","endLine":6,"endColumn":30},{"ruleId":"189","severity":1,"message":"190","line":20,"column":3,"nodeType":"204","messageId":"192","endLine":20,"endColumn":38},{"ruleId":"189","severity":1,"message":"190","line":25,"column":3,"nodeType":"204","messageId":"192","endLine":25,"endColumn":17},{"ruleId":"189","severity":1,"message":"190","line":29,"column":18,"nodeType":"191","messageId":"192","endLine":29,"endColumn":29},{"ruleId":"175","severity":1,"message":"201","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":23},{"ruleId":"175","severity":1,"message":"182","line":1,"column":25,"nodeType":"177","messageId":"178","endLine":1,"endColumn":34},{"ruleId":"175","severity":1,"message":"181","line":1,"column":36,"nodeType":"177","messageId":"178","endLine":1,"endColumn":44},{"ruleId":"175","severity":1,"message":"205","line":12,"column":3,"nodeType":"177","messageId":"178","endLine":12,"endColumn":13},{"ruleId":"175","severity":1,"message":"206","line":13,"column":3,"nodeType":"177","messageId":"178","endLine":13,"endColumn":17},{"ruleId":"175","severity":1,"message":"207","line":18,"column":34,"nodeType":"177","messageId":"178","endLine":18,"endColumn":44},{"ruleId":"189","severity":1,"message":"190","line":27,"column":20,"nodeType":"191","messageId":"192","endLine":27,"endColumn":51},"@typescript-eslint/no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Header' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["208","209"],"'setAreaAction' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'value' should be typed with a non-any type.","anyTypedArg",["210","211"],["212","213"],"'MutableRefObject' is defined but never used.","'ReactChildren' is defined but never used.",["214","215"],["216","217"],"'useRef' is defined but never used.",["218","219"],["220","221"],"FunctionExpression","'Algorithms' is defined but never used.","'AlgorithmTypes' is defined but never used.","'setWaiting' is defined but never used.",{"messageId":"222","fix":"223","desc":"224"},{"messageId":"225","fix":"226","desc":"227"},{"messageId":"222","fix":"228","desc":"224"},{"messageId":"225","fix":"229","desc":"227"},{"messageId":"222","fix":"230","desc":"224"},{"messageId":"225","fix":"231","desc":"227"},{"messageId":"222","fix":"232","desc":"224"},{"messageId":"225","fix":"233","desc":"227"},{"messageId":"222","fix":"234","desc":"224"},{"messageId":"225","fix":"235","desc":"227"},{"messageId":"222","fix":"236","desc":"224"},{"messageId":"225","fix":"237","desc":"227"},{"messageId":"222","fix":"238","desc":"224"},{"messageId":"225","fix":"239","desc":"227"},"suggestUnknown",{"range":"240","text":"241"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"240","text":"242"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"243","text":"241"},{"range":"243","text":"242"},{"range":"244","text":"241"},{"range":"244","text":"242"},{"range":"245","text":"241"},{"range":"245","text":"242"},{"range":"246","text":"241"},{"range":"246","text":"242"},{"range":"247","text":"241"},{"range":"247","text":"242"},{"range":"248","text":"241"},{"range":"248","text":"242"},[1633,1636],"unknown","never",[944,947],[950,953],[431,434],[465,468],[1096,1099],[1242,1245]]