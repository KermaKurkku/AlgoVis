[{"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/index.tsx":"1","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/App.tsx":"2","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/index.ts":"3","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/runningReducer.ts":"4","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/listReducer.ts":"5","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/ListSizeSlider.tsx":"6","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Bars.tsx":"7","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/types.ts":"8","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/types.ts":"9","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/types.ts":"10","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts":"11","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/actions.ts":"12","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/actions.ts":"13","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/lists.ts":"14","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/hooks/index.ts":"15","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts":"16","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/Bar.tsx":"17","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/actions.ts":"18","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/constants.ts":"19","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts":"20","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts":"21","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/index.ts":"22","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bogoSort.ts":"23","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/quickSort.ts":"24","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bubbleSort.ts":"25","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/calculateBoundingBoxes.ts":"26","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/insertionSort.ts":"27","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/index.ts":"28","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/stalinSort.ts":"29","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/mergeSort.ts":"30","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/AnimateBar.tsx":"31"},{"size":285,"mtime":1610374432987,"results":"32","hashOfConfig":"33"},{"size":4199,"mtime":1612101517644,"results":"34","hashOfConfig":"33"},{"size":929,"mtime":1610364646582,"results":"35","hashOfConfig":"33"},{"size":1008,"mtime":1610454073810,"results":"36","hashOfConfig":"33"},{"size":929,"mtime":1610454073810,"results":"37","hashOfConfig":"33"},{"size":1308,"mtime":1611411038009,"results":"38","hashOfConfig":"33"},{"size":1465,"mtime":1612258618899,"results":"39","hashOfConfig":"33"},{"size":342,"mtime":1610454073810,"results":"40","hashOfConfig":"33"},{"size":545,"mtime":1610454073810,"results":"41","hashOfConfig":"33"},{"size":825,"mtime":1610454424853,"results":"42","hashOfConfig":"33"},{"size":1506,"mtime":1612106561531,"results":"43","hashOfConfig":"33"},{"size":509,"mtime":1610454073810,"results":"44","hashOfConfig":"33"},{"size":324,"mtime":1610454073810,"results":"45","hashOfConfig":"33"},{"size":261,"mtime":1610454073810,"results":"46","hashOfConfig":"33"},{"size":1100,"mtime":1611042169501,"results":"47","hashOfConfig":"33"},{"size":57,"mtime":1609944163854,"results":"48","hashOfConfig":"33"},{"size":1240,"mtime":1612259303218,"results":"49","hashOfConfig":"33"},{"size":820,"mtime":1610108861279,"results":"50","hashOfConfig":"33"},{"size":219,"mtime":1611397814343,"results":"51","hashOfConfig":"33"},{"size":569,"mtime":1611654060746,"results":"52","hashOfConfig":"33"},{"size":585,"mtime":1612101360389,"results":"53","hashOfConfig":"33"},{"size":172,"mtime":1612097147477,"results":"54","hashOfConfig":"33"},{"size":1202,"mtime":1612106368489,"results":"55","hashOfConfig":"33"},{"size":1727,"mtime":1612106411513,"results":"56","hashOfConfig":"33"},{"size":1207,"mtime":1612106383523,"results":"57","hashOfConfig":"33"},{"size":608,"mtime":1612258883346,"results":"58","hashOfConfig":"33"},{"size":1254,"mtime":1612106436030,"results":"59","hashOfConfig":"33"},{"size":423,"mtime":1611048405364,"results":"60","hashOfConfig":"33"},{"size":1061,"mtime":1612106526934,"results":"61","hashOfConfig":"33"},{"size":2164,"mtime":1612101694749,"results":"62","hashOfConfig":"33"},{"size":2265,"mtime":1612259475340,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"15q74u",{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"66"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/index.tsx",[],[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/App.tsx",["134"],"import React, { useState, useRef} from 'react'\nimport {\n  Layout,\n  Typography,\n  Menu,\n  Button,\n  Skeleton,\n  Divider\n} from 'antd'\n\nconst { Title } = Typography\nconst { Header, Footer, Sider, Content } = Layout\n\nimport Bars from './Components/Bars'\nimport ListSizeSlider from './Components/ListSizeSlider'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setStopped, setRunning, setWaiting } from './store/running/runningReducer'\n\n// Figure out webworkers at some point maybe?\n//import SortWorker from 'comlink-loader!./worker'\n\nimport {\n  runAlgorithm,\n  Algorithms,\n  AlgorithmTypes\n} from './services/AlgorithmRunner'\nimport { RootState } from './store'\nimport { fetchNewList } from './store/list/listReducer'\nimport { useContainerDimensions } from './hooks'\n\nconst App: React.FC = () => {\n  const algorithmOptions: string[] = Object.values(AlgorithmTypes) as string[]\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<string>(algorithmOptions[0])\n\n  const componentRef = useRef<HTMLDivElement>(null)\n  const { width } = useContainerDimensions(componentRef)\n\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished')\n      await dispatch(fetchNewList(listSize))\n\n    dispatch(setRunning())\n    const selected: Algorithms =  selectedAlgorithm as Algorithms\n    await runAlgorithm(selected)\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n    \n  }\n\n  const menuOnClick = (event: any)  => {\n    const checkIfNotWaiting = async () => {\n      if (running !== 'waiting') {\n        await dispatch(fetchNewList(listSize))\n        dispatch(setWaiting())\n      }\n    }\n\n    checkIfNotWaiting()\n\n    setSelectedAlgorithm(event.key)\n  }\n\n  return (\n    <div>\n      <Layout>\n        <Header className='header'>\n          <div />\n          <Menu theme='dark' mode='horizontal' defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\">AlgoVis</Menu.Item>\n          </Menu>\n        </Header>\n        <Layout style={{ margin: '0 5em 0 5em' }}>\n          <Sider width={'20%'} className='site-layout-background' theme='light'>\n\n\n\n            <Title level={2} style={{ margin: '0,5em auto', padding: '0.2em 1em' }}>Select list size</Title>\n            <ListSizeSlider />\n            {running === 'stopped' || running === 'finished' || running === 'waiting' ?\n              <Button type='primary' block size='large' style={{\n                margin: '1em auto',\n              }}\n              onClick={startVisualization}\n              >Visualize</Button> :\n              <Button type='primary' block size='large' style={{\n                margin: '1em auto'\n              }}\n              onClick={stopVisualization}\n              >Stop visualization</Button>\n            }\n            <Divider>Select sorting algorithm</Divider>\n            {/*Menu for selecting sorting algorithm*/}\n            <Menu\n              mode=\"inline\"\n              style={{ borderRight: 0 }}\n              defaultOpenKeys={['slider', 'sub2']}\n              defaultSelectedKeys={[algorithmOptions[0]]}\n              onClick={menuOnClick}\n            >\n              {algorithmOptions.map(a =>\n                <Menu.Item\n                  key={a}\n                  disabled={running === 'running' ? true : false}\n                >{a}</Menu.Item>\n              )}\n            </Menu>\n\n          </Sider>\n          <Layout style={{ padding: '0 10em em' }}>\n            <Content className=\"site-layout-content\" id='container'\n                style={{\n                  padding: 24,\n                  margin: 0,\n                }}\n              >\n              <div ref={componentRef}>\n                <Bars componentWidth={width} />\n                <Divider />\n                <Skeleton />\n                <Skeleton />\n              </div>\n            </Content>\n          </Layout>\n        </Layout>\n        <Footer style={{ textAlign: 'center' }}>AlgoVis algorithm visualizer @2020 Created by Jere Salmensaari</Footer>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App\n","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/runningReducer.ts",["135"],"import {\n  RunningStateAction,\n  runningType,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\nimport {\n  setRunningAction,\n  setStoppedAction,\n  setFinishedAction,\n  setWaitingAction\n} from './actions'\n\nimport { AppType } from '..'\n\nconst initialState: runningType = 'waiting'\n\nexport const setRunning = (): AppType => async dispatch => {\n  dispatch(setRunningAction())\n}\n\nexport const setStopped = (): AppType => async dispatch => {\n  dispatch(setStoppedAction())\n}\n\nexport const setFinished = (): AppType => async dispatch => {\n  dispatch(setFinishedAction())\n}\n\nexport const setWaiting = (): AppType => async dispatch => {\n  dispatch(setWaitingAction())\n}\n\nconst reducer = (state = initialState, action: RunningStateAction) => {\n  switch (action.type){\n  case SET_RUNNING:\n    return 'running'\n  case SET_STOPPED:\n    return 'stopped'\n  case SET_FINISHED:\n    return 'finished'\n  case SET_WAITING:\n    return 'waiting'\n  default:\n    return state\n  }\n}\n\nexport default reducer","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/listReducer.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/ListSizeSlider.tsx",["136","137"],"import React, { useState, useEffect } from 'react'\nimport { Slider } from 'antd'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\n\nimport { fetchNewList, changeListSize } from '../store/list/listReducer'\n\nimport { isRunning } from '../utils'\nimport { setWaiting } from '../store/running/runningReducer'\n\n\nconst ListSizeSlider: React.FC = () => {\n  const dispatch = useDispatch()\n\n  const [sliderValue, setSliderValue] = useState(20)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  useEffect(() => {\n    dispatch(fetchNewList(listSize))\n    dispatch(setWaiting())\n  }, [listSize])\n\n  const onSliderChange = (value: any) => {\n    if (typeof value !== 'number' || isNaN(Number(value)))\n      return\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > 40)\n      value = 40\n    dispatch(changeListSize(value))\n  }\n\n  return (\n    <div>\n      <Slider\n        min={3}\n        max={40}\n        onChange={onSliderChange}\n        onAfterChange={setNewListSize}\n        value={typeof sliderValue === 'number' ? sliderValue : 20}\n        tipFormatter={null}\n        disabled={isRunning() === 'running'}\n      />\n    </div>\n  )\n}\n\nexport default ListSizeSlider","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Bars.tsx",["138","139","140"],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/currentNumberReducer.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/running/actions.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/list/actions.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/lists.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/hooks/index.ts",["141","142","143"],"import { useState, useEffect, useRef} from 'react'\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport const useContainerDimensions = (myRef: React.MutableRefObject<HTMLDivElement | null>): Dimensions => {\n  const getDimensions = (): Dimensions => ({\n    width: myRef.current?.offsetWidth || 0,\n    height: myRef.current?.offsetHeight || 0\n  })\n\n  const [dimensions, setDimensions] = useState<Dimensions>({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current)\n      setDimensions(getDimensions())\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [myRef])\n\n  return dimensions\n\n}\n\n// https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n// Used to get the previous value of an object\nexport const usePrevious = (value: any): any => {\n  const prevChildrenRef = useRef()\n\n  useEffect(() => {\n    prevChildrenRef.current = value\n  }, [value])\n\n  return prevChildrenRef.current\n}","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/Bar.tsx",["144"],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/store/currentNumber/actions.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/constants.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/algorithmRunner.ts",["145"],"import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  InsertionSort,\n  StalinSort,\n  MergeSort,\n  Algorithms\n} from './types'\n\nimport * as a from '../../Algorithms'\n\nexport const runAlgorithm = async (type: Algorithms) => {\n  switch (type) {\n  case BubbleSort:\n    return await a.bubbleSort()\n  case QuickSort:\n    return await a.quickSort()\n  case BogoSort:\n    return await a.bogoSort()\n  case InsertionSort:\n    return await a.insertionSort()\n  case StalinSort:\n    return await a.stalinSort()\n  case MergeSort:\n    return await a.mergeSort()\n  default:\n    return\n  }\n}","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/services/AlgorithmRunner/types.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bogoSort.ts",["146"],"import { setMainAction, removeCurrentAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport { setNewAction } from '../store/list/actions'\n\nimport listService from '../services/lists'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport _ from 'lodash'\nimport { baseDelay } from '../constants'\n\n\nconst sort = async (): Promise<void> => {\n  const list: number[] = [...store.getState().numberList.list]\n  const listSize: number = store.getState().numberList.size\n  let rerun = false\n\n  for (let i = 0; i < listSize - 1; i++) {\n    await wait(baseDelay)\n    if (isRunning() === 'stopped')\n      return\n    store.dispatch(setMainAction(i))\n    if (list[i] > list[i + 1]) {\n      rerun = !rerun\n      break\n    }\n  }\n\n  if (rerun) {\n    store.dispatch(setNewAction(_.shuffle(list)))\n    store.dispatch(setMainAction(-1))\n    await wait(300)\n    return await sort()\n  }\n  store.dispatch(setFinishedAction())\n  return\n}\n\nexport const bogoSort = async (): Promise<void> => {\n  store.dispatch(setMainAction(-1))\n  await sort()\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n\n}","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/quickSort.ts",["147"],"import { setMainAction, setSubAction, removeCurrentAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\nimport { baseDelay } from '../constants'\nimport { removeSub } from '../store/currentNumber/currentNumberReducer'\n\nconst partition = async (A: number[], low: number, high: number): Promise<number> => {\n  const list: number[] = [...A]\n  const pivot: number = list[high]\n  store.dispatch(setMainAction(high))\n  let i = low\n\n  if (!pivot)\n    return -1\n  for (let j = low; j < high; j++) {\n    if (isRunning() === 'stopped')\n      return -1\n    store.dispatch(setSubAction(j))\n\n    await wait(baseDelay) // Wait for given amount of ms\n\n    if (list[j] < pivot) {\n      [list[i], list[j]] = [list[j], list[i]]\n      store.dispatch(setNewAction(list))\n      i++\n    }\n  }\n  [list[i], list[high]] = [list[high], list[i]]\n  store.dispatch(setNewAction(list))\n  return i\n}\n\nconst sort = async (low: number, high: number): Promise<void> => {\n  if (isRunning() === 'stopped')\n    return\n\n  const list = [...store.getState().numberList.list]\n  if (low < high) {\n    const p: number = await partition(list, low, high)\n\n    if (p === -1)\n      return\n    await sort(low, p - 1)\n    await sort(p + 1, high)\n  }\n\n}\n\nexport const quickSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(0, list.length-1)\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  if (isRunning() === 'running')\n    store.dispatch(setFinishedAction())\n}","/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/bubbleSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/calculateBoundingBoxes.ts",["148","149","150","151"],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/insertionSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/utils/index.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/stalinSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Algorithms/mergeSort.ts",[],"/home/jere/Documents/fullstack_open/Projekti/AlgoVis/frontend/src/Components/Visualization/AnimateBar.tsx",["152","153","154","155","156"],{"ruleId":"157","severity":1,"message":"158","line":58,"column":31,"nodeType":"159","messageId":"160","endLine":58,"endColumn":34,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":36,"column":17,"nodeType":"164","messageId":"165","endLine":36,"endColumn":70},{"ruleId":"157","severity":1,"message":"158","line":24,"column":34,"nodeType":"159","messageId":"160","endLine":24,"endColumn":37,"suggestions":"166"},{"ruleId":"157","severity":1,"message":"158","line":30,"column":34,"nodeType":"159","messageId":"160","endLine":30,"endColumn":37,"suggestions":"167"},{"ruleId":"168","severity":1,"message":"169","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":25},{"ruleId":"168","severity":1,"message":"172","line":1,"column":27,"nodeType":"170","messageId":"171","endLine":1,"endColumn":36},{"ruleId":"168","severity":1,"message":"173","line":9,"column":8,"nodeType":"170","messageId":"171","endLine":9,"endColumn":19},{"ruleId":"162","severity":1,"message":"174","line":37,"column":29,"nodeType":"170","messageId":"175","endLine":37,"endColumn":39},{"ruleId":"157","severity":1,"message":"158","line":37,"column":36,"nodeType":"159","messageId":"160","endLine":37,"endColumn":39,"suggestions":"176"},{"ruleId":"157","severity":1,"message":"158","line":37,"column":42,"nodeType":"159","messageId":"160","endLine":37,"endColumn":45,"suggestions":"177"},{"ruleId":"168","severity":1,"message":"178","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":33},{"ruleId":"162","severity":1,"message":"163","line":13,"column":29,"nodeType":"164","messageId":"165","endLine":13,"endColumn":56},{"ruleId":"168","severity":1,"message":"179","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":19},{"ruleId":"168","severity":1,"message":"180","line":9,"column":10,"nodeType":"170","messageId":"171","endLine":9,"endColumn":19},{"ruleId":"168","severity":1,"message":"181","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":13},{"ruleId":"168","severity":1,"message":"182","line":6,"column":17,"nodeType":"170","messageId":"171","endLine":6,"endColumn":30},{"ruleId":"168","severity":1,"message":"183","line":8,"column":26,"nodeType":"170","messageId":"171","endLine":8,"endColumn":43},{"ruleId":"168","severity":1,"message":"184","line":8,"column":45,"nodeType":"170","messageId":"171","endLine":8,"endColumn":56},{"ruleId":"168","severity":1,"message":"182","line":7,"column":55,"nodeType":"170","messageId":"171","endLine":7,"endColumn":68},{"ruleId":"168","severity":1,"message":"184","line":11,"column":26,"nodeType":"170","messageId":"171","endLine":11,"endColumn":37},{"ruleId":"168","severity":1,"message":"185","line":13,"column":11,"nodeType":"170","messageId":"171","endLine":13,"endColumn":25},{"ruleId":"157","severity":1,"message":"158","line":17,"column":29,"nodeType":"159","messageId":"160","endLine":17,"endColumn":32,"suggestions":"186"},{"ruleId":"157","severity":1,"message":"158","line":17,"column":57,"nodeType":"159","messageId":"160","endLine":17,"endColumn":60,"suggestions":"187"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["188","189"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType",["190","191"],["192","193"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'AnimateBars' is defined but never used.","Argument 'value' should be typed with a non-any type.","anyTypedArg",["194","195"],["196","197"],"'MutableRefObject' is defined but never used.","'listService' is defined but never used.","'removeSub' is defined but never used.","'React' is defined but never used.","'ReactChildren' is defined but never used.","'AnimationChildren' is defined but never used.","'DOMRectDict' is defined but never used.","'AnimationProps' is defined but never used.",["198","199"],["200","201"],{"messageId":"202","fix":"203","desc":"204"},{"messageId":"205","fix":"206","desc":"207"},{"messageId":"202","fix":"208","desc":"204"},{"messageId":"205","fix":"209","desc":"207"},{"messageId":"202","fix":"210","desc":"204"},{"messageId":"205","fix":"211","desc":"207"},{"messageId":"202","fix":"212","desc":"204"},{"messageId":"205","fix":"213","desc":"207"},{"messageId":"202","fix":"214","desc":"204"},{"messageId":"205","fix":"215","desc":"207"},{"messageId":"202","fix":"216","desc":"204"},{"messageId":"205","fix":"217","desc":"207"},{"messageId":"202","fix":"218","desc":"204"},{"messageId":"205","fix":"219","desc":"207"},"suggestUnknown",{"range":"220","text":"221"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"220","text":"222"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"223","text":"221"},{"range":"223","text":"222"},{"range":"224","text":"221"},{"range":"224","text":"222"},{"range":"225","text":"221"},{"range":"225","text":"222"},{"range":"226","text":"221"},{"range":"226","text":"222"},{"range":"227","text":"221"},{"range":"227","text":"222"},{"range":"228","text":"221"},{"range":"228","text":"222"},[1646,1649],"unknown","never",[689,692],[835,838],[944,947],[950,953],[485,488],[513,516]]