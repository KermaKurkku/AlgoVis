{"version":3,"sources":["Components/Visualization/Bar.tsx","utils/calculateBoundingBoxes.ts","Components/Visualization/AnimateBars.tsx","hooks/index.ts","Components/Bars.tsx","store/list/types.ts","store/list/actions.ts","constants.ts","services/AlgorithmRunner/types.ts","services/lists.ts","store/list/listReducer.ts","store/currentNumber/types.ts","store/currentNumber/actions.ts","store/currentNumber/currentNumberReducer.ts","store/running/types.ts","store/running/actions.ts","store/running/runningReducer.ts","store/index.ts","utils/index.ts","Components/ListSizeSlider.tsx","Algorithms/bubbleSort.ts","Algorithms/quickSort.ts","Algorithms/bogoSort.ts","Algorithms/insertionSort.ts","Algorithms/stalinSort.ts","Algorithms/mergeSort.ts","services/AlgorithmRunner/algorithmRunner.ts","Components/AlgorithmSider.tsx","Components/PageHeader.tsx","App.tsx","index.tsx"],"names":["Bar","React","forwardRef","props","ref","normal","main","sub","style","height","maxHeight","width","background","area","barStyle","zIndex","borderStyle","borderWidth","borderColor","margin","opacity","displayName","calculateBoundingBoxes","children","boundingBoxes","Children","forEach","child","current","nodeBoundingBox","getBoundingClientRect","key","AnimateBars","useState","boundingBox","setBoundingBox","prevBoundingBox","setPrevBoundingBox","prevChildren","value","prevChildrenRef","useRef","useEffect","usePrevious","useLayoutEffect","newBoundingBox","Object","keys","length","domNode","firstBox","lastBox","changeInX","left","requestAnimationFrame","transform","transition","Bars","componentWidth","listSize","useSelector","state","numberList","size","list","selected","currentNumber","display","map","b","i","barRef","createRef","start","end","ADD_LIST","setNewAction","type","payload","apiBaseUrl","AlgorithmTypes","baseDelay","fetchNew","a","axios","get","data","initialState","fetchNewList","dispatch","listService","newList","reducer","action","SET_CURRENT","SET_MAIN","SET_SUB","REMOVE_CURRENT","REMOVE_SUB","SET_AREA","setMainAction","setSubAction","removeCurrentAction","removeSubAction","setAreaAction","SET_RUNNING","SET_STOPPED","SET_FINISHED","SET_WAITING","setFinishedAction","setRunning","setStopped","setWaiting","rootReducer","combineReducers","listReducer","currentNumberReducer","running","runningStateReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","isRunning","getState","wait","ms","Promise","resolve","setTimeout","ListSizeSlider","breakpoint","useDispatch","maxSliderValue","visualizationStatus","sliderValue","setSliderValue","min","max","onChange","isNaN","Number","onAfterChange","tipFormatter","disabled","timeoutLoop","loop","bubbleSort","partition","A","low","high","pivot","j","sort","p","quickSort","rerun","_","shuffle","bogoSort","insertionSort","listLength","index","filter","v","stalinSort","merge","arr","baseIndex","newArr","halfOfLength","Math","floor","slice","leftArr","indexOf","rightArr","leftIndex","rightIndex","push","rtrArr","mergeSort","AlgorithmRunner","selectedAlgorithm","runAlgorithm","this","algorithm","console","log","Title","Typography","Sider","Layout","AlgorithmSider","algorithmOptions","values","open","setOpen","setBreakpoint","position","currStyle","setCurrStyle","wrapperStyle","setWrappperStyle","runner","toggleOpen","startVisualization","stopVisualization","collapsed","RunButton","block","onClick","className","theme","collapsedWidth","onCollapse","onBreakpoint","zeroWidthTriggerStyle","top","level","padding","mode","borderRight","defaultSelectedKeys","getAlgorithm","event","checkIfNotWaiting","setAlgorithm","Item","Header","PageHeader","buttonStyle","float","Footer","Content","App","loading","setLoading","componentRef","myRef","getDimensions","offsetWidth","offsetHeight","dimensions","setDimensions","handleResize","window","addEventListener","removeEventListener","useContainerDimensions","id","marginTop","textAlign","ReactDOM","render","document","getElementById"],"mappings":"kMAqBMA,EAAqBC,IAAMC,YAAuB,SAACC,EAAcC,GAErE,IAAMC,GAAUF,EAAMG,OAASH,EAAMI,IAE/BC,EAAQ,CACZC,OAAO,GAAD,OAAKC,GAAL,MACNC,MAAM,GAAD,OAAKR,EAAMQ,MAAX,KACLC,WAAYT,EAAMU,KAAO,0BAA4B,eAGjDC,EAAW,CACfL,OAAO,GAAD,OARU,GAQKN,EAAMM,OAArB,MACNC,UAAU,GAAD,OATO,GASP,MACTC,MAAO,OACPC,WAAYP,EAAS,UAAYF,EAAMG,KAAO,UAC9CH,EAAMI,IAAM,UAAY,UACxBQ,OAAQ,GACRC,YAAa,QACbC,YAAa,QACbC,YAAa,UACbC,OAAQ,QACRC,QAAS,QAGX,OACE,qBAAKZ,MAAOA,EAAZ,SACE,qBAAKA,MAAOM,EAAUV,IAAKA,SAMjCJ,EAAIqB,YAAc,MAEHrB,QC9BAsB,EAhBgB,SAACC,GAC9B,IAAMC,EAA6B,GAYnC,OAVAvB,IAAMwB,SAASC,QAAQH,GAAU,SAACI,GAChC,IAAKA,EAAMvB,IAAIwB,QACb,OAAO,KACT,IACMC,EADUF,EAAMvB,IAAIwB,QACME,wBAGhCN,EAAcG,EAAMI,KAAOF,KAGtBL,GC8CMQ,EAxDoB,SAAC,GAAoC,IAAlCT,EAAiC,EAAjCA,SAAiC,EAC/BU,mBAA6B,IADE,mBAC9DC,EAD8D,KACjDC,EADiD,OAEvBF,mBAA6B,IAFN,mBAE9DG,EAF8D,KAE7CC,EAF6C,KAG/DC,ECqBmB,SAACC,GAC1B,IAAMC,EAAkBC,mBAMxB,OAJAC,qBAAU,WACRF,EAAgBZ,QAAUW,IACzB,CAACA,IAEGC,EAAgBZ,QD5BFe,CAAYpB,GAiDjC,OA9CAqB,2BAAgB,WACd,IAAMC,EAAiBvB,EAAuBC,GAC9CY,EAAeU,KACd,CAACtB,IAEJqB,2BAAgB,WACd,IAAMR,EAAkBd,EAAuBgB,GAC/CD,EAAmBD,KAClB,CAACE,IAEJI,qBAAU,YACHN,IAAoBF,GAAeY,OAAOC,KAAKX,GAAiBY,OAASF,OAAOC,KAAKb,GAAac,QAG5EF,OAAOC,KAAKX,GAAiBY,QAGtD/C,IAAMwB,SAASC,QAAQH,GAAU,SAACI,GAChC,IAAMsB,EAAUtB,EAAMvB,IAAIwB,QACpBsB,EAAWd,EAAgBT,EAAMI,KACjCoB,EAAUjB,EAAYP,EAAMI,KAClC,GAAKmB,GAAaC,EAAlB,CAGA,IAAMC,EAAYF,EAASG,KAAOF,EAAQE,KAGtCD,GACFE,uBAAsB,WAIpBL,EAAQzC,MAAM+C,UAAd,qBAAwCH,EAAxC,OACAH,EAAQzC,MAAMgD,WAAd,gBAEAF,uBAAsB,WAEpBL,EAAQzC,MAAM+C,UAAY,GAC1BN,EAAQzC,MAAMgD,WAAa,8BAMpC,CAACtB,EAAaE,EAAiBb,IAE3BA,GEtBMkC,EAxBe,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,eACxBC,EAAmBC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,WAAWC,QACtEC,EAAiBJ,aAAY,SAACC,GAAD,OAAsBA,EAAMC,WAAWE,QACpEC,EAA+BL,aAAY,SAACC,GAAD,OAAsBA,EAAMK,iBAEvEvD,EAAgB,IAAIgD,EAAWD,EAAeC,EAEpD,OACE,qBAAKnD,MAAO,CAAE2D,QAAS,QAAvB,SACE,cAAC,EAAD,UAEIH,EAAKI,KAAI,SAACC,EAAGC,GACX,IAAMC,EAASC,sBACf,OAAO,cAAC,EAAD,CAAa7D,MAAOA,EAAOF,OAAQ4D,EAAEV,EAAU9C,KAAMyD,GAAKL,EAASpD,KAAK4D,OAASH,GAAKL,EAASpD,KAAK6D,IAGzGpE,KAAMgE,IAAML,EAAS3D,KAAMC,IAAK+D,IAAML,EAAS1D,IAAKH,IAAKmE,GAH1CF,W,4EC1BhBM,EAAW,WCCXC,EAAe,SAACZ,EAAgBD,GAC3C,MAAO,CACLc,KAAMF,EACNG,QAAS,CACPd,KAAMA,EACND,KAAMA,K,kBCVRgB,EAAa,GAKfA,EAAa,OAEf,ICDYC,EDCNC,EAAY,IEAH,GAAEC,SALH,uCAAG,WAAOnB,GAAP,iBAAAoB,EAAA,sEACcC,IAAMC,IAAN,UAAuBN,EAAvB,sBAA+ChB,IAD7D,uBACDC,EADC,EACPsB,KADO,kBAERtB,GAFQ,2CAAH,uDCORuB,EAA0B,CAC9BvB,KAAM,GACND,KAAM,IAGKyB,EAAe,SAAC7B,GAAD,8CAA+B,WAAM8B,GAAN,eAAAN,EAAA,sEACzBO,EAAYR,SAASvB,GADI,OACnDgC,EADmD,OAEzDF,EAASb,EAAae,EAAShC,IAF0B,2CAA/B,uDAkBbiC,EAbC,WAA8D,IAA7D/B,EAA4D,uDAApD0B,EAAcM,EAAsC,uCAC3E,OAAQA,EAAOhB,MACf,KAAKF,EAEH,MAAO,CACLX,KAAK,YAAK6B,EAAOf,QAAQd,MACzBD,KAAM8B,EAAOf,QAAQf,MAEzB,QACE,OAAOF,I,iBCpBEiC,EAAc,cAEdC,EAAW,WAEXC,EAAU,UAEVC,EAAiB,iBAEjBC,EAAa,aAEbC,EAAW,WCPXC,EAAgB,SAAC9F,GAC5B,MAAO,CACLuE,KAAMkB,EACNjB,QAAS,CACPxE,KAAMA,KAKC+F,EAAe,SAAC9F,GAC3B,MAAO,CACLsE,KAAMmB,EACNlB,QAAS,CACPvE,IAAKA,KAKE+F,EAAsB,WACjC,MAAO,CACLzB,KAAMoB,IAIGM,EAAkB,WAC7B,MAAO,CACL1B,KAAMqB,IAIGM,EAAgB,SAAC/B,EAAeC,GAC3C,MAAO,CACLG,KAAMsB,EACNrB,QAAS,CACPL,MAAOA,EACPC,IAAKA,KC3BLa,EAAmC,CACvCjF,MAAO,EACPC,IAAK,KACLM,KAAM,CACJ4D,OAAQ,EACRC,KAAM,IAmEKkB,EA3CC,WAAgF,IAA/E/B,EAA8E,uDAAtE0B,EAAcM,EAAwD,uCAC7F,OAAOA,EAAOhB,MACd,KAAKiB,EACH,OAAO,2BACFjC,GADL,IAEEvD,KAAMuF,EAAOf,QAAQxE,KACrBC,IAAKsF,EAAOf,QAAQvE,MAExB,KAAKwF,EACH,OAAO,2BACFlC,GADL,IAEEvD,KAAMuF,EAAOf,QAAQxE,KACrBC,IAAKsD,EAAMtD,MAEf,KAAKyF,EACH,OAAO,2BACFnC,GADL,IAEEvD,KAAMuD,EAAMvD,KACZC,IAAKsF,EAAOf,QAAQvE,MAExB,KAAK0F,EACH,OAAO,2BACFpC,GADL,IAEEvD,MAAO,IAEX,KAAK4F,EACH,OAAO,2BACFrC,GADL,IAEEtD,IAAK,OAET,KAAK4F,EACH,OAAO,2BACFtC,GADL,IAEEhD,KAAM,CACJ4D,MAAOoB,EAAOf,QAAQL,MACtBC,IAAKmB,EAAOf,QAAQJ,OAG1B,QACE,OAAOb,ICtFE4C,EAAc,cAEdC,GAAc,cAEdC,GAAe,eAEfC,GAAc,cCYdC,GAAoB,WAC/B,MAAO,CACLhC,KAAM8B,KCLJpB,GAA4B,WAErBuB,GAAa,yDAAe,WAAMrB,GAAN,SAAAN,EAAA,sDACvCM,EDXO,CACLZ,KAAM4B,ICS+B,2CAAf,uDAIbM,GAAa,yDAAe,WAAMtB,GAAN,SAAAN,EAAA,sDACvCM,EDTO,CACLZ,KAAM6B,KCO+B,2CAAf,uDAQbM,GAAa,yDAAe,WAAMvB,GAAN,SAAAN,EAAA,sDACvCM,EDLO,CACLZ,KAAM+B,KCG+B,2CAAf,uDAmBXhB,GAfC,WAAuD,IAAtD/B,EAAqD,uDAA7C0B,GAAcM,EAA+B,uCACpE,OAAQA,EAAOhB,MACf,KAAK4B,EACH,MAAO,UACT,KAAKC,GACH,MAAO,UACT,KAAKC,GACH,MAAO,WACT,KAAKC,GACH,MAAO,UACT,QACE,OAAO/C,I,UCrCLoD,GAAcC,0BAAgB,CAClCpD,WAAYqD,EACZjD,cAAekD,EACfC,QAASC,KAyBIC,GAtBDC,sBACZP,GACAQ,+BACEC,0BACEC,OChBOC,GAAY,WAEvB,OADgB/D,GAAMgE,WAAWR,SAEjC,IAAK,UACH,MAAO,UACT,IAAK,WACH,MAAO,WACT,QACE,MAAO,YAIES,GAAI,uCAAG,WAAOC,GAAP,SAAA5C,EAAA,sEAA2C,IAAI6C,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAAtF,mFAAH,sDCqDFI,GArDQ,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,WAClB3C,EAAW4C,cACXC,EAAiBF,EAAa,GAAK,GAEnCzE,EAAWC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,WAAWC,QAC9DwE,EAAsB3E,aAAY,SAACC,GAAD,OAAsBA,EAAMwD,WALd,EAOhBpF,mBAAS0B,GAPO,mBAO/C6E,EAP+C,KAOlCC,EAPkC,KAStD/F,qBAAU,WACR+C,EAASuB,MACTvB,EAASD,EAAa8C,EAAe,IACrCG,EAAeH,EAAe,KAC7B,CAACA,IAEJ5F,qBAAU,WACoB,aAAxB6F,IACF9C,EAASuB,MACTvB,EAASD,EAAa7B,OAIvB,CAACA,IAgBJ,OACE,8BACE,cAAC,IAAD,CACE+E,IAAK,EACLC,IAAML,EACNM,SAnBiB,SAACrG,GACD,kBAAVA,GAAsBsG,MAAMC,OAAOvG,KAE9CkG,EAAelG,IAiBXwG,cAdiB,SAACxG,GACD,kBAAVA,IAEPA,EAAQ+F,IACV/F,EAAQ+F,GACV7C,EAASD,EAAajD,MAUlBA,MAAOiG,EACPQ,aAAc,KACdC,SAA0B,YAAhBrB,U,8BXvDN5C,K,wBAAAA,E,8BAAAA,E,sBAAAA,E,sBAAAA,E,oBAAAA,E,yBAAAA,M,KYEZ,IAAMkE,GAAc,SAAdA,EAAe5E,EAAW6E,GAE9B,IAAMnF,EAAc,YAAOuD,GAAMM,WAAW/D,WAAWE,MAEvDkE,YAAW,WACT,GAAoB,YAAhBN,KAAJ,CAIA,GAAI5D,EAAKM,GAAKN,EAAKM,EAAI,GAAI,CAAC,IAAD,EACA,CAACN,EAAKM,EAAI,GAAIN,EAAKM,IAA3CN,EAAKM,GADmB,KACfN,EAAKM,EAAI,GADM,KAEzBiD,GAAM9B,SAASb,EAAaZ,EAAMA,EAAKhB,SAEzCsB,IACAiD,GAAM9B,SAASW,EAAc9B,IACzBA,IAAO6E,EAAK,EACdD,GAAa,EAAGC,EAAO,GACN,IAATA,GACR5B,GAAM9B,SAASa,KACfiB,GAAM9B,SAASc,KACfgB,GAAM9B,SAASoB,OAEfqC,EAAY5E,EAAG6E,QAhBf5B,GAAM9B,SAASa,OAkBhBrB,IAGQmE,GAAa,WACxB,IAAMpF,EAAc,YAAOuD,GAAMM,WAAW/D,WAAWE,MAEvDuD,GAAM9B,SAASW,EAAc,IAC7B8C,GAFU,EAEKlF,EAAKhB,SC7BhBqG,GAAS,uCAAG,WAAOC,EAAaC,EAAaC,GAAjC,yBAAArE,EAAA,yDACVnB,EADU,YACWsF,GACrBG,EAAgBzF,EAAKwF,GAC3BjC,GAAM9B,SAASW,EAAcoD,IAC7BjC,GAAM9B,SAASe,EAAc+C,EAAKC,IAC9BlF,EAAIiF,EAEHE,EAPW,0CAQN,GARM,OASPC,EAAIH,EATG,YASEG,EAAIF,GATN,oBAUM,YAAhB5B,KAVU,2CAWJ,GAXI,eAYdL,GAAM9B,SAASY,EAAaqD,IAZd,UAcR5B,GAAK7C,GAdG,QAgBVjB,EAAK0F,GAAKD,IAAQ,EACC,CAACzF,EAAK0F,GAAI1F,EAAKM,IAAnCN,EAAKM,GADa,KACTN,EAAK0F,GADI,KAEnBnC,GAAM9B,SAASb,EAAaZ,EAAMA,EAAKhB,SACvCsB,KAnBY,QASYoF,IATZ,gCAsBQ,CAAC1F,EAAKwF,GAAOxF,EAAKM,IAAzCN,EAAKM,GAtBU,KAsBNN,EAAKwF,GAtBC,KAuBhBjC,GAAM9B,SAASb,EAAaZ,EAAMA,EAAKhB,SAvBvB,UAwBV8E,GAAK7C,GAxBK,iCAyBTX,GAzBS,4CAAH,0DA4BTqF,GAAI,uCAAG,WAAOJ,EAAaC,GAApB,iBAAArE,EAAA,yDACS,YAAhByC,KADO,oDAIL5D,EAJK,YAIMuD,GAAMM,WAAW/D,WAAWE,QACzCuF,EAAMC,GALC,iCAMeH,GAAUrF,EAAMuF,EAAKC,GANpC,WAQE,KAFLI,EANG,0EAUHD,GAAKJ,EAAKK,EAAI,GAVX,yBAWHD,GAAKC,EAAI,EAAGJ,GAXT,4CAAH,wDAgBGK,GAAS,uCAAG,4BAAA1E,EAAA,6DACjBnB,EADiB,YACNuD,GAAMM,WAAW/D,WAAWE,MAC7CuD,GAAM9B,SAASW,GAAe,IAFP,SAGjBuD,GAAK,EAAG3F,EAAKhB,OAAO,GAHH,OAIvBuE,GAAM9B,SAASa,KACfiB,GAAM9B,SAASc,KACfgB,GAAM9B,SAASe,GAAe,GAAI,IACd,YAAhBoB,MACFL,GAAM9B,SAASoB,MARM,2CAAH,qD,qBC1ChB8C,GAAI,uCAAG,kCAAAxE,EAAA,sDACLnB,EADK,YACgBuD,GAAMM,WAAW/D,WAAWE,MACjDL,EAAmB4D,GAAMM,WAAW/D,WAAWC,KACjD+F,GAAQ,EAEHxF,EAAI,EALF,YAKKA,EAAIX,EAAW,GALpB,wBAMT4D,GAAM9B,SAASW,EAAc9B,EAAE,IANtB,SAOHwD,GAAK7C,GAPF,UAQW,YAAhB2C,KARK,sDAUTL,GAAM9B,SAASW,EAAc9B,MACzBN,EAAKM,GAAKN,EAAKM,EAAI,IAXd,wBAYPwF,GAASA,EAZF,6BAKuBxF,IALvB,2BAiBPwF,EAjBO,wBAkBTvC,GAAM9B,SAASb,EAAamF,KAAEC,QAAQhG,GAAOA,EAAKhB,SAClDuE,GAAM9B,SAASW,GAAe,IAnBrB,UAoBH0B,GAAK,KApBF,yBAqBI6B,KArBJ,wDAuBXpC,GAAM9B,SAASoB,MAvBJ,+DAAH,qDA2BGoD,GAAQ,uCAAG,sBAAA9E,EAAA,6DACtBoC,GAAM9B,SAASW,GAAe,IADR,SAEhBuD,KAFgB,OAGtBpC,GAAM9B,SAASa,KACfiB,GAAM9B,SAASc,KAJO,2CAAH,qDC7BfoD,GAAI,uCAAG,WAAO3F,GAAP,mBAAAmB,EAAA,sDACFb,EAAI,EADF,YACKA,EAAIN,EAAKhB,QADd,oBAEW,YAAhB4E,KAFK,iEAKHE,GAAK7C,GALF,cAOTsC,GAAM9B,SAASc,KAEfgB,GAAM9B,SAASW,EAAc9B,EAAE,IATtB,UAUHwD,GAAK7C,GAVF,QAWLyE,EAAIpF,EACRiD,GAAM9B,SAASW,EAAc9B,IAZpB,aAaFoF,EAAI,GAAK1F,EAAK0F,EAAI,GAAK1F,EAAK0F,IAb1B,oBAca,YAAhB9B,KAdG,0DAiBPL,GAAM9B,SAASY,EAAaqD,IAjBrB,UAkBD5B,GAAK,KAlBJ,QAmBPP,GAAM9B,SAASY,EAAaqD,EAAI,IAChCnC,GAAM9B,SAASa,KApBR,EAsBkB,CAACtC,EAAK0F,EAAI,GAAI1F,EAAK0F,IAA3C1F,EAAK0F,GAtBC,KAsBG1F,EAAK0F,EAAI,GAtBZ,KAwBPnC,GAAM9B,SAASb,EAAa,YAAIZ,GAAOA,EAAKhB,SAE5C0G,IA1BO,wBACsBpF,IADtB,2DAAH,sDAiCG4F,GAAa,uCAAG,4BAAA/E,EAAA,6DACrBnB,EADqB,YACVuD,GAAMM,WAAW/D,WAAWE,MAC7CuD,GAAM9B,SAASW,GAAe,IAFH,SAGrBuD,GAAK3F,GAHgB,OAI3BuD,GAAM9B,SAASa,KACfiB,GAAM9B,SAASc,KACfgB,GAAM9B,SAASoB,MANY,2CAAH,qDChCpB8C,GAAI,uCAAG,kCAAAxE,EAAA,yDACLgF,EAAa5C,GAAMM,WAAW/D,WAAWC,KAE1C6D,KAHM,iDAMPwC,EAAQ,EAND,IAAAjF,EAAA,oCAAAA,EAAA,yDAQW,YAAhByC,KARK,+DAUH5D,EAAOuD,GAAMM,WAAW/D,WAAWE,KACzCuD,GAAM9B,SAASW,EAAcgE,MACzBpG,EAAKhB,QAAU,GAZV,+DAeLoH,IAAUpG,EAAKhB,OAfV,6EAkBH8E,GAAK7C,GAlBF,aAoBLjB,EAAKoG,EAAQ,GAAKpG,EAAKoG,IApBlB,wBAqBDzE,EAAU3B,EAAKqG,QAAO,SAAAC,GAAC,OAAIA,IAAMtG,EAAKoG,MAC5C7C,GAAM9B,SAASb,EAAae,EAASwE,IAtB9B,sCAyBTC,IAzBS,4PA0BHA,EAAQ,EA1BL,4DAAH,qDA8BGG,GAAU,uCAAG,sBAAApF,EAAA,6DACxBoC,GAAM9B,SAASW,GAAe,IADN,SAElBuD,KAFkB,OAGxBpC,GAAM9B,SAASa,KACfiB,GAAM9B,SAASc,KACfgB,GAAM9B,SAASoB,MALS,2CAAH,qDC/BjB2D,GAAK,uCAAG,WAAOC,EAAeL,GAAtB,iCAAAjF,EAAA,yDACTnB,EADS,YACEuD,GAAMM,WAAW/D,WAAWE,MAGxB,IAAfyG,EAAIzH,OAJK,yCAKLyH,GALK,cAOPC,EAAYN,EAEZO,EAAmB,GAEnBC,EAAuBC,KAAKC,MAAML,EAAIzH,OAAO,GAXtC,SAa0BwH,GAAMC,EAAIM,MAAM,EAAGH,GAAeR,GAb5D,cAaPY,EAbO,iBAc2BR,GAAMC,EAAIM,MAAMH,EAAcH,EAAIzH,QAASgB,EAAKiH,QAAQR,EAAIG,KAdvF,WAcPM,EAdO,OAgBG,OAAZF,GAAiC,OAAbE,EAhBX,0CAiBL,MAjBK,QAmBblH,EAAI,YAAOuD,GAAMM,WAAW/D,WAAWE,MAEnCmH,EAAY,EACZC,EAAa,EAEjB7D,GAAM9B,SAASe,EAAcxC,EAAKiH,QAAQD,EAAQ,IAAKhH,EAAKiH,QAAQC,EAASA,EAASlI,OAAO,MAxBhF,IAAAmC,EAAA,kCAAAA,EAAA,yDA2BQ,YAAhByC,KA3BQ,4CA4BJ,OA5BI,cA8BZL,GAAM9B,SAASW,EAAcgE,IAE7B7C,GAAM9B,SAASY,EAAarC,EAAKiH,QAAQC,EAASE,MAhCtC,SAiCNtD,GAAK7C,GAjCC,OAkCRkG,EAAYH,EAAQhI,QAAUgI,EAAQG,GAAaD,EAASE,IAAeA,IAAeF,EAASlI,QACtG2H,EAAOU,KAAKL,EAAQG,IACpBA,MAEAR,EAAOU,KAAKH,EAASE,IACrBA,KAGKE,EA1CM,UA0CiBX,EA1CjB,YA0C4BK,EAAQX,QAAO,SAAAC,GAAC,OAA2B,IAAvBK,EAAOM,QAAQX,OA1C/D,YA0C8EY,EAASb,QAAO,SAAAC,GAAC,OAA2B,IAAvBK,EAAOM,QAAQX,QAE9H/C,GAAM9B,SAASa,KACfiB,GAAM9B,SAASc,KACfgB,GAAM9B,SAASb,EAAaZ,EAAKI,KAC/B,SAACkG,EAAGhG,GAAJ,OAAWA,EAAEoG,GAAc,GAAMpG,EAAEoG,EAAaY,EAAOtI,OACvDsI,EAAOhH,EAAEoG,GAAaJ,KACpBtG,EAAKhB,SAGToH,IApDY,sLAsDJe,EAAYH,EAAQhI,QAAUoI,EAAaF,EAASlI,OAtDhD,kDAwDN2H,GAxDM,4CAAH,wDA2DLhB,GAAI,uCAAG,4BAAAxE,EAAA,yDACNnB,EADM,YACKuD,GAAMM,WAAW/D,WAAWE,MAEzB,YAAhB4D,KAHQ,iEAMN4C,GAAMxG,EAAM,GANN,2CAAH,qDAUGuH,GAAS,uCAAG,sBAAApG,EAAA,sEAClBwE,KADkB,OAExBpC,GAAM9B,SAASa,KACfiB,GAAM9B,SAASc,KACfgB,GAAM9B,SAASe,GAAe,GAAI,IAClCe,GAAM9B,SAASoB,MALS,2CAAH,qDCpET2E,GAAb,WAGE,aAAe,IAAD,iCAFdC,uBAEc,OAadC,aAbc,sBAaC,sBAAAvG,EAAA,2DACL,EAAKsG,kBADA,OlB5BS,ekB4BT,OlB3BQ,ckB2BR,OlB1BO,akB0BP,OlBzBY,kBkByBZ,QlBxBS,ekBwBT,QlBvBQ,ckBuBR,wCAGEtG,KAHF,+DAKEA,KALF,gEAOEA,KAPF,kEASEA,KATF,kEAWEA,KAXF,kEAaEA,KAbF,uHAZbwG,KAAKF,kBAAoB,aAJ7B,0DAOeG,GACXD,KAAKF,kBAAoBG,EACzBC,QAAQC,IAAI,qBAAsBH,KAAKF,qBAT3C,qCAaI,OAAOE,KAAKF,sBAbhB,KCHQM,GAAUC,IAAVD,MACAE,GAAUC,IAAVD,MAyKOE,GA1JkB,WAE/B,IAAMC,EAA6BtJ,OAAOuJ,OAAOrH,GAFZ,EAIb/C,oBAAkB,GAJL,mBAI9BqK,EAJ8B,KAIxBC,EAJwB,OAKDtK,oBAAkB,GALjB,mBAK9BmG,EAL8B,KAKlBoE,EALkB,OAOHvK,mBAA8B,CAAEwK,SAAU,aAPvC,mBAO9BC,EAP8B,KAOnBC,EAPmB,OAQI1K,mBAA8B,CAAEb,QAAS,IAR7C,mBAQ9BwL,EAR8B,KAQhBC,EARgB,KAU/BpH,EAAW4C,cAEXhB,EAAUzD,aAAY,SAACC,GAAD,OAAsBA,EAAMwD,WAClD1D,EAAWC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,WAAWC,QAE9D+I,EAAS,IAAItB,GAEnB9I,qBAAU,WACQ,YAAZ2E,GAAyBe,GAAckE,GACzCS,GAAW,KACZ,CAAC1F,IAGJ,IAAM2F,EAAkB,uCAAG,sBAAA7H,EAAA,yDACT,aAAZkC,EADqB,gCAEjB5B,EAASD,EAAa7B,IAFL,cAIzB8B,EAASqB,MAJgB,SAMnBgG,EAAOpB,eANY,2CAAH,qDASlBuB,EAAoB,WACxBxH,EAASsB,OAiBLgG,EAAa,SAACG,GAGlBX,GAASW,GAEPL,EADEK,EACe,CACf9L,QAAS,EACToC,WAAY,uCAGG,2BACZoJ,GADW,IAEdxL,QAAS,EACToC,WAAY,0CAiCZ2J,EAAY,iBACJ,YAAZ9F,GAAqC,aAAZA,GAAsC,YAAZA,EACjD,cAAC,IAAD,CAAQxC,KAAK,UAAUuI,OAAK,EAACrJ,KAAK,QAAQvD,MAAO,CAC7CW,OAAQ,YAEVkM,QAASL,EAHX,uBAKA,cAAC,IAAD,CAAQnI,KAAK,UAAUuI,OAAK,EAACrJ,KAAK,QAAQvD,MAAO,CAC7CW,OAAQ,YAEVkM,QAASJ,EAHX,iCASJ,OACE,mCACE,cAAChB,GAAD,CACEtL,MAAO,OAAQ2M,UAAU,aAAaC,MAAM,QAC5CL,WAAYZ,EACZkB,eAAe,IAAIC,WAAYV,EAAY3E,WAAW,KACtDsF,aAlDmB,SAACtF,GACpBA,GACFuE,EAAa,CACXF,SAAU,WACV1L,OAAQ,IACRyC,WAAY,aAEdqJ,EAAiB,CACfzL,QAAS,EACToC,WAAY,0CAGdmJ,EAAa,CACXF,SAAU,WACV1L,OAAQ,EACRyC,WAAY,SAEdqJ,EAAiB,2BACZD,GADW,IAEdxL,QAAS,EACToC,WAAY,WAKhBgJ,EAAcpE,IAyBsB5H,MAAOkM,EAAWiB,sBAAuB,CAAEC,IAAK,GAJlF,SAMC,sBAAKN,UAAU,gBAAgB9M,MAAOoM,EAAtC,UACC,cAACb,GAAD,CAAO8B,MAAO,EAAGrN,MAAO,CAAEW,OAAQ,aAAc2M,QAAS,aAAzD,8BAEE,cAAC,GAAD,CAAgB1F,WAAYA,IAI1BA,EAAa,KACX,cAAC+E,EAAD,IAGJ,cAAC,IAAD,uCAEA,cAAC,IAAD,CACEY,KAAK,SACLvN,MAAO,CAAEwN,YAAa,EAAIxK,WAAY,QACtCyK,oBAAqB,CAACnB,EAAOoB,gBAC7Bb,QArGU,SAACc,IACI,uCAAG,sBAAAhJ,EAAA,yDACR,YAAZkC,EADoB,gCAEhB5B,EAASD,EAAa7B,IAFN,OAGtB8B,EAASuB,MAHa,2CAAH,qDAOvBoH,GAEAtB,EAAOuB,aAAaF,EAAMpM,MAuFpB,SAOCqK,EAAiBhI,KAAI,SAAAe,GAAC,OACrB,cAAC,IAAKmJ,KAAN,CAEErF,SAAsB,YAAZ5B,EACV7G,MAAO,CAAEgD,WAAY,QAHvB,SAIE2B,GAHKA,gBCnJXoJ,GAAWrC,IAAXqC,OAqEOC,GA/DI,SAAC,GAAgC,IAA9B7N,EAA6B,EAA7BA,MACd8E,EAAW4C,cAEXhB,EAAUzD,aAAY,SAACC,GAAD,OAAsBA,EAAMwD,WAClD1D,EAAWC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,WAAWC,QAE9D+I,EAAS,IAAItB,GAEnBK,QAAQC,IAAInL,GAEZ,IAAMqM,EAAkB,uCAAG,sBAAA7H,EAAA,yDACT,aAAZkC,EADqB,gCAEjB5B,EAASD,EAAa7B,IAFL,cAIzB8B,EAASqB,MAJgB,SAMnBgG,EAAOpB,eANY,2CAAH,qDASlBuB,EAAoB,WACxBxH,EAASsB,OAGL0H,EAAmC,CACvCtK,QAAS,eAAgBuK,MAAO,QAASjO,OAAQ,MAAOU,OAAQ,WAChER,MAAO,OAAQ4C,UAAW,qBAAsBqK,IAAK,OAGjDT,EAAY,iBACJ,YAAZ9F,EACM,cAAC,IAAD,CACExC,KAAK,UAAUuI,OAAK,EAACrJ,KAAK,QAC1BvD,MAAOiO,EACPpB,QAASL,EAHX,iCAOE,cAAC,IAAD,CACEnI,KAAK,UAAUuI,OAAK,EAACrJ,KAAK,QAC1BvD,MAAOiO,EAAapB,QAASJ,EAF/B,iCAQV,OACE,eAACsB,GAAD,CAAQjB,UAAU,SAAS9M,MAAO,CAAEsN,QAASnN,EAAQ,IAAM,cAAgB,eAA3E,UACE,wBACA,cAAC,IAAD,CACE4M,MAAM,OAAOQ,KAAK,aAAaE,oBAAqB,CAAC,KACrDzN,MAAO,CAAE2D,QAAS,gBAFpB,SAIE,cAAC,IAAKmK,KAAN,qBAAe,OAGb3N,EAAQ,IACR,cAACwM,EAAD,IACC,SC1EKwB,IAAoBzC,IAA5BqC,OAA4BrC,IAApByC,QAAQC,GAAY1C,IAAZ0C,QA8DTC,GAlDO,WAAO,IAAD,EAEI5M,oBAAkB,GAFtB,mBAEnB6M,EAFmB,KAEVC,EAFU,KAGpBC,EAAevM,iBAAuB,MACpC9B,E1BlB4B,SAACsO,GACrC,IAAMC,EAAgB,yBAAmB,CACvCvO,OAAO,UAAAsO,EAAMrN,eAAN,eAAeuN,cAAe,EACrC1O,QAAQ,UAAAwO,EAAMrN,eAAN,eAAewN,eAAgB,IAHiE,EAMtEnN,mBAAqB,CAAEtB,MAAO,EAAGF,OAAQ,IAN6B,mBAMnG4O,EANmG,KAMvFC,EANuF,KAuB1G,OAfA5M,qBAAU,WACR,IAAM6M,EAAe,WACnBD,EAAcJ,MAQhB,OALID,EAAMrN,SACR0N,EAAcJ,KAEhBM,OAAOC,iBAAiB,SAAUF,GAE3B,WACLC,OAAOE,oBAAoB,SAAUH,MAEtC,CAACN,IAEGI,E0BLWM,CAAuBX,GAAjCrO,MAaR,OAVA+B,qBAAU,YACQ,IAAZoM,IACF5G,YAAW,WACT6G,GAAW,KACV,KACHA,GAAW,MAGZ,CAACpO,IAGF,qBAAKP,IAAK4O,EAAV,SACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAYrO,MAAOA,IACnB,eAAC,IAAD,CAAQH,MAAO,CAAEW,OAAQR,EAAQ,IAAM,cAAgB,KAAvD,UAEE,cAAC,GAAD,IAEA,cAAC,IAAD,CAAQH,MAAO,CAAEsN,QAAS,aAA1B,SACE,cAACc,GAAD,CAAStB,UAAU,sBAAsBsC,GAAG,YACxCpP,MAAO,CACLsN,QAAS,GACT+B,UAAWlP,EAAQ,IAAM,EAAI,IAHnC,SAME,sBAAK2M,UAAU,qBAAf,UAEIwB,EAAU,cAAC,IAAD,IACR,cAAC,EAAD,CAAMpL,eAAgB/C,IAE1B,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,cAKR,cAACgO,GAAD,CAAQnO,MAAO,CAAEsP,UAAW,UAA5B,kF,OC1DRC,IAASC,OACP,cAAC,IAAD,CAAUzI,MAAOA,GAAjB,SACE,cAAC,GAAD,MAEF0I,SAASC,eAAe,W","file":"static/js/main.8eae4a4f.chunk.js","sourcesContent":["import React, { MutableRefObject } from 'react'\n\ntype Props = {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\ntype Ref = HTMLDivElement\n\ninterface Bar {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\n// Renders a bar to represent a number in the list\nconst Bar: React.FC<Bar> = React.forwardRef<Ref, Props>((props: Props, ref) => {\n\n  const normal = !props.main && !props.sub\n  const maxHeight = 30\n  const style = {\n    height: `${maxHeight+1}em`,\n    width: `${props.width}%`,\n    background: props.area ? \"rgb(170, 182, 193, 0.6)\" : 'transparent',\n    \n  }\n  const barStyle = {\n    height: `${maxHeight*props.height}em`,\n    maxHeight: `${maxHeight}em`,\n    width: 'auto',\n    background: normal ? '#f0f2f5' : props.main ? '#FF7A32' : \n    props.sub ? '#2EF550' : '#f0f2f5',\n    zIndex: 50,\n    borderStyle: 'solid',\n    borderWidth: '0.2em',\n    borderColor: '#1890ff',//'#f0f2f5',\n    margin: '0.1em',\n    opacity: '100%'\n  }\n\n  return (\n    <div style={style} >\n      <div style={barStyle} ref={ref} />\n    </div>\n  )\n})\n\n// Eslint is being a douche\nBar.displayName = 'Bar'\n\nexport default Bar\n","/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Calculates the bounding boxes of elements given to it\n*/\n\nimport React, { ReactChildren } from 'react'\n\nimport { AnimationChild, AnimationChildren, DOMRectDict } from '../types'\n\nconst calculateBoundingBoxes = (children: AnimationChildren): DOMRectDict | null => {\n  const boundingBoxes: DOMRectDict = {}\n\n  React.Children.forEach(children, (child: AnimationChild) => {\n    if (!child.ref.current)\n      return null\n    const domNode = child.ref.current\n    const nodeBoundingBox = domNode.getBoundingClientRect()\n\n\n    boundingBoxes[child.key] = nodeBoundingBox\n  })\n\n  return boundingBoxes\n}\n\nexport default calculateBoundingBoxes","\n/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Used to animate changing bar positions\n*/\n\nimport React, { useState, useEffect, useLayoutEffect, ReactChildren } from 'react'\nimport { usePrevious } from '../../hooks'\nimport calculateBoundingBoxes from '../../utils/calculateBoundingBoxes'\n\nimport { AnimationChild, DOMRectDict } from '../../types'\n\nconst AnimateBars: React.FC<any> = ({ children }: { children: any}) => {\n  const [boundingBox, setBoundingBox] = useState<DOMRectDict | null>({})\n  const [prevBoundingBox, setPrevBoundingBox] = useState<DOMRectDict | null>({})\n  const prevChildren = usePrevious(children)\n\n  // Fix bounding boxes updating when list size updates\n  useLayoutEffect(() => {\n    const newBoundingBox = calculateBoundingBoxes(children)\n    setBoundingBox(newBoundingBox)\n  }, [children])\n\n  useLayoutEffect(() => {\n    const prevBoundingBox = calculateBoundingBoxes(prevChildren)\n    setPrevBoundingBox(prevBoundingBox)\n  }, [prevChildren])\n\n  useEffect(() => {\n    if (!prevBoundingBox || !boundingBox || Object.keys(prevBoundingBox).length < Object.keys(boundingBox).length)\n      return\n\n    const hasPrevBoundingBox = Object.keys(prevBoundingBox).length\n\n    if (hasPrevBoundingBox) {\n      React.Children.forEach(children, (child: AnimationChild) => {\n        const domNode = child.ref.current\n        const firstBox = prevBoundingBox[child.key]\n        const lastBox = boundingBox[child.key]\n        if (!firstBox || !lastBox)\n          return\n\n        const changeInX = firstBox.left - lastBox.left\n\n\n        if (changeInX) {\n          requestAnimationFrame(() => {\n            // Before DOM paints, invert child to old position\n            // Maybe longer animation time?\n            // Reduce speed of sorting so the animation shows\n            domNode.style.transform = `translateX(${changeInX}px)`\n            domNode.style.transition = `transform 0ms`\n\n            requestAnimationFrame(() => {\n              // After previous frame, remove the transition to play the animation\n              domNode.style.transform = ''\n              domNode.style.transition = 'transform 200ms'\n            })\n          })\n        }\n      })\n    }\n  }, [boundingBox, prevBoundingBox, children])\n\n  return children\n\n}\n\nexport default AnimateBars\n","import { useState, useEffect, useRef} from 'react'\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport const useContainerDimensions = (myRef: React.MutableRefObject<HTMLDivElement | null>): Dimensions => {\n  const getDimensions = (): Dimensions => ({\n    width: myRef.current?.offsetWidth || 0,\n    height: myRef.current?.offsetHeight || 0\n  })\n\n  const [dimensions, setDimensions] = useState<Dimensions>({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current)\n      setDimensions(getDimensions())\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [myRef])\n\n  return dimensions\n\n}\n\n// https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n// Used to get the previous value of an object\nexport const usePrevious = (value: any): any => {\n  const prevChildrenRef = useRef()\n\n  useEffect(() => {\n    prevChildrenRef.current = value\n  }, [value])\n\n  return prevChildrenRef.current\n}","import React, { useState, useEffect, createRef } from 'react'\n\nimport Bar from './Visualization/Bar'\n\nimport { useSelector } from 'react-redux'\n\nimport { RootState, CurrentNumberState } from '../store'\n\nimport AnimateBars from './Visualization/AnimateBars'\n\ninterface Props {\n  componentWidth: number;\n}\n\n// wery much in progress\n// Maybe\n// https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba\n// https://codesandbox.io/s/reorder-elements-with-slide-transition-and-react-hooks-flip-211f2?from-embed\nconst Bars: React.FC<Props> = ({componentWidth}: { componentWidth: number } ) => {\n  const listSize: number = useSelector((state: RootState) => state.numberList.size)\n  const list: number[] = useSelector((state: RootState) => state.numberList.list)\n  const selected: CurrentNumberState = useSelector((state: RootState) => state.currentNumber)\n  \n  const width: number = 100/listSize * componentWidth/listSize \n\n  return (\n    <div style={{ display: 'flex' }}>\n      <AnimateBars>\n        {\n          list.map((b, i) => {\n            const barRef = createRef<HTMLDivElement>()\n            return <Bar key={b} width={width} height={b/listSize} area={i >= selected.area.start && i <= selected.area.end}\n            // Fix types here\n            // @ts-expect-error\n              main={i === selected.main} sub={i === selected.sub} ref={barRef} // Ref is null for some reason\n            />\n        })}\n      </AnimateBars>\n    </div>\n  )\n}\n\nexport default Bars","export interface ListState {\n  list: number[];\n  size: number;\n}\n\nexport const ADD_LIST = 'ADD_LIST'\n\ninterface SetList {\n  type: typeof ADD_LIST;\n  payload: {\n    list: number[];\n    size: number;\n  }\n}\n\nexport type ListActionType = SetList","import {\n  ListActionType,\n  ADD_LIST,\n} from './types'\n\n\nexport const setNewAction = (list: number[], size: number): ListActionType => {\n  return {\n    type: ADD_LIST,\n    payload: {\n      list: list,\n      size: size\n    }\n  }\n}","\nlet apiBaseUrl = ''\n// eslint-disable-next-line\nif (process.env.NODE_ENV === 'development')\n  apiBaseUrl = 'http://localhost:3001/api'\nelse\n  apiBaseUrl = '/api'\n\nconst baseDelay = 250\n\nexport { apiBaseUrl, baseDelay }","export const BubbleSort = 'BubbleSort'\nexport const QuickSort = 'QuickSort'\nexport const BogoSort = 'BogoSort'\nexport const InsertionSort = 'InsertionSort'\nexport const StalinSort = 'StalinSort'\nexport const MergeSort = 'MergeSort'\n\nexport enum AlgorithmTypes {\n  BubbleSort = 'BubbleSort',\n  InsertionSort = 'InsertionSort',\n  MergeSort = 'MergeSort',\n  QuickSort = 'QuickSort',\n  BogoSort = 'BogoSort',\n  StalinSort = 'StalinSort',\n  \n}\n\nexport type Algorithms = typeof BubbleSort | typeof QuickSort | typeof BogoSort | typeof InsertionSort\n  | typeof StalinSort | typeof MergeSort\n\n","import axios from 'axios'\nimport { apiBaseUrl } from '../constants'\n\nconst fetchNew = async (size: number): Promise<number[]> => {\n  const { data: list } = await axios.get<number[]>(`${apiBaseUrl}/list?size=${size}`)\n  return list\n}\n\nexport default { fetchNew }","import {\n  ListState,\n  ListActionType,\n  ADD_LIST\n} from './types'\nimport { setNewAction } from './actions'\nimport { AppType } from '../'\n\nimport listService from '../../services/lists'\n\nconst initialState: ListState = {\n  list: [],\n  size: 25\n}\n\nexport const fetchNewList = (listSize: number): AppType => async dispatch => {\n  const newList: number[] = await listService.fetchNew(listSize)\n  dispatch(setNewAction(newList, listSize))\n}\n\nconst reducer = (state = initialState, action: ListActionType): ListState => {\n  switch (action.type) {\n  case ADD_LIST:\n\n    return {\n      list: [...action.payload.list],\n      size: action.payload.size\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","export interface CurrentNumberState {\n  main: number;\n  sub: number | null;\n  area: {\n    start: number;\n    end: number;\n  }\n}\n\nexport const SET_CURRENT = 'SET_CURRENT'\n\nexport const SET_MAIN = 'SET_MAIN'\n\nexport const SET_SUB = 'SET_SUB'\n\nexport const REMOVE_CURRENT = 'REMOVE_CURRENT'\n\nexport const REMOVE_SUB = 'REMOVE_SUB'\n\nexport const SET_AREA = 'SET_AREA'\n\ninterface SetCurrentAction {\n  type: typeof SET_CURRENT;\n  payload: {\n    main: number;\n    sub: number | null;\n  };\n}\n\ninterface SetMainAction {\n  type: typeof SET_MAIN;\n  payload: {\n    main: number;\n  };\n}\n\ninterface SetSubAction {\n  type: typeof SET_SUB;\n  payload: {\n    sub: number;\n  };\n}\n\ninterface RemoveCurrentAction {\n  type: typeof REMOVE_CURRENT;\n}\n\ninterface RemoveSubAction {\n  type: typeof REMOVE_SUB;\n}\n\ninterface SetAreaAction {\n  type: typeof SET_AREA;\n  payload: {\n    start: number,\n    end: number\n  }\n}\n\nexport type CurrentNumberActionType = SetCurrentAction | SetMainAction | SetSubAction | RemoveCurrentAction | \n  RemoveSubAction | SetAreaAction","import { CurrentNumberActionType, SET_CURRENT, SET_MAIN, SET_SUB, REMOVE_CURRENT, REMOVE_SUB, SET_AREA } from './types'\n\nexport const setCurrentAction = (main: number, sub?: number | null): CurrentNumberActionType => {\n  return {\n    type: SET_CURRENT,\n    payload: {\n      main: main,\n      sub: sub || null\n    }\n  }\n}\n\nexport const setMainAction = (main: number): CurrentNumberActionType => {\n  return {\n    type: SET_MAIN,\n    payload: {\n      main: main,\n    }\n  }\n}\n\nexport const setSubAction = (sub: number): CurrentNumberActionType => {\n  return {\n    type: SET_SUB,\n    payload: {\n      sub: sub\n    }\n  }\n}\n\nexport const removeCurrentAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_CURRENT\n  }\n}\n\nexport const removeSubAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_SUB\n  }\n}\n\nexport const setAreaAction = (start: number, end: number): CurrentNumberActionType => {\n  return {\n    type: SET_AREA,\n    payload: {\n      start: start,\n      end: end\n    }\n  }\n}","import {\n  CurrentNumberState,\n  CurrentNumberActionType,\n  SET_CURRENT,\n  SET_MAIN,\n  SET_SUB,\n  REMOVE_CURRENT,\n  REMOVE_SUB,\n  SET_AREA\n} from './types'\nimport {\n  setCurrentAction,\n  setMainAction,\n  setSubAction,\n  removeCurrentAction,\n  removeSubAction,\n  setAreaAction\n} from './actions'\nimport { AppType } from '../'\n\nconst initialState: CurrentNumberState = {\n  main: -1,\n  sub: null,\n  area: {\n    start: -1,\n    end: -1\n  }\n}\n\nexport const setCurrent = (main: number, sub: number | null): AppType => async dispatch => {\n  dispatch(setCurrentAction(main, sub))\n}\n\nexport const setMain = (main: number): AppType => async dispatch => {\n  dispatch(setMainAction(main))\n}\n\nexport const setSub = (sub: number): AppType => async dispatch => {\n  dispatch(setSubAction(sub))\n}\n\nexport const removeCurrent = (): AppType => async dispatch => {\n  dispatch(removeCurrentAction())\n}\n\nexport const removeSub = (): AppType => async dispatch => {\n  dispatch(removeSubAction())\n}\n\nconst reducer = (state = initialState, action: CurrentNumberActionType): CurrentNumberState => {\n  switch(action.type) {\n  case SET_CURRENT:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: action.payload.sub\n    }\n  case SET_MAIN:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: state.sub\n    }\n  case SET_SUB:\n    return {\n      ...state,\n      main: state.main,\n      sub: action.payload.sub\n    }\n  case REMOVE_CURRENT:\n    return {\n      ...state,\n      main: -1\n    }\n  case REMOVE_SUB:\n    return {\n      ...state,\n      sub: null\n    }\n  case SET_AREA:\n    return {\n      ...state,\n      area: {\n        start: action.payload.start,\n        end: action.payload.end\n      }\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","export type runningType = 'running' | 'stopped' | 'finished' | 'waiting'\n\nexport const SET_RUNNING = 'SET_RUNNING'\n\nexport const SET_STOPPED = 'SET_STOPPED'\n\nexport const SET_FINISHED = 'SET_FINISHED'\n\nexport const SET_WAITING = 'SET_WAITING'\n\ninterface SetRunning {\n  type: typeof SET_RUNNING;\n}\n\ninterface SetStopped {\n  type: typeof SET_STOPPED;\n}\n\ninterface SetFinished {\n  type: typeof SET_FINISHED;\n}\n\ninterface SetWaiting {\n  type: typeof SET_WAITING;\n}\n\nexport type RunningStateAction = SetRunning | SetStopped | SetFinished | SetWaiting","import {\n  RunningStateAction,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\n\nexport const setRunningAction = (): RunningStateAction => {\n  return {\n    type: SET_RUNNING\n  }\n}\n\nexport const setStoppedAction = (): RunningStateAction => {\n  return {\n    type: SET_STOPPED\n  }\n}\n\nexport const setFinishedAction = (): RunningStateAction => {\n  return {\n    type: SET_FINISHED\n  }\n}\n\nexport const setWaitingAction = (): RunningStateAction => {\n  return {\n    type: SET_WAITING\n  }\n}","import {\n  RunningStateAction,\n  runningType,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\nimport {\n  setRunningAction,\n  setStoppedAction,\n  setFinishedAction,\n  setWaitingAction\n} from './actions'\n\nimport { AppType } from '..'\n\nconst initialState: runningType = 'finished'\n\nexport const setRunning = (): AppType => async dispatch => {\n  dispatch(setRunningAction())\n}\n\nexport const setStopped = (): AppType => async dispatch => {\n  dispatch(setStoppedAction())\n}\n\nexport const setFinished = (): AppType => async dispatch => {\n  dispatch(setFinishedAction())\n}\n\nexport const setWaiting = (): AppType => async dispatch => {\n  dispatch(setWaitingAction())\n}\n\nconst reducer = (state = initialState, action: RunningStateAction) => {\n  switch (action.type){\n  case SET_RUNNING:\n    return 'running'\n  case SET_STOPPED:\n    return 'stopped'\n  case SET_FINISHED:\n    return 'finished'\n  case SET_WAITING:\n    return 'waiting'\n  default:\n    return state\n  }\n}\n\nexport default reducer","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { Action } from 'redux'\nimport thunk, { ThunkAction } from 'redux-thunk'\nimport listReducer from './list/listReducer'\nimport currentNumberReducer from './currentNumber/currentNumberReducer'\nimport runningStateReducer from './running/runningReducer'\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst rootReducer = combineReducers({\n  numberList: listReducer,\n  currentNumber: currentNumberReducer,\n  running: runningStateReducer\n})\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(\n      thunk\n    )\n  )\n)\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport * from './currentNumber/types'\nexport * from './list/types'\nexport * from './running/types'\n\nexport type AppType<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n\nexport default store","import state from '../store'\nimport { runningType } from '../store/running/types'\n\nexport const isRunning = (): runningType => {\n  const running = state.getState().running\n  switch (running) {\n  case 'running':\n    return 'running'\n  case 'finished':\n    return 'finished'\n  default:\n    return 'stopped'\n  }\n}\n\nexport const wait = async (ms: number): Promise<void> => await new Promise(resolve => setTimeout(resolve, ms))\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Slider } from 'antd'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\n\nimport { fetchNewList } from '../store/list/listReducer'\n\nimport { isRunning } from '../utils'\nimport { setWaiting } from '../store/running/runningReducer'\n\ntype SliderProps = {\n  breakpoint: boolean\n}\n\nconst ListSizeSlider = ({ breakpoint }: SliderProps) => {\n  const dispatch = useDispatch()\n  const maxSliderValue = breakpoint ? 20 : 40\n\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n  const visualizationStatus = useSelector((state: RootState) => state.running)\n\n  const [sliderValue, setSliderValue] = useState(listSize)\n \n  useEffect(() => {\n    dispatch(setWaiting());\n    dispatch(fetchNewList(maxSliderValue/2))\n    setSliderValue(maxSliderValue/2)\n  }, [maxSliderValue])\n\n  useEffect(() => {\n    if (visualizationStatus === 'finished') {\n      dispatch(setWaiting())\n      dispatch(fetchNewList(listSize))\n    }\n    \n    \n  }, [listSize])\n\n  const onSliderChange = (value: any) => {\n    if (typeof value !== 'number' || isNaN(Number(value)))\n      return\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > maxSliderValue)\n      value = maxSliderValue\n    dispatch(fetchNewList(value))\n  }\n\n  return (\n    <div>\n      <Slider\n        min={3}\n        max={ maxSliderValue }\n        onChange={onSliderChange}\n        onAfterChange={setNewListSize}\n        value={sliderValue}\n        tipFormatter={null}\n        disabled={isRunning() === 'running'}\n      />\n    </div>\n  )\n}\n\nexport default ListSizeSlider","import { removeCurrentAction, removeSubAction, setMainAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst timeoutLoop = (i: number, loop: number): void => {\n\n  const list: number[] = [...store.getState().numberList.list]\n\n  setTimeout(() => {\n    if (isRunning() === 'stopped') {\n      store.dispatch(removeCurrentAction())\n      return\n    }\n    if (list[i] > list[i + 1]) {\n      [list[i], list[i + 1]] = [list[i + 1], list[i]]\n      store.dispatch(setNewAction(list, list.length))\n    }\n    i++\n    store.dispatch(setMainAction(i))\n    if (i === (loop-1)) {\n      timeoutLoop(-1, loop - 1)\n    }else if (loop === 0) {\n      store.dispatch(removeCurrentAction())\n      store.dispatch(removeSubAction())\n      store.dispatch(setFinishedAction())\n    }else  {\n      timeoutLoop(i, loop)\n    }\n  }, baseDelay)\n}\n\nexport const bubbleSort = (): void => {\n  const list: number[] = [...store.getState().numberList.list]\n  const i = 0\n  store.dispatch(setMainAction(0))\n  timeoutLoop(i, list.length)\n}","import {\n  setMainAction, setSubAction, removeCurrentAction, removeSubAction, setAreaAction\n} from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst partition = async (A: number[], low: number, high: number): Promise<number> => {\n  const list: number[] = [...A]\n  const pivot: number = list[high]\n  store.dispatch(setMainAction(high))\n  store.dispatch(setAreaAction(low, high))\n  let i = low\n\n  if (!pivot)\n    return -1\n  for (let j = low; j < high; j++) {\n    if (isRunning() === 'stopped')\n      return -1\n    store.dispatch(setSubAction(j))\n\n    await wait(baseDelay) // Wait for given amount of ms\n\n    if (list[j] < pivot) {\n      [list[i], list[j]] = [list[j], list[i]]\n      store.dispatch(setNewAction(list, list.length))\n      i++\n    }\n  }\n  [list[i], list[high]] = [list[high], list[i]]\n  store.dispatch(setNewAction(list, list.length))\n  await wait(baseDelay)\n  return i\n}\n\nconst sort = async (low: number, high: number): Promise<void> => {\n  if (isRunning() === 'stopped')\n    return\n\n  const list = [...store.getState().numberList.list]\n  if (low < high) {\n    const p: number = await partition(list, low, high)\n\n    if (p === -1)\n      return\n    await sort(low, p - 1)\n    await sort(p + 1, high)\n  }\n\n}\n\nexport const quickSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(0, list.length-1)\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setAreaAction(-1, -1))\n  if (isRunning() === 'running')\n    store.dispatch(setFinishedAction())\n\n}","import { setMainAction, removeCurrentAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport { setNewAction } from '../store/list/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport _ from 'lodash'\nimport { baseDelay } from '../constants'\n\n\nconst sort = async (): Promise<void> => {\n  const list: number[] = [...store.getState().numberList.list]\n  const listSize: number = store.getState().numberList.size\n  let rerun = false\n\n  for (let i = 1; i < listSize - 1; i++) {\n    store.dispatch(setMainAction(i-1))\n    await wait(baseDelay)\n    if (isRunning() === 'stopped')\n      return\n    store.dispatch(setMainAction(i))\n    if (list[i] < list[i - 1]) {\n      rerun = !rerun\n      break\n    }\n  }\n\n  if (rerun) {\n    store.dispatch(setNewAction(_.shuffle(list), list.length))\n    store.dispatch(setMainAction(-1))\n    await wait(300)\n    return await sort()\n  }\n  store.dispatch(setFinishedAction())\n  return\n}\n\nexport const bogoSort = async (): Promise<void> => {\n  store.dispatch(setMainAction(-1))\n  await sort()\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n\n}","import { setMainAction, removeCurrentAction, setSubAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport { baseDelay } from '../constants'\n\n\nconst sort = async (list: number[]): Promise<void> => {\n  for (let i = 1; i < list.length; i++) {\n    if (isRunning() === 'stopped')\n      return\n      \n    await wait(baseDelay)\n\n    store.dispatch(removeSubAction())\n\n    store.dispatch(setMainAction(i-1))\n    await wait(baseDelay)\n    let j = i\n    store.dispatch(setMainAction(i))\n    while (j > 0 && list[j - 1] > list[j]) {\n      if (isRunning() === 'stopped')\n        return\n      \n      store.dispatch(setSubAction(j))\n      await wait(300);\n      store.dispatch(setSubAction(j - 1));\n      store.dispatch(removeCurrentAction());\n\n      [list[j], list[j - 1]] = [list[j - 1], list[j]]\n\n      store.dispatch(setNewAction([...list], list.length))\n      \n      j--\n    }\n    \n  }\n\n}\n\nexport const insertionSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(list)\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setFinishedAction())\n}","import { setMainAction, removeCurrentAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport { setNewAction } from '../store/list/actions'\n\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport { baseDelay } from '../constants'\n\nconst sort = async (): Promise<void> => {\n  const listLength = store.getState().numberList.size\n  \n  if (!isRunning())\n    return\n\n  let index = 1;\n  do {\n    if (isRunning() === 'stopped')\n      return\n    const list = store.getState().numberList.list\n    store.dispatch(setMainAction(index))\n    if (list.length <= 1)\n      return\n\n    if (index === list.length)\n      return\n\n    await wait(baseDelay)\n\n    if (list[index - 1] > list[index]) {\n      const newList = list.filter(v => v !== list[index]) \n      store.dispatch(setNewAction(newList, listLength))\n      continue\n    }\n    index++\n  } while(index > 0)\n\n}\n\nexport const stalinSort = async (): Promise<void> => {\n  store.dispatch(setMainAction(-1))\n  await sort()\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setFinishedAction())\n}","import {\n\tsetMainAction, setSubAction, removeCurrentAction, removeSubAction, setAreaAction\n} from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst merge = async (arr: number[], index: number): Promise<number[] | null> => {\n\tlet list = [...store.getState().numberList.list]\n\n\n\tif (arr.length === 1)\n\t\treturn arr\n\n\tconst baseIndex = index\n\n\tconst newArr: number[] = []\n\n\tconst halfOfLength: number = Math.floor(arr.length/2)\n\n\tconst leftArr: number[] | null = await merge(arr.slice(0, halfOfLength), index)\n\tconst rightArr: number[] | null = await merge(arr.slice(halfOfLength, arr.length), list.indexOf(arr[halfOfLength]))\n\n\tif (leftArr === null || rightArr === null)\n\t\treturn null\n\t\n\tlist = [...store.getState().numberList.list]\n\n\tlet leftIndex = 0\n\tlet rightIndex = 0\n\n\tstore.dispatch(setAreaAction(list.indexOf(leftArr[0]), list.indexOf(rightArr[rightArr.length-1])))\n\t\n\tdo {\n\t\tif (isRunning() === 'stopped') \n\t\t\treturn null\n\t\t\n\t\tstore.dispatch(setMainAction(index))\n\n\t\tstore.dispatch(setSubAction(list.indexOf(rightArr[rightIndex])))\n\t\tawait wait(baseDelay)\n\t\tif (leftIndex < leftArr.length && leftArr[leftIndex] < rightArr[rightIndex] || rightIndex === rightArr.length) {\n\t\t\tnewArr.push(leftArr[leftIndex])\n\t\t\tleftIndex++\n\t\t} else {\n\t\t\tnewArr.push(rightArr[rightIndex])\n\t\t\trightIndex++\n\t\t}\n\n\t\tconst rtrArr: number[] = [...newArr, ...leftArr.filter(v => newArr.indexOf(v) === -1), ...rightArr.filter(v => newArr.indexOf(v) === -1)]\n\t\t\n\t\tstore.dispatch(removeCurrentAction())\n\t\tstore.dispatch(removeSubAction())\n\t\tstore.dispatch(setNewAction(list.map(\n\t\t\t\t(v, i) => (i-baseIndex) >= 0 && (i-baseIndex) < rtrArr.length ?\n\t\t\t\trtrArr[i-baseIndex] : v\n\t\t\t), list.length\n\t\t\t))\n\n\t\tindex++\n\n\t} while (leftIndex < leftArr.length || rightIndex < rightArr.length)\n\n\treturn newArr\n}\n\nconst sort = async (): Promise<void> => {\n\tconst list = [...store.getState().numberList.list]\n\n\tif (isRunning() === 'stopped') \n\t\treturn\n\n\tawait merge(list, 0)\n\t\n}\n\nexport const mergeSort = async (): Promise<void> => {\n\tawait sort()\n\tstore.dispatch(removeCurrentAction())\n\tstore.dispatch(removeSubAction())\n\tstore.dispatch(setAreaAction(-1, -1))\n\tstore.dispatch(setFinishedAction())\n}","import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  InsertionSort,\n  StalinSort,\n  MergeSort,\n  Algorithms\n} from './types'\n\nimport * as a from '../../Algorithms'\n\nexport class AlgorithmRunner {  \n  selectedAlgorithm: Algorithms\n\n  constructor() {\n    this.selectedAlgorithm = 'BubbleSort' as Algorithms\n  }\n\n  setAlgorithm(algorithm: Algorithms) {\n    this.selectedAlgorithm = algorithm\n    console.log('selected algorithm', this.selectedAlgorithm)\n  }\n\n  getAlgorithm() {\n    return this.selectedAlgorithm\n  }\n\n  runAlgorithm = async () => {\n    switch (this.selectedAlgorithm) {\n    case BubbleSort:\n      return await a.bubbleSort()\n    case QuickSort:\n      return await a.quickSort()\n    case BogoSort:\n      return await a.bogoSort()\n    case InsertionSort:\n      return await a.insertionSort()\n    case StalinSort:\n      return await a.stalinSort()\n    case MergeSort:\n      return await a.mergeSort()\n    default:\n      return\n    }\n  }\n\n}","import React, { useEffect, useState } from 'react'\nimport {\n  Layout,\n  Typography,\n  Menu,\n  Button,\n  Divider\n} from 'antd'\n\nconst { Title } = Typography\nconst { Sider } = Layout\n\nimport ListSizeSlider from '../Components/ListSizeSlider'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setStopped, setRunning, setWaiting } from '../store/running/runningReducer'\n\nimport {\n  AlgorithmRunner,\n  Algorithms,\n  AlgorithmTypes\n} from '../services/AlgorithmRunner'\nimport { RootState } from '../store'\nimport { fetchNewList } from '../store/list/listReducer'\n\nconst AlgorithmSider: React.FC = () => {\n\n  const algorithmOptions: string[] = Object.values(AlgorithmTypes) as string[]\n\n  const [open, setOpen] = useState<boolean>(false)\n  const [breakpoint, setBreakpoint] = useState<boolean>(false)\n\n  const [currStyle, setCurrStyle] = useState<React.CSSProperties>({ position: 'relative' })\n  const [wrapperStyle, setWrappperStyle] = useState<React.CSSProperties>({ opacity: 1 })\n\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  const runner = new AlgorithmRunner()\n\n  useEffect(() => {\n    if (running === 'running' && breakpoint && open)\n      toggleOpen(true)\n  }, [running])\n\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished')\n      await dispatch(fetchNewList(listSize))\n\n    dispatch(setRunning())\n    \n    await runner.runAlgorithm()\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n  }\n\n  const menuOnClick = (event: any)  => {\n    const checkIfNotWaiting = async () => {\n      if (running !== 'waiting') {\n        await dispatch(fetchNewList(listSize))\n        dispatch(setWaiting())\n      }\n    }\n\n    checkIfNotWaiting()\n\n    runner.setAlgorithm(event.key as Algorithms)\n\n  }\n\n  const toggleOpen = (collapsed: boolean) => {\n    3\n\n    setOpen(!collapsed)\n    if (collapsed) \n      setWrappperStyle({\n        opacity: 0,\n        transition: 'opacity, 0.2s cubic-bezier(0,1,0,1)',\n      })\n    else \n      setWrappperStyle({\n        ...wrapperStyle,\n        opacity: 1,\n        transition: 'opacity, 0.2s cubic-bezier(1,0,1,0)',\n      })\n    \n  }\n\n  const handleBreakpoint = (breakpoint: boolean) => {\n    if (breakpoint) {\n      setCurrStyle({\n        position: 'absolute',\n        zIndex: 100,\n        transition: 'all 0.2s'\n      })\n      setWrappperStyle({\n        opacity: 0,\n        transition: 'opacity, 0.2s cubic-bezier(0,1,0,1)',\n      })\n    } else {\n      setCurrStyle({\n        position: 'relative',\n        zIndex: 1,\n        transition: 'none'\n      })\n      setWrappperStyle({\n        ...wrapperStyle,\n        opacity: 1,\n        transition: 'none',\n      })\n    }\n      \n\n    setBreakpoint(breakpoint)\n  }\n\n  const RunButton = () => (\n    running === 'stopped' || running === 'finished' || running === 'waiting' ?\n      <Button type='primary' block size='large' style={{\n          margin: '1em auto',\n        }}\n        onClick={startVisualization}\n      >Visualize</Button> :\n      <Button type='primary' block size='large' style={{\n          margin: '1em auto'\n        }}\n        onClick={stopVisualization}\n      >Stop visualization</Button>\n    \n  )\n\n\n  return (\n    <>\n      <Sider\n        width={'19em'} className='sider-root' theme='light'\n        collapsed={!open}\n        collapsedWidth=\"0\" onCollapse={toggleOpen} breakpoint=\"lg\"\n        onBreakpoint={handleBreakpoint} style={currStyle} zeroWidthTriggerStyle={{ top: 0 }}\n      >\n       <div className='sider-wrapper' style={wrapperStyle}>\n        <Title level={2} style={{ margin: '0,5em auto', padding: '0.2em 1em' }}>Select list size</Title>\n          {/* List size slider */}\n          <ListSizeSlider breakpoint={breakpoint} />\n\n          {/* Run button */}\n          {\n            breakpoint ? null \n            : <RunButton />\n          }\n\n          <Divider>Select sorting algorithm</Divider>\n          {/*Menu for selecting sorting algorithm*/}\n          <Menu\n            mode=\"inline\"\n            style={{ borderRight: 0 , transition: 'none'}}\n            defaultSelectedKeys={[runner.getAlgorithm()]}\n            onClick={menuOnClick}\n          >\n          \n          {algorithmOptions.map(a =>\n            <Menu.Item\n              key={a}\n              disabled={running === 'running' ? true : false}\n              style={{ transition: 'none' }}\n            >{a}</Menu.Item>\n          )}\n          </Menu>\n       </div>\n      </Sider>\n    </>\n  )\n}\n\nexport default AlgorithmSider","import React, { useRef, useEffect, useState} from 'react'\nimport {\n  Layout,\n  Menu,\n  Button\n} from 'antd'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport {\n  AlgorithmRunner,\n  Algorithms,\n  AlgorithmTypes\n} from '../services/AlgorithmRunner'\n\nimport { RootState } from '../store'\nimport { fetchNewList } from '../store/list/listReducer'\nimport { setStopped, setRunning, setWaiting } from '../store/running/runningReducer'\n\n\nconst { Header } = Layout\n\ntype PageHeaderProps = {\n  width: number\n}\n\nconst PageHeader = ({ width }: PageHeaderProps) => {\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  const runner = new AlgorithmRunner()\n\n  console.log(width)\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished')\n      await dispatch(fetchNewList(listSize))\n\n    dispatch(setRunning())\n    \n    await runner.runAlgorithm()\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n  }\n\n  const buttonStyle: React.CSSProperties = { \n    display: 'inline-block', float: 'right', height: '90%', margin: 'auto 1em', \n    width: 'auto', transform: 'translate(0, -50%)', top: '50%'\n  }\n\n  const RunButton = () => (\n    running !== 'running' ?\n          <Button \n            type='primary' block size='large'\n            style={buttonStyle}\n            onClick={startVisualization}\n          >\n          Start Visualization\n          </Button>\n          : <Button\n              type='primary' block size='large'\n              style={buttonStyle} onClick={stopVisualization}\n            >\n              Stop Visualization\n            </Button>\n  )\n\n  return (\n    <Header className='header' style={{ padding: width > 992 ? '0 5em 0 5em' : '0 1em 0 1em'}}>\n      <div />\n      <Menu\n        theme='dark' mode='horizontal' defaultSelectedKeys={['1']}\n        style={{ display: 'inline-block'}}\n      >\n        <Menu.Item key=\"1\">AlgoVis</Menu.Item>\n      </Menu>\n        {\n          width < 992 ? \n          <RunButton />\n          :null\n        }\n    </Header>\n  )\n}\n\nexport default PageHeader","import React, { useRef, useEffect, useState} from 'react'\nimport {\n  Layout,\n  Menu,\n  Skeleton,\n  Divider,\n  Button\n} from 'antd'\n\nconst { Header, Footer, Content } = Layout\n\nimport Bars from './Components/Bars'\nimport AlgorithmSider from './Components/AlgorithmSider'\nimport PageHeader from './Components/PageHeader'\n\n// Figure out webworkers at some point maybe?\n//import SortWorker from 'comlink-loader!./worker'\n\nimport { useContainerDimensions } from './hooks'\n\n\nconst App: React.FC = () => {\n\n  const [loading, setLoading] = useState<boolean>(false)\n  const componentRef = useRef<HTMLDivElement>(null)\n  const { width } = useContainerDimensions(componentRef)\n\n\n  useEffect(() => {\n    if (loading === false) {\n      setTimeout(() => {\n        setLoading(false)\n      }, 500)\n      setLoading(true)\n    }\n    \n  }, [width])\n\n  return (\n    <div ref={componentRef}>\n      <Layout>\n        <PageHeader width={width} />\n        <Layout style={{ margin: width > 992 ? '0 5em 0 5em' : '0' }}>\n\n          <AlgorithmSider />\n\n          <Layout style={{ padding: '0 10em em' }}>\n            <Content className=\"site-layout-content\" id='container'\n                style={{\n                  padding: 24,\n                  marginTop: width > 922 ? 0 : 20,\n                }}\n              >\n              <div className=\"bar-desc-container\" >\n                {\n                  loading ? <Skeleton/> :\n                    <Bars componentWidth={width} />\n                }\n                <Divider />\n                <Skeleton />\n                <Skeleton />\n              </div>\n            </Content>\n          </Layout>\n        </Layout>\n        <Footer style={{ textAlign: 'center' }}>AlgoVis algorithm visualizer @2020 Created by Jere Salmensaari</Footer>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport 'antd/dist/antd.css'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}