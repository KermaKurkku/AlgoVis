{"version":3,"sources":["Components/Visualization/Bar.tsx","utils/calculateBoundingBoxes.ts","Components/Visualization/AnimateBars.tsx","hooks/index.ts","Components/Bars.tsx","store/list/types.ts","store/list/actions.ts","constants.ts","services/AlgorithmRunner/types.ts","services/lists.ts","store/list/listReducer.ts","store/currentNumber/types.ts","store/currentNumber/actions.ts","store/currentNumber/currentNumberReducer.ts","store/running/types.ts","store/running/actions.ts","store/running/runningReducer.ts","store/index.ts","utils/index.ts","Components/ListSizeSlider.tsx","Algorithms/bubbleSort.ts","Algorithms/quickSort.ts","Algorithms/bogoSort.ts","Algorithms/insertionSort.ts","Algorithms/stalinSort.ts","Algorithms/mergeSort.ts","services/AlgorithmRunner/algorithmRunner.ts","Components/AlgorithmSider.tsx","App.tsx","index.tsx"],"names":["Bar","React","forwardRef","props","ref","normal","main","sub","style","height","maxHeight","width","background","area","barStyle","zIndex","borderStyle","borderWidth","borderColor","margin","opacity","displayName","calculateBoundingBoxes","children","boundingBoxes","Children","forEach","child","current","nodeBoundingBox","getBoundingClientRect","key","AnimateBars","useState","boundingBox","setBoundingBox","prevBoundingBox","setPrevBoundingBox","prevChildren","value","prevChildrenRef","useRef","useEffect","usePrevious","useLayoutEffect","newBoundingBox","Object","keys","length","domNode","firstBox","lastBox","changeInX","left","requestAnimationFrame","transform","transition","Bars","componentWidth","listSize","useSelector","state","numberList","size","list","selected","currentNumber","display","map","b","i","barRef","createRef","start","end","ADD_LIST","setNewAction","type","payload","apiBaseUrl","AlgorithmTypes","baseDelay","fetchNew","a","axios","get","data","initialState","fetchNewList","dispatch","listService","newList","reducer","action","SET_CURRENT","SET_MAIN","SET_SUB","REMOVE_CURRENT","REMOVE_SUB","SET_AREA","setMainAction","setSubAction","removeCurrentAction","removeSubAction","setAreaAction","SET_RUNNING","SET_STOPPED","SET_FINISHED","SET_WAITING","setFinishedAction","setWaiting","rootReducer","combineReducers","listReducer","currentNumberReducer","running","runningStateReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","isRunning","getState","wait","ms","Promise","resolve","setTimeout","ListSizeSlider","useDispatch","visualizationStatus","console","log","sliderValue","setSliderValue","min","max","onChange","isNaN","Number","onAfterChange","tipFormatter","disabled","timeoutLoop","loop","bubbleSort","partition","A","low","high","pivot","j","sort","p","quickSort","rerun","_","shuffle","bogoSort","insertionSort","index","filter","v","stalinSort","merge","arr","baseIndex","newArr","halfOfLength","Math","floor","slice","leftArr","indexOf","rightArr","leftIndex","rightIndex","push","rtrArr","mergeSort","runAlgorithm","Title","Typography","Sider","Layout","AlgorithmSider","algorithmOptions","values","selectedAlgorithm","setSelectedAlgorithm","open","setOpen","position","curStyle","setCurStyle","startVisualization","className","theme","collapsed","collapsedWidth","onCollapse","breakpoint","onBreakpoint","level","padding","block","onClick","mode","borderRight","defaultOpenKeys","defaultSelectedKeys","event","checkIfNotWaiting","Item","Header","Footer","Content","App","loading","setLoading","componentRef","myRef","getDimensions","offsetWidth","offsetHeight","dimensions","setDimensions","handleResize","window","addEventListener","removeEventListener","useContainerDimensions","id","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.588bb18d.chunk.js","sourcesContent":["import React, { MutableRefObject } from 'react'\n\ntype Props = {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\ntype Ref = HTMLDivElement\n\ninterface Bar {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\n// Renders a bar to represent a number in the list\nconst Bar: React.FC<Bar> = React.forwardRef<Ref, Props>((props: Props, ref) => {\n\n  const normal = !props.main && !props.sub\n  const maxHeight = 40\n  const style = {\n    height: `${maxHeight+1}em`,\n    width: `${props.width}%`,\n    background: props.area ? \"rgb(170, 182, 193, 0.6)\" : 'transparent',\n    \n  }\n  const barStyle = {\n    height: `${maxHeight*props.height}em`,\n    maxHeight: `${maxHeight}em`,\n    width: 'auto',\n    background: normal ? '#f0f2f5' : props.main ? '#FF7A32' : \n    props.sub ? '#2EF550' : '#f0f2f5',\n    zIndex: 50,\n    borderStyle: 'solid',\n    borderWidth: '0.2em',\n    borderColor: '#1890ff',//'#f0f2f5',\n    margin: '0.1em',\n    opacity: '100%'\n  }\n\n  return (\n    <div style={style} >\n      <div style={barStyle} ref={ref} />\n    </div>\n  )\n})\n\n// Eslint is being a douche\nBar.displayName = 'Bar'\n\nexport default Bar\n","/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Calculates the bounding boxes of elements given to it\n*/\n\nimport React, { ReactChildren } from 'react'\n\nimport { AnimationChild, AnimationChildren, DOMRectDict } from '../types'\n\nconst calculateBoundingBoxes = (children: AnimationChildren): DOMRectDict | null => {\n  const boundingBoxes: DOMRectDict = {}\n\n  React.Children.forEach(children, (child: AnimationChild) => {\n    if (!child.ref.current)\n      return null\n    const domNode = child.ref.current\n    const nodeBoundingBox = domNode.getBoundingClientRect()\n\n\n    boundingBoxes[child.key] = nodeBoundingBox\n  })\n\n  return boundingBoxes\n}\n\nexport default calculateBoundingBoxes","\n/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Used to animate changing bar positions\n*/\n\nimport React, { useState, useEffect, useLayoutEffect, ReactChildren } from 'react'\nimport { usePrevious } from '../../hooks'\nimport calculateBoundingBoxes from '../../utils/calculateBoundingBoxes'\n\nimport { AnimationChild, DOMRectDict } from '../../types'\n\nconst AnimateBars: React.FC<any> = ({ children }: { children: any}) => {\n  const [boundingBox, setBoundingBox] = useState<DOMRectDict | null>({})\n  const [prevBoundingBox, setPrevBoundingBox] = useState<DOMRectDict | null>({})\n  const prevChildren = usePrevious(children)\n\n  // Fix bounding boxes updating when list size updates\n  useLayoutEffect(() => {\n    const newBoundingBox = calculateBoundingBoxes(children)\n    setBoundingBox(newBoundingBox)\n  }, [children])\n\n  useLayoutEffect(() => {\n    const prevBoundingBox = calculateBoundingBoxes(prevChildren)\n    setPrevBoundingBox(prevBoundingBox)\n  }, [prevChildren])\n\n  useEffect(() => {\n    if (!prevBoundingBox || !boundingBox || Object.keys(prevBoundingBox).length < Object.keys(boundingBox).length)\n      return\n\n    const hasPrevBoundingBox = Object.keys(prevBoundingBox).length\n\n    if (hasPrevBoundingBox) {\n      React.Children.forEach(children, (child: AnimationChild) => {\n        const domNode = child.ref.current\n        const firstBox = prevBoundingBox[child.key]\n        const lastBox = boundingBox[child.key]\n        if (!firstBox || !lastBox)\n          return\n\n        const changeInX = firstBox.left - lastBox.left\n\n\n        if (changeInX) {\n          requestAnimationFrame(() => {\n            // Before DOM paints, invert child to old position\n            // Maybe longer animation time?\n            // Reduce speed of sorting so the animation shows\n            domNode.style.transform = `translateX(${changeInX}px)`\n            domNode.style.transition = `transform 0ms`\n\n            requestAnimationFrame(() => {\n              // After previous frame, remove the transition to play the animation\n              domNode.style.transform = ''\n              domNode.style.transition = 'transform 200ms'\n            })\n          })\n        }\n      })\n    }\n  }, [boundingBox, prevBoundingBox, children])\n\n  return children\n\n}\n\nexport default AnimateBars\n","import { useState, useEffect, useRef} from 'react'\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport const useContainerDimensions = (myRef: React.MutableRefObject<HTMLDivElement | null>): Dimensions => {\n  const getDimensions = (): Dimensions => ({\n    width: myRef.current?.offsetWidth || 0,\n    height: myRef.current?.offsetHeight || 0\n  })\n\n  const [dimensions, setDimensions] = useState<Dimensions>({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current)\n      setDimensions(getDimensions())\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [myRef])\n\n  return dimensions\n\n}\n\n// https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n// Used to get the previous value of an object\nexport const usePrevious = (value: any): any => {\n  const prevChildrenRef = useRef()\n\n  useEffect(() => {\n    prevChildrenRef.current = value\n  }, [value])\n\n  return prevChildrenRef.current\n}","import React, { useState, useEffect, createRef } from 'react'\n\nimport Bar from './Visualization/Bar'\n\nimport { useSelector } from 'react-redux'\n\nimport { RootState, CurrentNumberState } from '../store'\n\nimport AnimateBars from './Visualization/AnimateBars'\n\ninterface Props {\n  componentWidth: number;\n}\n\n// wery much in progress\n// Maybe\n// https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba\n// https://codesandbox.io/s/reorder-elements-with-slide-transition-and-react-hooks-flip-211f2?from-embed\nconst Bars: React.FC<Props> = ({componentWidth}: { componentWidth: number } ) => {\n  const listSize: number = useSelector((state: RootState) => state.numberList.size)\n  const list: number[] = useSelector((state: RootState) => state.numberList.list)\n  const selected: CurrentNumberState = useSelector((state: RootState) => state.currentNumber)\n  \n  const width: number = 100/listSize * componentWidth/listSize \n\n  return (\n    <div style={{ display: 'flex' }}>\n      <AnimateBars>\n        {\n          list.map((b, i) => {\n            const barRef = createRef<HTMLDivElement>()\n            return <Bar key={b} width={width} height={b/listSize} area={i >= selected.area.start && i <= selected.area.end}\n            // Fix types here\n            // @ts-expect-error\n              main={i === selected.main} sub={i === selected.sub} ref={barRef} // Ref is null for some reason\n            />\n        })}\n      </AnimateBars>\n    </div>\n  )\n}\n\nexport default Bars","export interface ListState {\n  list: number[];\n  size: number;\n}\n\nexport const ADD_LIST = 'ADD_LIST'\n\ninterface SetList {\n  type: typeof ADD_LIST;\n  payload: {\n    list: number[];\n    size: number;\n  }\n}\n\nexport type ListActionType = SetList","import {\n  ListActionType,\n  ADD_LIST,\n} from './types'\n\n\nexport const setNewAction = (list: number[], size: number): ListActionType => {\n  return {\n    type: ADD_LIST,\n    payload: {\n      list: list,\n      size: size\n    }\n  }\n}","\nlet apiBaseUrl = ''\n// eslint-disable-next-line\nif (process.env.NODE_ENV === 'development')\n  apiBaseUrl = 'http://localhost:3001/api'\nelse\n  apiBaseUrl = '/api'\n\nconst baseDelay = 250\n\nexport { apiBaseUrl, baseDelay }","export const BubbleSort = 'BubbleSort'\nexport const QuickSort = 'QuickSort'\nexport const BogoSort = 'BogoSort'\nexport const InsertionSort = 'InsertionSort'\nexport const StalinSort = 'StalinSort'\nexport const MergeSort = 'MergeSort'\n\nexport enum AlgorithmTypes {\n  BubbleSort = 'BubbleSort',\n  InsertionSort = 'InsertionSort',\n  MergeSort = 'MergeSort',\n  QuickSort = 'QuickSort',\n  BogoSort = 'BogoSort',\n  StalinSort = 'StalinSort',\n  \n}\n\nexport type Algorithms = typeof BubbleSort | typeof QuickSort | typeof BogoSort | typeof InsertionSort\n  | typeof StalinSort | typeof MergeSort\n\n","import axios from 'axios'\nimport { apiBaseUrl } from '../constants'\n\nconst fetchNew = async (size: number): Promise<number[]> => {\n  const { data: list } = await axios.get<number[]>(`${apiBaseUrl}/list?size=${size}`)\n  return list\n}\n\nexport default { fetchNew }","import {\n  ListState,\n  ListActionType,\n  ADD_LIST\n} from './types'\nimport { setNewAction } from './actions'\nimport { AppType } from '../'\n\nimport listService from '../../services/lists'\n\nconst initialState: ListState = {\n  list: [],\n  size: 25\n}\n\nexport const fetchNewList = (listSize: number): AppType => async dispatch => {\n  const newList: number[] = await listService.fetchNew(listSize)\n  dispatch(setNewAction(newList, listSize))\n}\n\nconst reducer = (state = initialState, action: ListActionType): ListState => {\n  switch (action.type) {\n  case ADD_LIST:\n\n    return {\n      list: [...action.payload.list],\n      size: action.payload.size\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","export interface CurrentNumberState {\n  main: number;\n  sub: number | null;\n  area: {\n    start: number;\n    end: number;\n  }\n}\n\nexport const SET_CURRENT = 'SET_CURRENT'\n\nexport const SET_MAIN = 'SET_MAIN'\n\nexport const SET_SUB = 'SET_SUB'\n\nexport const REMOVE_CURRENT = 'REMOVE_CURRENT'\n\nexport const REMOVE_SUB = 'REMOVE_SUB'\n\nexport const SET_AREA = 'SET_AREA'\n\ninterface SetCurrentAction {\n  type: typeof SET_CURRENT;\n  payload: {\n    main: number;\n    sub: number | null;\n  };\n}\n\ninterface SetMainAction {\n  type: typeof SET_MAIN;\n  payload: {\n    main: number;\n  };\n}\n\ninterface SetSubAction {\n  type: typeof SET_SUB;\n  payload: {\n    sub: number;\n  };\n}\n\ninterface RemoveCurrentAction {\n  type: typeof REMOVE_CURRENT;\n}\n\ninterface RemoveSubAction {\n  type: typeof REMOVE_SUB;\n}\n\ninterface SetAreaAction {\n  type: typeof SET_AREA;\n  payload: {\n    start: number,\n    end: number\n  }\n}\n\nexport type CurrentNumberActionType = SetCurrentAction | SetMainAction | SetSubAction | RemoveCurrentAction | \n  RemoveSubAction | SetAreaAction","import { CurrentNumberActionType, SET_CURRENT, SET_MAIN, SET_SUB, REMOVE_CURRENT, REMOVE_SUB, SET_AREA } from './types'\n\nexport const setCurrentAction = (main: number, sub?: number | null): CurrentNumberActionType => {\n  return {\n    type: SET_CURRENT,\n    payload: {\n      main: main,\n      sub: sub || null\n    }\n  }\n}\n\nexport const setMainAction = (main: number): CurrentNumberActionType => {\n  return {\n    type: SET_MAIN,\n    payload: {\n      main: main,\n    }\n  }\n}\n\nexport const setSubAction = (sub: number): CurrentNumberActionType => {\n  return {\n    type: SET_SUB,\n    payload: {\n      sub: sub\n    }\n  }\n}\n\nexport const removeCurrentAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_CURRENT\n  }\n}\n\nexport const removeSubAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_SUB\n  }\n}\n\nexport const setAreaAction = (start: number, end: number): CurrentNumberActionType => {\n  return {\n    type: SET_AREA,\n    payload: {\n      start: start,\n      end: end\n    }\n  }\n}","import {\n  CurrentNumberState,\n  CurrentNumberActionType,\n  SET_CURRENT,\n  SET_MAIN,\n  SET_SUB,\n  REMOVE_CURRENT,\n  REMOVE_SUB,\n  SET_AREA\n} from './types'\nimport {\n  setCurrentAction,\n  setMainAction,\n  setSubAction,\n  removeCurrentAction,\n  removeSubAction,\n  setAreaAction\n} from './actions'\nimport { AppType } from '../'\n\nconst initialState: CurrentNumberState = {\n  main: -1,\n  sub: null,\n  area: {\n    start: -1,\n    end: -1\n  }\n}\n\nexport const setCurrent = (main: number, sub: number | null): AppType => async dispatch => {\n  dispatch(setCurrentAction(main, sub))\n}\n\nexport const setMain = (main: number): AppType => async dispatch => {\n  dispatch(setMainAction(main))\n}\n\nexport const setSub = (sub: number): AppType => async dispatch => {\n  dispatch(setSubAction(sub))\n}\n\nexport const removeCurrent = (): AppType => async dispatch => {\n  dispatch(removeCurrentAction())\n}\n\nexport const removeSub = (): AppType => async dispatch => {\n  dispatch(removeSubAction())\n}\n\nconst reducer = (state = initialState, action: CurrentNumberActionType): CurrentNumberState => {\n  switch(action.type) {\n  case SET_CURRENT:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: action.payload.sub\n    }\n  case SET_MAIN:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: state.sub\n    }\n  case SET_SUB:\n    return {\n      ...state,\n      main: state.main,\n      sub: action.payload.sub\n    }\n  case REMOVE_CURRENT:\n    return {\n      ...state,\n      main: -1\n    }\n  case REMOVE_SUB:\n    return {\n      ...state,\n      sub: null\n    }\n  case SET_AREA:\n    return {\n      ...state,\n      area: {\n        start: action.payload.start,\n        end: action.payload.end\n      }\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","export type runningType = 'running' | 'stopped' | 'finished' | 'waiting'\n\nexport const SET_RUNNING = 'SET_RUNNING'\n\nexport const SET_STOPPED = 'SET_STOPPED'\n\nexport const SET_FINISHED = 'SET_FINISHED'\n\nexport const SET_WAITING = 'SET_WAITING'\n\ninterface SetRunning {\n  type: typeof SET_RUNNING;\n}\n\ninterface SetStopped {\n  type: typeof SET_STOPPED;\n}\n\ninterface SetFinished {\n  type: typeof SET_FINISHED;\n}\n\ninterface SetWaiting {\n  type: typeof SET_WAITING;\n}\n\nexport type RunningStateAction = SetRunning | SetStopped | SetFinished | SetWaiting","import {\n  RunningStateAction,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\n\nexport const setRunningAction = (): RunningStateAction => {\n  return {\n    type: SET_RUNNING\n  }\n}\n\nexport const setStoppedAction = (): RunningStateAction => {\n  return {\n    type: SET_STOPPED\n  }\n}\n\nexport const setFinishedAction = (): RunningStateAction => {\n  return {\n    type: SET_FINISHED\n  }\n}\n\nexport const setWaitingAction = (): RunningStateAction => {\n  return {\n    type: SET_WAITING\n  }\n}","import {\n  RunningStateAction,\n  runningType,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\nimport {\n  setRunningAction,\n  setStoppedAction,\n  setFinishedAction,\n  setWaitingAction\n} from './actions'\n\nimport { AppType } from '..'\n\nconst initialState: runningType = 'finished'\n\nexport const setRunning = (): AppType => async dispatch => {\n  dispatch(setRunningAction())\n}\n\nexport const setStopped = (): AppType => async dispatch => {\n  dispatch(setStoppedAction())\n}\n\nexport const setFinished = (): AppType => async dispatch => {\n  dispatch(setFinishedAction())\n}\n\nexport const setWaiting = (): AppType => async dispatch => {\n  dispatch(setWaitingAction())\n}\n\nconst reducer = (state = initialState, action: RunningStateAction) => {\n  switch (action.type){\n  case SET_RUNNING:\n    return 'running'\n  case SET_STOPPED:\n    return 'stopped'\n  case SET_FINISHED:\n    return 'finished'\n  case SET_WAITING:\n    return 'waiting'\n  default:\n    return state\n  }\n}\n\nexport default reducer","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { Action } from 'redux'\nimport thunk, { ThunkAction } from 'redux-thunk'\nimport listReducer from './list/listReducer'\nimport currentNumberReducer from './currentNumber/currentNumberReducer'\nimport runningStateReducer from './running/runningReducer'\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst rootReducer = combineReducers({\n  numberList: listReducer,\n  currentNumber: currentNumberReducer,\n  running: runningStateReducer\n})\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(\n      thunk\n    )\n  )\n)\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport * from './currentNumber/types'\nexport * from './list/types'\nexport * from './running/types'\n\nexport type AppType<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n\nexport default store","import state from '../store'\nimport { runningType } from '../store/running/types'\n\nexport const isRunning = (): runningType => {\n  const running = state.getState().running\n  switch (running) {\n  case 'running':\n    return 'running'\n  case 'finished':\n    return 'finished'\n  default:\n    return 'stopped'\n  }\n}\n\nexport const wait = async (ms: number): Promise<void> => await new Promise(resolve => setTimeout(resolve, ms))\n","import React, { useState, useEffect } from 'react'\nimport { Slider } from 'antd'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\n\nimport { fetchNewList } from '../store/list/listReducer'\n\nimport { isRunning } from '../utils'\nimport { setWaiting } from '../store/running/runningReducer'\n\n\nconst ListSizeSlider: React.FC = () => {\n  const dispatch = useDispatch()\n\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n  const visualizationStatus = useSelector((state: RootState) => state.running)\n\n  console.log('list size', listSize)\n\n  const [sliderValue, setSliderValue] = useState(listSize)\n \n\n  useEffect(() => {\n    if (visualizationStatus === 'finished') {\n      dispatch(setWaiting())\n      dispatch(fetchNewList(listSize))\n    }\n    \n    \n  }, [listSize])\n\n  const onSliderChange = (value: any) => {\n    if (typeof value !== 'number' || isNaN(Number(value)))\n      return\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > 40)\n      value = 40\n    dispatch(fetchNewList(value))\n  }\n\n  return (\n    <div>\n      <Slider\n        min={3}\n        max={40}\n        onChange={onSliderChange}\n        onAfterChange={setNewListSize}\n        value={sliderValue}\n        tipFormatter={null}\n        disabled={isRunning() === 'running'}\n      />\n    </div>\n  )\n}\n\nexport default ListSizeSlider","import { removeCurrentAction, removeSubAction, setMainAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst timeoutLoop = (i: number, loop: number): void => {\n\n  const list: number[] = [...store.getState().numberList.list]\n\n  setTimeout(() => {\n    if (isRunning() === 'stopped') {\n      store.dispatch(removeCurrentAction())\n      return\n    }\n    if (list[i] > list[i + 1]) {\n      [list[i], list[i + 1]] = [list[i + 1], list[i]]\n      store.dispatch(setNewAction(list, list.length))\n    }\n    i++\n    store.dispatch(setMainAction(i))\n    if (i === (loop-1)) {\n      timeoutLoop(-1, loop - 1)\n    }else if (loop === 0) {\n      store.dispatch(removeCurrentAction())\n      store.dispatch(removeSubAction())\n      store.dispatch(setFinishedAction())\n    }else  {\n      timeoutLoop(i, loop)\n    }\n  }, baseDelay)\n}\n\nexport const bubbleSort = (): void => {\n  const list: number[] = [...store.getState().numberList.list]\n  const i = 0\n  store.dispatch(setMainAction(0))\n  timeoutLoop(i, list.length)\n}","import {\n  setMainAction, setSubAction, removeCurrentAction, removeSubAction, setAreaAction\n} from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst partition = async (A: number[], low: number, high: number): Promise<number> => {\n  const list: number[] = [...A]\n  const pivot: number = list[high]\n  store.dispatch(setMainAction(high))\n  store.dispatch(setAreaAction(low, high))\n  let i = low\n\n  if (!pivot)\n    return -1\n  for (let j = low; j < high; j++) {\n    if (isRunning() === 'stopped')\n      return -1\n    store.dispatch(setSubAction(j))\n\n    await wait(baseDelay) // Wait for given amount of ms\n\n    if (list[j] < pivot) {\n      [list[i], list[j]] = [list[j], list[i]]\n      store.dispatch(setNewAction(list, list.length))\n      i++\n    }\n  }\n  [list[i], list[high]] = [list[high], list[i]]\n  store.dispatch(setNewAction(list, list.length))\n  await wait(baseDelay)\n  return i\n}\n\nconst sort = async (low: number, high: number): Promise<void> => {\n  if (isRunning() === 'stopped')\n    return\n\n  const list = [...store.getState().numberList.list]\n  if (low < high) {\n    const p: number = await partition(list, low, high)\n\n    if (p === -1)\n      return\n    await sort(low, p - 1)\n    await sort(p + 1, high)\n  }\n\n}\n\nexport const quickSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(0, list.length-1)\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setAreaAction(-1, -1))\n  if (isRunning() === 'running')\n    store.dispatch(setFinishedAction())\n\n}","import { setMainAction, removeCurrentAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport { setNewAction } from '../store/list/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport _ from 'lodash'\nimport { baseDelay } from '../constants'\n\n\nconst sort = async (): Promise<void> => {\n  const list: number[] = [...store.getState().numberList.list]\n  const listSize: number = store.getState().numberList.size\n  let rerun = false\n\n  for (let i = 1; i < listSize - 1; i++) {\n    store.dispatch(setMainAction(i-1))\n    await wait(baseDelay)\n    if (isRunning() === 'stopped')\n      return\n    store.dispatch(setMainAction(i))\n    if (list[i] < list[i - 1]) {\n      rerun = !rerun\n      break\n    }\n  }\n\n  if (rerun) {\n    store.dispatch(setNewAction(_.shuffle(list), list.length))\n    store.dispatch(setMainAction(-1))\n    await wait(300)\n    return await sort()\n  }\n  store.dispatch(setFinishedAction())\n  return\n}\n\nexport const bogoSort = async (): Promise<void> => {\n  store.dispatch(setMainAction(-1))\n  await sort()\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n\n}","import { setMainAction, removeCurrentAction, setSubAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport { baseDelay } from '../constants'\n\n\nconst sort = async (list: number[]): Promise<void> => {\n  for (let i = 1; i < list.length; i++) {\n    if (isRunning() === 'stopped')\n      return\n      \n    await wait(baseDelay)\n\n    store.dispatch(removeSubAction())\n\n    store.dispatch(setMainAction(i-1))\n    await wait(baseDelay)\n    let j = i\n    store.dispatch(setMainAction(i))\n    while (j > 0 && list[j - 1] > list[j]) {\n      if (isRunning() === 'stopped')\n        return\n      \n      store.dispatch(setSubAction(j))\n      await wait(300);\n      store.dispatch(setSubAction(j - 1));\n      store.dispatch(removeCurrentAction());\n\n      [list[j], list[j - 1]] = [list[j - 1], list[j]]\n\n      store.dispatch(setNewAction([...list], list.length))\n      \n      j--\n    }\n    \n  }\n\n}\n\nexport const insertionSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(list)\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setFinishedAction())\n}","import { setMainAction, removeCurrentAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport { setNewAction } from '../store/list/actions'\n\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport { baseDelay } from '../constants'\n\nconst sort = async (): Promise<void> => {\n  \n  if (!isRunning())\n    return\n\n  let index = 1;\n  do {\n    if (isRunning() === 'stopped')\n      return\n    const list = store.getState().numberList.list\n    store.dispatch(setMainAction(index))\n    if (list.length <= 1)\n      return\n\n    if (index === list.length)\n      return\n\n    await wait(baseDelay)\n\n    if (list[index - 1] > list[index]) {\n      const newList = list.filter(v => v !== list[index]) \n      store.dispatch(setNewAction(newList, list.length))\n      continue\n    }\n    index++\n  } while(index > 0)\n\n}\n\nexport const stalinSort = async (): Promise<void> => {\n  store.dispatch(setMainAction(-1))\n  await sort()\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setFinishedAction())\n}","import {\n\tsetMainAction, setSubAction, removeCurrentAction, removeSubAction, setAreaAction\n} from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst merge = async (arr: number[], index: number): Promise<number[] | null> => {\n\tlet list = [...store.getState().numberList.list]\n\n\n\tif (arr.length === 1)\n\t\treturn arr\n\n\tconst baseIndex = index\n\n\tconst newArr: number[] = []\n\n\tconst halfOfLength: number = Math.floor(arr.length/2)\n\n\tconst leftArr: number[] | null = await merge(arr.slice(0, halfOfLength), index)\n\tconst rightArr: number[] | null = await merge(arr.slice(halfOfLength, arr.length), list.indexOf(arr[halfOfLength]))\n\n\tif (leftArr === null || rightArr === null)\n\t\treturn null\n\t\n\tlist = [...store.getState().numberList.list]\n\n\tlet leftIndex = 0\n\tlet rightIndex = 0\n\n\tstore.dispatch(setAreaAction(list.indexOf(leftArr[0]), list.indexOf(rightArr[rightArr.length-1])))\n\t\n\tdo {\n\t\tif (isRunning() === 'stopped') \n\t\t\treturn null\n\t\t\n\t\tstore.dispatch(setMainAction(index))\n\n\t\tstore.dispatch(setSubAction(list.indexOf(rightArr[rightIndex])))\n\t\tawait wait(baseDelay)\n\t\tif (leftIndex < leftArr.length && leftArr[leftIndex] < rightArr[rightIndex] || rightIndex === rightArr.length) {\n\t\t\tnewArr.push(leftArr[leftIndex])\n\t\t\tleftIndex++\n\t\t} else {\n\t\t\tnewArr.push(rightArr[rightIndex])\n\t\t\trightIndex++\n\t\t}\n\n\t\tconst rtrArr: number[] = [...newArr, ...leftArr.filter(v => newArr.indexOf(v) === -1), ...rightArr.filter(v => newArr.indexOf(v) === -1)]\n\t\t\n\t\tstore.dispatch(removeCurrentAction())\n\t\tstore.dispatch(removeSubAction())\n\t\tstore.dispatch(setNewAction(list.map(\n\t\t\t\t(v, i) => (i-baseIndex) >= 0 && (i-baseIndex) < rtrArr.length ?\n\t\t\t\trtrArr[i-baseIndex] : v\n\t\t\t), list.length\n\t\t\t))\n\n\t\tindex++\n\n\t} while (leftIndex < leftArr.length || rightIndex < rightArr.length)\n\n\treturn newArr\n}\n\nconst sort = async (): Promise<void> => {\n\tconst list = [...store.getState().numberList.list]\n\n\tif (isRunning() === 'stopped') \n\t\treturn\n\n\tawait merge(list, 0)\n\t\n}\n\nexport const mergeSort = async (): Promise<void> => {\n\tawait sort()\n\tstore.dispatch(removeCurrentAction())\n\tstore.dispatch(removeSubAction())\n\tstore.dispatch(setAreaAction(-1, -1))\n\tstore.dispatch(setFinishedAction())\n}","import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  InsertionSort,\n  StalinSort,\n  MergeSort,\n  Algorithms\n} from './types'\n\nimport * as a from '../../Algorithms'\n\nexport const runAlgorithm = async (type: Algorithms) => {\n  switch (type) {\n  case BubbleSort:\n    return await a.bubbleSort()\n  case QuickSort:\n    return await a.quickSort()\n  case BogoSort:\n    return await a.bogoSort()\n  case InsertionSort:\n    return await a.insertionSort()\n  case StalinSort:\n    return await a.stalinSort()\n  case MergeSort:\n    return await a.mergeSort()\n  default:\n    return\n  }\n}","import React, { useState } from 'react'\nimport {\n  Layout,\n  Typography,\n  Menu,\n  Button,\n  Divider\n} from 'antd'\n\nconst { Title } = Typography\nconst { Sider } = Layout\n\nimport ListSizeSlider from '../Components/ListSizeSlider'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setStopped, setRunning, setWaiting } from '../store/running/runningReducer'\n\nimport {\n  runAlgorithm,\n  Algorithms,\n  AlgorithmTypes\n} from '../services/AlgorithmRunner'\nimport { RootState } from '../store'\nimport { fetchNewList } from '../store/list/listReducer'\n\nconst AlgorithmSider: React.FC = () => {\n\n  const algorithmOptions: string[] = Object.values(AlgorithmTypes) as string[]\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<string>(algorithmOptions[0])\n\n  const [open, setOpen] = useState<boolean>(false)\n\n  const [curStyle, setCurStyle] = useState<React.CSSProperties>({ position: 'relative'})\n\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished')\n      await dispatch(fetchNewList(listSize))\n\n    if (open) {\n      console.log('closing sider')\n      setOpen(false)\n    }\n\n    dispatch(setRunning())\n    const selected: Algorithms =  selectedAlgorithm as Algorithms\n    await runAlgorithm(selected)\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n    \n  }\n\n  const menuOnClick = (event: any)  => {\n    const checkIfNotWaiting = async () => {\n      if (running !== 'waiting') {\n        await dispatch(fetchNewList(listSize))\n        dispatch(setWaiting())\n      }\n    }\n\n    checkIfNotWaiting()\n\n    setSelectedAlgorithm(event.key)\n  }\n\n  const toggleOpen = (collapsed: any, type: any) => {\n    console.log('toggled open', !collapsed)\n    setOpen(!collapsed)\n    \n  }\n\n  const handleBreakpoint = (breakpoint: boolean) => {\n    console.log('breakpoint', breakpoint)\n    if (breakpoint) \n      setCurStyle({\n        position: 'absolute',\n        zIndex: 1\n    })\n    else\n      setCurStyle({\n        position: 'relative',\n        zIndex: 100\n    })\n\n  }\n\n  console.log('is open', open)\n\n  return (\n    <>\n      <Sider\n        width={'19em'} className='sider-root' theme='light'\n        collapsed={!open}\n        collapsedWidth=\"0\" onCollapse={toggleOpen} breakpoint=\"lg\"\n        onBreakpoint={handleBreakpoint} style={curStyle}\n      >\n        {\n          open ?\n          <div>\n            <Title level={2} style={{ margin: '0,5em auto', padding: '0.2em 1em' }}>Select list size</Title>\n            <ListSizeSlider />\n            {running === 'stopped' || running === 'finished' || running === 'waiting' ?\n              <Button type='primary' block size='large' style={{\n                margin: '1em auto',\n              }}\n              onClick={startVisualization}\n              >Visualize</Button> :\n              <Button type='primary' block size='large' style={{\n                margin: '1em auto'\n              }}\n              onClick={stopVisualization}\n              >Stop visualization</Button>\n            }\n            <Divider>Select sorting algorithm</Divider>\n            {/*Menu for selecting sorting algorithm*/}\n            <Menu\n              mode=\"inline\"\n              style={{ borderRight: 0 }}\n              defaultOpenKeys={['slider', 'sub2']}\n              defaultSelectedKeys={[algorithmOptions[0]]}\n              onClick={menuOnClick}\n            >\n              {algorithmOptions.map(a =>\n                <Menu.Item\n                  key={a}\n                  disabled={running === 'running' ? true : false}\n                >{a}</Menu.Item>\n              )}\n            </Menu>\n          </div> :\n          null\n        }\n\n      </Sider>\n    </>\n  )\n}\n\nexport default AlgorithmSider","import React, { useRef, useEffect, useState} from 'react'\nimport {\n  Layout,\n  Menu,\n  Skeleton,\n  Divider\n} from 'antd'\n\nconst { Header, Footer, Content } = Layout\n\nimport Bars from './Components/Bars'\nimport AlgorithmSider from './Components/AlgorithmSider'\n\n// Figure out webworkers at some point maybe?\n//import SortWorker from 'comlink-loader!./worker'\n\nimport { useContainerDimensions } from './hooks'\nimport { useDispatch } from 'react-redux'\nimport { fetchNewList } from './store/list/listReducer'\n\nconst App: React.FC = () => {\n\n  const [loading, setLoading] = useState<boolean>(false)\n  const componentRef = useRef<HTMLDivElement>(null)\n  const { width } = useContainerDimensions(componentRef)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchNewList(20))\n\n  }, [])\n\n\n  useEffect(() => {\n    if (loading === false) {\n      setTimeout(() => {\n        setLoading(false)\n      }, 500)\n      setLoading(true)\n    }\n    \n  }, [width])\n\n  return (\n    <div>\n      <Layout>\n        <Header className='header' style={{ padding: width > 992 ? '0 5em 0 5em' : '0 1em 0 1em'}}>\n          <div />\n          <Menu theme='dark' mode='horizontal' defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\">AlgoVis</Menu.Item>\n          </Menu>\n        </Header>\n        <Layout style={{ margin: width > 992 ? '0 5em 0 5em' : '0' }}>\n\n          <AlgorithmSider />\n\n          <Layout style={{ padding: '0 10em em' }}>\n            <Content className=\"site-layout-content\" id='container'\n                style={{\n                  padding: 24,\n                  margin: 0,\n                }}\n              >\n              <div className=\"bar-desc-container\" ref={componentRef}>\n                {\n                  loading ? <Skeleton/> :\n                    <Bars componentWidth={width} />\n                }\n                <Divider />\n                <Skeleton />\n                <Skeleton />\n              </div>\n            </Content>\n          </Layout>\n        </Layout>\n        <Footer style={{ textAlign: 'center' }}>AlgoVis algorithm visualizer @2020 Created by Jere Salmensaari</Footer>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport 'antd/dist/antd.css'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}