{"version":3,"sources":["Components/Visualization/Bar.tsx","Components/Bars.tsx","store/list/types.ts","store/list/actions.ts","constants.ts","services/lists.ts","services/AlgorithmRunner/types.ts","store/list/listReducer.ts","store/currentNumber/types.ts","store/currentNumber/actions.ts","store/currentNumber/currentNumberReducer.ts","store/running/types.ts","store/running/actions.ts","store/running/runningReducer.ts","store/index.ts","utils/isRunning.ts","Components/ListSizeSlider.tsx","Algorithms/bubbleSort.ts","Algorithms/quickSort.ts","Algorithms/bogoSort.ts","services/AlgorithmRunner/algorithmRunner.ts","App.tsx","index.tsx"],"names":["Bar","height","width","main","sub","style","maxHeight","background","zIndex","borderStyle","borderWidth","borderColor","Bars","listSize","useSelector","state","numberList","size","list","selected","currentNumber","display","map","b","i","ADD_LIST","CHANGE_SIZE","setNewAction","type","payload","apiBaseUrl","AlgorithmTypes","fetchNew","a","axios","get","data","initialState","fetchNewList","dispatch","listService","newList","reducer","action","SET_CURRENT","SET_MAIN","SET_SUB","REMOVE_CURRENT","REMOVE_SUB","setMainAction","setSubAction","removeCurrentAction","SET_RUNNING","SET_STOPPED","SET_FINISHED","SET_WAITING","setFinishedAction","rootReducer","combineReducers","listReducer","currentNumberReducer","running","runningStateReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","isRunning","getState","ListSizeSlider","useDispatch","useState","sliderValue","setSliderValue","useEffect","min","max","onChange","value","isNaN","Number","onAfterChange","changeListSize","tipFormatter","disabled","timeoutLoop","loop","setTimeout","bubbleSort","length","wait","ms","Promise","resolve","partition","A","low","high","pivot","j","sort","p","quickSort","rerun","bogoSort","runAlgorithm","Title","Typography","Header","Layout","Footer","Sider","Content","App","algorithmOptions","Object","values","selectedAlgorithm","setSelectedAlgorithm","startVisualization","className","theme","mode","defaultSelectedKeys","Item","margin","level","padding","block","onClick","borderRight","defaultOpenKeys","event","checkIfNotWaiting","key","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c65e7722.chunk.js","sourcesContent":["import React from 'react'\n\ninterface Bar {\n  height: number,\n  width: number,\n  main: boolean,\n  sub: boolean\n}\n\n// Renders a bar to represent a number in the list\nconst Bar: React.FC<Bar> = ({ height, width, main, sub }: { height: number, width: number, main: boolean, sub: boolean }) => {\n  const maxHeight = 40\n  const style = {\n    height: `${maxHeight*height}em`,\n    maxHeight: `${maxHeight}em`,\n    width: `${width}%`,\n    background: main ? '#FF7A32' : sub ? '#2EF550' : '#1890ff',\n    zIndex: 50,\n    borderStyle: 'solid',\n    borderWidth: '1px',\n    borderColor: '#f0f2f5'\n  }\n\n  return <div style={style} />\n}\n\nexport default Bar","import React, { useState, useEffect } from 'react'\n\nimport Bar from './Visualization/Bar'\n\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { RootState, CurrentNumberState } from '../store'\n\nconst Bars: React.FC = () => {\n  const listSize: number = useSelector((state: RootState) => state.numberList.size)\n  const list: number[] = useSelector((state: RootState) => state.numberList.list)\n  const selected: CurrentNumberState = useSelector((state: RootState) => state.currentNumber)\n\n  return (\n    <div style={{ display: 'flex' }}>\n      {list.map((b, i) => (\n        <Bar key={b} width={100/listSize} height={b/listSize}\n        main={i === selected.main} sub={i === selected.sub} />\n      ))}\n    </div>\n  )\n}\n\nexport default Bars","export interface ListState {\n  list: number[];\n  size: number\n}\n\nexport const ADD_LIST = 'ADD_LIST'\nexport const CHANGE_SIZE = 'CHANGE_SIZE'\n\ninterface SetList {\n  type: typeof ADD_LIST;\n  payload: number[];\n}\n\ninterface ChangeListSize {\n  type: typeof CHANGE_SIZE;\n  payload: number\n}\n\nexport type ListActionType = SetList | ChangeListSize","import {\n  ListActionType,\n  ADD_LIST,\n  CHANGE_SIZE\n} from './types'\n\n\nexport const setNewAction = (list: number[]): ListActionType => {\n    return {\n      type: ADD_LIST,\n      payload: list\n    }\n}\n\nexport const changeListSizeAction = (size: number): ListActionType => {\n  return {\n    type: CHANGE_SIZE,\n    payload: size\n  }\n}","\nlet apiBaseUrl = ''\nif (process.env.NODE_ENV === 'development')\n\tapiBaseUrl = `http://localhost:3001/api`\nelse\n\tapiBaseUrl = `/api`\n\nexport {apiBaseUrl}","import axios from 'axios'\nimport { apiBaseUrl } from '../constants'\n\nconst fetchNew = async (size: number): Promise<number[]> => {\n  const { data: list } = await axios.get<number[]>(`${apiBaseUrl}/list?size=${size}`) \n  return list\n}\n\nexport default { fetchNew }","export const BubbleSort = 'BubbleSort'\nexport const QuickSort = 'QuickSort'\nexport const BogoSort = 'BogoSort'\n\nexport enum AlgorithmTypes {\n  BubbleSort = 'BubbleSort',\n  QuickSort = 'QuickSort',\n  BogoSort = 'BogoSort'\n}\n\nexport type Algorithms = typeof BubbleSort | typeof QuickSort | typeof BogoSort\n\nexport type isAlgorithm<T> = T extends 'BubbleSort' ? typeof BubbleSort : typeof QuickSort","import {\n  ListState,\n  ListActionType,\n  ADD_LIST,\n  CHANGE_SIZE\n} from './types'\nimport { setNewAction, changeListSizeAction } from './actions'\nimport { AppType } from '../'\n\nimport listService from '../../services/lists'\n\nconst initialState: ListState = {\n  list: [],\n  size: 25\n}\n\nexport const fetchNewList = (listSize: number): AppType => async dispatch => {\n  const newList: number[] = await listService.fetchNew(listSize)\n  dispatch(setNewAction(newList))\n}\n\nexport const changeListSize = (listSize: number): AppType => async dispatch => {\n  dispatch(changeListSizeAction(listSize))\n}\n\nconst reducer = (state = initialState, action: ListActionType): ListState => {\n  switch (action.type) {\n    case ADD_LIST:\n      \n      return {\n        list: [...action.payload],\n        size: state.size\n      }\n    case CHANGE_SIZE:\n      return {\n        list: state.list,\n        size: action.payload\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer","export interface CurrentNumberState {\n  main: number\n  sub: number | null\n}\n\nexport const SET_CURRENT = 'SET_CURRENT'\n\nexport const SET_MAIN = 'SET_MAIN'\n\nexport const SET_SUB = 'SET_SUB'\n\nexport const REMOVE_CURRENT = 'REMOVE_CURRENT'\n\nexport const REMOVE_SUB = 'REMOVE_SUB'\n\ninterface setCurrentAction {\n  type: typeof SET_CURRENT;\n  payload: {\n    main: number,\n    sub: number | null\n  }\n}\n\ninterface setMainAction {\n  type: typeof SET_MAIN;\n  payload: {\n    main: number\n  }\n}\n\ninterface setSubAction {\n  type: typeof SET_SUB;\n  payload: {\n    sub: number\n  }\n}\n\ninterface removeCurrentAction {\n  type: typeof REMOVE_CURRENT;\n}\n\ninterface removeSubAction {\n  type: typeof REMOVE_SUB\n}\n\nexport type CurrentNumberActionType = setCurrentAction | setMainAction | setSubAction | removeCurrentAction | removeSubAction","import { CurrentNumberActionType, SET_CURRENT, SET_MAIN, SET_SUB, REMOVE_CURRENT, REMOVE_SUB } from './types'\n\nexport const setCurrentAction = (main: number, sub?: number | null): CurrentNumberActionType => {\n  return {\n    type: SET_CURRENT,\n    payload: {\n      main: main,\n      sub: sub || null\n    }\n  }\n}\n\nexport const setMainAction = (main: number): CurrentNumberActionType => {\n  return {\n    type: SET_MAIN,\n    payload: {\n      main: main,\n    }\n  }\n}\n\nexport const setSubAction = (sub: number): CurrentNumberActionType => {\n  return {\n    type: SET_SUB,\n    payload: {\n      sub: sub\n    }\n  }\n}\n\nexport const removeCurrentAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_CURRENT\n  }\n}\n\nexport const removeSubAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_SUB\n  }\n}","import {\n  CurrentNumberState,\n  CurrentNumberActionType,\n  SET_CURRENT,\n  SET_MAIN,\n  SET_SUB,\n  REMOVE_CURRENT,\n  REMOVE_SUB,\n} from './types'\nimport {\n  setCurrentAction,\n  setMainAction,\n  setSubAction,\n  removeCurrentAction,\n  removeSubAction\n} from './actions'\nimport { AppType } from '../'\n\nconst initialState: CurrentNumberState = {\n  main: -1,\n  sub: null\n}\n\nexport const setCurrent = (main: number, sub: number | null): AppType => async dispatch => {\n  dispatch(setCurrentAction(main, sub))\n}\n\nexport const setMain = (main: number): AppType => async dispatch => {\n  dispatch(setMainAction(main))\n}\n\nexport const setSub = (sub: number): AppType => async dispatch => {\n  dispatch(setSubAction(sub))\n}\n\nexport const removeCurrent = ():AppType => async dispatch => {\n  dispatch(removeCurrentAction())\n}\n\nexport const removeSub = ():AppType => async dispatch => {\n  dispatch(removeSubAction())\n}\n\nconst reducer = (state = initialState, action: CurrentNumberActionType): CurrentNumberState => {\n  switch(action.type) {\n    case SET_CURRENT:\n      return {\n        main: action.payload.main,\n        sub: action.payload.sub\n      }\n    case SET_MAIN:\n      return {\n        main: action.payload.main,\n        sub: state.sub\n      }\n    case SET_SUB:\n      return {\n        main: state.main,\n        sub: action.payload.sub\n      }\n    case REMOVE_CURRENT:\n      return {\n        main: -1,\n        sub: null,\n      }\n    case REMOVE_SUB:\n      return {\n        sub: null,\n        ...state\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer","export type runningType = 'running' | 'stopped' | 'finished' | 'waiting'\n\nexport const SET_RUNNING = 'SET_RUNNING'\n\nexport const SET_STOPPED = 'SET_STOPPED'\n\nexport const SET_FINISHED = 'SET_FINISHED'\n\nexport const SET_WAITING = 'SET_WAITING'\n\ninterface SetRunning {\n  type: typeof SET_RUNNING,\n}\n\ninterface SetStopped {\n  type: typeof SET_STOPPED\n}\n\ninterface SetFinished {\n  type: typeof SET_FINISHED\n}\n\ninterface SetWaiting {\n  type: typeof SET_WAITING\n}\n\nexport type RunningStateAction = SetRunning | SetStopped | SetFinished | SetWaiting","import {\n\tRunningStateAction,\n\tSET_RUNNING,\n\tSET_STOPPED,\n\tSET_FINISHED,\n\tSET_WAITING\n} from './types'\n\nexport const setRunningAction = (): RunningStateAction => {\n\treturn {\n\t\ttype: SET_RUNNING\n\t}\n}\n\nexport const setStoppedAction = (): RunningStateAction => {\n\treturn {\n\t\ttype: SET_STOPPED\n\t}\n}\n\nexport const setFinishedAction = (): RunningStateAction => {\n\treturn {\n\t\ttype: SET_FINISHED\n\t}\n}\n\nexport const setWaitingAction = (): RunningStateAction => {\n\treturn {\n\t\ttype: SET_WAITING\n\t}\n}","import {\n  RunningStateAction,\n  runningType,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\nimport {\n  setRunningAction,\n  setStoppedAction,\n  setFinishedAction,\n  setWaitingAction\n} from './actions'\n\nimport { AppType } from '..'\n\nconst initialState: runningType = 'waiting'\n\nexport const setRunning = (): AppType => async dispatch => {\n  dispatch(setRunningAction())\n}\n\nexport const setStopped = (): AppType => async dispatch => {\n  dispatch(setStoppedAction())\n}\n\nexport const setFinished = (): AppType => async dispatch => {\n  dispatch(setFinishedAction())\n}\n\nexport const setWaiting = (): AppType => async dispatch => {\n  dispatch(setWaitingAction())\n}\n\nconst reducer = (state = initialState, action: RunningStateAction) => {\n  switch (action.type){\n    case SET_RUNNING:\n      return 'running' \n    case SET_STOPPED:\n      return 'stopped'\n    case SET_FINISHED:\n      return 'finished'\n    case SET_WAITING:\n      return 'waiting'\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { Action } from 'redux'\nimport thunk, { ThunkAction } from 'redux-thunk'\nimport listReducer from './list/listReducer'\nimport currentNumberReducer from './currentNumber/currentNumberReducer'\nimport runningStateReducer from './running/runningReducer'\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst rootReducer = combineReducers({\n  numberList: listReducer,\n  currentNumber: currentNumberReducer,\n  running: runningStateReducer\n})\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(\n      thunk\n    )\n  )\n)\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport * from './currentNumber/types'\nexport * from './list/types'\nexport * from './running/types'\n\nexport type AppType<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n\nexport default store","import state from '../store'\nimport { runningType } from '../store/running/types'\n\nconst isRunning = (): runningType => {\n  const running = state.getState().running\n\tswitch (running) {\n\t\tcase 'running':\n\t\t\treturn 'running'\n\t\tcase 'finished':\n\t\t\treturn 'finished'\n\t\tdefault:\n\t\t\treturn 'stopped'\n\t}\n}\n\nexport default isRunning","import React, { useState, useEffect } from 'react'\nimport { Slider } from 'antd'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\n\nimport { fetchNewList, changeListSize } from '../store/list/listReducer'\n\nimport isRunning from '../utils/isRunning'\n\n\nconst ListSizeSlider: React.FC = () => {\n  const dispatch = useDispatch()\n\n  const [sliderValue, setSliderValue] = useState(25)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n\tuseEffect(() => {\n    dispatch(fetchNewList(listSize))\n  }, [listSize])\n\n  const onSliderChange = (value: any) => {\n    if (typeof value !== 'number' || isNaN(Number(value)))\n      return\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > 60)\n      value = 60\n    dispatch(changeListSize(value))\n  }\n\n\treturn (\n\t\t<div>\n\t\t\t<Slider\n\t\t\t\tmin={3}\n        max={60}\n        onChange={onSliderChange}\n        onAfterChange={setNewListSize}\n        value={typeof sliderValue === 'number' ? sliderValue : 25}\n        tipFormatter={null}\n        disabled={isRunning() === 'running'}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default ListSizeSlider","import { removeCurrentAction, setMainAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport isRunning from '../utils/isRunning'\n\nconst timeoutLoop = (i: number, loop: number): void => {\n  \n  const list: number[] = [...store.getState().numberList.list]\n\n  setTimeout(() => {\n    if (isRunning() === 'stopped') {\n      store.dispatch(removeCurrentAction())\n      return\n    }\n    if (list[i] > list[i + 1]) {\n      [list[i], list[i + 1]] = [list[i + 1], list[i]]\n      store.dispatch(setNewAction(list))\n    }\n    i++\n    store.dispatch(setMainAction(i))\n    if (i === (loop-1)) {\n      timeoutLoop(-1, loop - 1)\n    }else if (loop == 0) {\n      store.dispatch(removeCurrentAction())\n      store.dispatch(setFinishedAction())\n    }else  {\n      timeoutLoop(i, loop)\n    }\n  }, 80)\n}\n\nexport const bubbleSort = (): void => {\n  const list: number[] = [...store.getState().numberList.list]\n  const i = 0\n  store.dispatch(setMainAction(0))\n  timeoutLoop(i, list.length)\n}","import { setMainAction, setSubAction, removeCurrentAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport isRunning from '../utils/isRunning'\n\nconst wait = async (ms: number): Promise<void> => await new Promise(resolve => setTimeout(resolve, ms))\n\nconst partition = async (A: number[], low: number, high: number): Promise<number> => {\n  const list: number[] = [...A]\n  const pivot: number = list[high]\n  store.dispatch(setMainAction(high))\n  let i = low\n  \n  if (!pivot)\n    return -1\n  for (let j = low; j < high; j++) {\n    if (isRunning() === 'stopped')\n      return -1\n    store.dispatch(setSubAction(j))\n\n    await wait(80) // Wait for given amount of ms\n\n    if (list[j] < pivot) {\n      [list[i], list[j]] = [list[j], list[i]]\n      store.dispatch(setNewAction(list))\n      i++\n    }\n  }\n  [list[i], list[high]] = [list[high], list[i]]\n  store.dispatch(setNewAction(list))\n  return i\n}\n\nconst sort = async (low: number, high: number): Promise<void> => {\n  if (isRunning() === 'stopped')\n    return\n\n  const list = [...store.getState().numberList.list]\n  if (low < high) {\n    const p: number = await partition(list, low, high)\n    \n    if (p === -1)\n      return\n    await sort(low, p - 1)\n    await sort(p + 1, high)\n  }\n  \n}\n\nexport const quickSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(0, list.length-1)\n  store.dispatch(removeCurrentAction())\n  if (isRunning() === 'running')\n    store.dispatch(setFinishedAction())\n}","import { setMainAction, removeCurrentAction } from '../store/currentNumber/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport { setNewAction } from '../store/list/actions'\n\nimport listService from '../services/lists'\n\nimport store from '../store'\n\nimport isRunning from '../utils/isRunning'\n\nconst wait = async (ms: number): Promise<void> => await new Promise(resolve => setTimeout(resolve, ms))\n\n\nconst sort = async (): Promise<void> => {\n  \n  const list: number[] = [...store.getState().numberList.list]\n  const listSize: number = store.getState().numberList.size\n  let rerun = false\n\n  for (let i = 0; i < listSize - 1; i++) {\n    await wait(100)\n    if (isRunning() === 'stopped')\n      return\n    store.dispatch(setMainAction(i))\n    if (list[i] > list[i + 1]) {\n      rerun = !rerun\n      break\n    }\n  }\n\n  if (rerun) {\n    const newList = await listService.fetchNew(listSize)\n    store.dispatch(setNewAction(newList))\n    store.dispatch(setMainAction(-1))\n    await wait(100)\n    return await sort()\n  }\n  store.dispatch(setFinishedAction())\n  return \n}\n\nexport const bogoSort = async (): Promise<void> => {\n  store.dispatch(setMainAction(-1))\n  await sort()\n  store.dispatch(removeCurrentAction())\n  \n}\n","import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  Algorithms\n} from './types'\n\nimport {\n  quickSort,\n  bubbleSort,\n  bogoSort\n} from '../../Algorithms'\n\nexport const runAlgorithm = async (type: Algorithms) => {\n  switch (type) {\n    case BubbleSort:\n      return await bubbleSort()\n    case QuickSort:\n      return await quickSort()\n    case BogoSort:\n      return await bogoSort()\n    default:\n      return\n  }\n}","import React, { useState } from 'react'\nimport {\n  Layout,\n  Typography,\n  Menu,\n  Button,\n  Skeleton,\n  Divider\n} from 'antd'\n\nconst { Title } = Typography\nconst { Header, Footer, Sider, Content } = Layout\n\nimport Bars from './Components/Bars'\nimport ListSizeSlider from './Components/ListSizeSlider'\n\nimport isRunning from './utils/isRunning'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setStopped, setRunning, setWaiting } from './store/running/runningReducer'\n\n// Figure out webworkers at some point maybe?\n//import SortWorker from 'comlink-loader!./worker'\n\nimport {\n  runAlgorithm,\n  Algorithms,\n  AlgorithmTypes\n} from './services/AlgorithmRunner'\nimport { RootState } from './store'\nimport { fetchNewList } from './store/list/listReducer'\n\nconst App: React.FC = () => {\n  const algorithmOptions: string[] = Object.values(AlgorithmTypes) as string[]\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<string>(algorithmOptions[0])\n\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished') \n      await dispatch(fetchNewList(listSize))\n      \n    dispatch(setRunning())\n    const selected: Algorithms =  selectedAlgorithm as Algorithms\n    await runAlgorithm(selected)\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n    setTimeout(() => {\n      isRunning()\n    }, 20);\n  }\n\n  const menuOnClick = (event: any)  => {\n    const checkIfNotWaiting = async () => {\n      if (running !== 'waiting') {\n        await dispatch(fetchNewList(listSize))\n        dispatch(setWaiting())\n      }\n    }\n    \n    checkIfNotWaiting()\n\n    setSelectedAlgorithm(event.key)\n  }\n\n  return (\n    <div>\n      <Layout>\n        <Header className='header'>\n          <div />\n          <Menu theme='dark' mode='horizontal' defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\">AlgoVis</Menu.Item>\n          </Menu>\n        </Header>\n        <Layout style={{ margin: '0 5em 0 5em'}}>\n          <Sider width={'20%'} className='site-layout-background' theme='light'>\n\n            \n\n            <Title level={2} style={{ margin: '0,5em auto', padding: '0.2em 1em'}}>Select list size</Title>\n            <ListSizeSlider />\n            {running === 'stopped' || running === 'finished' || running === 'waiting' ? \n              <Button type='primary' block size='large' style={{\n                  margin: '1em auto',\n                }}\n                onClick={startVisualization}\n              >Visualize</Button> :\n              <Button type='primary' block size='large' style={{\n                  margin: '1em auto'\n                }}\n                onClick={stopVisualization}\n              >Stop visualization</Button>\n            }\n            <Divider>Select sorting algorithm</Divider>\n            {/*Menu for selecting sorting algorithm*/}\n            <Menu\n              mode=\"inline\"\n              style={{ borderRight: 0 }}\n              defaultOpenKeys={['slider', 'sub2']}\n              defaultSelectedKeys={[algorithmOptions[0]]}\n              onClick={menuOnClick}\n            >\n              {algorithmOptions.map(a => \n                <Menu.Item\n                  key={a}\n                  disabled={running === 'running' ? true : false}\n                >{a}</Menu.Item>  \n              )}\n            </Menu>\n            \n          </Sider>\n          <Layout style={{ padding: '0 10em em'}}>\n            <Content className=\"site-layout-content\"\n              style={{\n                padding: 24,\n                margin: 0,\n              }}>\n              <Bars />\n              <Divider />\n              <Skeleton />\n              <Skeleton />\n            </Content>\n          </Layout>\n        </Layout>\n        <Footer style={{ textAlign: 'center'}}>AlgoVis algorithm visualizer @2020 Created by Jere Salmensaari</Footer>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport 'antd/dist/antd.css'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}