{"version":3,"sources":["Components/Visualization/Bar.tsx","utils/calculateBoundingBoxes.ts","Components/Visualization/AnimateBars.tsx","hooks/index.ts","Components/Bars.tsx","store/list/types.ts","store/list/actions.ts","constants.ts","services/AlgorithmRunner/types.ts","services/lists.ts","store/list/listReducer.ts","store/currentNumber/types.ts","store/currentNumber/actions.ts","store/currentNumber/currentNumberReducer.ts","store/running/types.ts","store/running/actions.ts","store/running/runningReducer.ts","store/index.ts","utils/index.ts","Components/ListSizeSlider.tsx","Algorithms/bubbleSort.ts","Algorithms/quickSort.ts","Algorithms/bogoSort.ts","Algorithms/insertionSort.ts","Algorithms/stalinSort.ts","Algorithms/mergeSort.ts","services/AlgorithmRunner/algorithmRunner.ts","Components/AlgorithmSider.tsx","App.tsx","index.tsx"],"names":["Bar","React","forwardRef","props","ref","normal","main","sub","style","height","maxHeight","width","background","area","barStyle","zIndex","borderStyle","borderWidth","borderColor","margin","opacity","displayName","calculateBoundingBoxes","children","boundingBoxes","Children","forEach","child","current","nodeBoundingBox","getBoundingClientRect","key","AnimateBars","useState","boundingBox","setBoundingBox","prevBoundingBox","setPrevBoundingBox","prevChildren","value","prevChildrenRef","useRef","useEffect","usePrevious","useLayoutEffect","newBoundingBox","Object","keys","length","domNode","firstBox","lastBox","changeInX","left","requestAnimationFrame","transform","transition","Bars","componentWidth","listSize","useSelector","state","numberList","size","list","selected","currentNumber","display","map","b","i","barRef","createRef","start","end","ADD_LIST","CHANGE_SIZE","setNewAction","type","payload","apiBaseUrl","AlgorithmTypes","baseDelay","fetchNew","a","axios","get","data","initialState","fetchNewList","dispatch","listService","newList","reducer","action","SET_CURRENT","SET_MAIN","SET_SUB","REMOVE_CURRENT","REMOVE_SUB","SET_AREA","setMainAction","setSubAction","removeCurrentAction","removeSubAction","setAreaAction","SET_RUNNING","SET_STOPPED","SET_FINISHED","SET_WAITING","setFinishedAction","setWaiting","rootReducer","combineReducers","listReducer","currentNumberReducer","running","runningStateReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","isRunning","getState","wait","ms","Promise","resolve","setTimeout","ListSizeSlider","useDispatch","sliderValue","setSliderValue","min","max","onChange","isNaN","Number","onAfterChange","changeListSize","tipFormatter","disabled","timeoutLoop","loop","bubbleSort","partition","A","low","high","pivot","j","sort","p","quickSort","rerun","_","shuffle","bogoSort","insertionSort","index","filter","v","stalinSort","merge","arr","baseIndex","newArr","halfOfLength","Math","floor","slice","leftArr","indexOf","rightArr","leftIndex","rightIndex","push","rtrArr","mergeSort","runAlgorithm","Title","Typography","Sider","Layout","AlgorithmSider","algorithmOptions","values","selectedAlgorithm","setSelectedAlgorithm","collapse","setCollapsed","startVisualization","className","theme","collapsedWidth","onCollapse","collapsed","console","log","breakpoint","onBreakpoint","level","padding","block","onClick","mode","borderRight","defaultOpenKeys","defaultSelectedKeys","event","checkIfNotWaiting","Item","Header","Footer","Content","App","loading","setLoading","componentRef","myRef","getDimensions","offsetWidth","offsetHeight","dimensions","setDimensions","handleResize","window","addEventListener","removeEventListener","useContainerDimensions","id","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd812677.chunk.js","sourcesContent":["import React, { MutableRefObject } from 'react'\n\ntype Props = {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\ntype Ref = HTMLDivElement\n\ninterface Bar {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\n// Renders a bar to represent a number in the list\nconst Bar: React.FC<Bar> = React.forwardRef<Ref, Props>((props: Props, ref) => {\n\n  const normal = !props.main && !props.sub\n  const maxHeight = 40\n  const style = {\n    height: `${maxHeight+1}em`,\n    width: `${props.width}%`,\n    background: props.area ? \"rgb(170, 182, 193, 0.6)\" : 'transparent',\n    \n  }\n  const barStyle = {\n    height: `${maxHeight*props.height}em`,\n    maxHeight: `${maxHeight}em`,\n    width: 'auto',\n    background: normal ? '#f0f2f5' : props.main ? '#FF7A32' : \n    props.sub ? '#2EF550' : '#f0f2f5',\n    zIndex: 50,\n    borderStyle: 'solid',\n    borderWidth: '0.2em',\n    borderColor: '#1890ff',//'#f0f2f5',\n    margin: '0.1em',\n    opacity: '100%'\n  }\n\n  return (\n    <div style={style} >\n      <div style={barStyle} ref={ref} />\n    </div>\n  )\n})\n\n// Eslint is being a douche\nBar.displayName = 'Bar'\n\nexport default Bar\n","/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Calculates the bounding boxes of elements given to it\n*/\n\nimport React, { ReactChildren } from 'react'\n\nimport { AnimationChild, AnimationChildren, DOMRectDict } from '../types'\n\nconst calculateBoundingBoxes = (children: AnimationChildren): DOMRectDict | null => {\n  const boundingBoxes: DOMRectDict = {}\n\n  React.Children.forEach(children, (child: AnimationChild) => {\n    if (!child.ref.current)\n      return null\n    const domNode = child.ref.current\n    const nodeBoundingBox = domNode.getBoundingClientRect()\n\n\n    boundingBoxes[child.key] = nodeBoundingBox\n  })\n\n  return boundingBoxes\n}\n\nexport default calculateBoundingBoxes","\n/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Used to animate changing bar positions\n*/\n\nimport React, { useState, useEffect, useLayoutEffect, ReactChildren } from 'react'\nimport { usePrevious } from '../../hooks'\nimport calculateBoundingBoxes from '../../utils/calculateBoundingBoxes'\n\nimport { AnimationChild, DOMRectDict } from '../../types'\n\nconst AnimateBars: React.FC<any> = ({ children }: { children: any}) => {\n  const [boundingBox, setBoundingBox] = useState<DOMRectDict | null>({})\n  const [prevBoundingBox, setPrevBoundingBox] = useState<DOMRectDict | null>({})\n  const prevChildren = usePrevious(children)\n\n  // Fix bounding boxes updating when list size updates\n  useLayoutEffect(() => {\n    const newBoundingBox = calculateBoundingBoxes(children)\n    setBoundingBox(newBoundingBox)\n  }, [children])\n\n  useLayoutEffect(() => {\n    const prevBoundingBox = calculateBoundingBoxes(prevChildren)\n    setPrevBoundingBox(prevBoundingBox)\n  }, [prevChildren])\n\n  useEffect(() => {\n    if (!prevBoundingBox || !boundingBox || Object.keys(prevBoundingBox).length < Object.keys(boundingBox).length)\n      return\n\n    const hasPrevBoundingBox = Object.keys(prevBoundingBox).length\n\n    if (hasPrevBoundingBox) {\n      React.Children.forEach(children, (child: AnimationChild) => {\n        const domNode = child.ref.current\n        const firstBox = prevBoundingBox[child.key]\n        const lastBox = boundingBox[child.key]\n        if (!firstBox || !lastBox)\n          return\n\n        const changeInX = firstBox.left - lastBox.left\n\n\n        if (changeInX) {\n          requestAnimationFrame(() => {\n            // Before DOM paints, invert child to old position\n            // Maybe longer animation time?\n            // Reduce speed of sorting so the animation shows\n            domNode.style.transform = `translateX(${changeInX}px)`\n            domNode.style.transition = `transform 0ms`\n\n            requestAnimationFrame(() => {\n              // After previous frame, remove the transition to play the animation\n              domNode.style.transform = ''\n              domNode.style.transition = 'transform 200ms'\n            })\n          })\n        }\n      })\n    }\n  }, [boundingBox, prevBoundingBox, children])\n\n  return children\n\n}\n\nexport default AnimateBars\n","import { useState, useEffect, useRef} from 'react'\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport const useContainerDimensions = (myRef: React.MutableRefObject<HTMLDivElement | null>): Dimensions => {\n  const getDimensions = (): Dimensions => ({\n    width: myRef.current?.offsetWidth || 0,\n    height: myRef.current?.offsetHeight || 0\n  })\n\n  const [dimensions, setDimensions] = useState<Dimensions>({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current)\n      setDimensions(getDimensions())\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [myRef])\n\n  return dimensions\n\n}\n\n// https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n// Used to get the previous value of an object\nexport const usePrevious = (value: any): any => {\n  const prevChildrenRef = useRef()\n\n  useEffect(() => {\n    prevChildrenRef.current = value\n  }, [value])\n\n  return prevChildrenRef.current\n}","import React, { useState, useEffect, createRef } from 'react'\n\nimport Bar from './Visualization/Bar'\n\nimport { useSelector } from 'react-redux'\n\nimport { RootState, CurrentNumberState } from '../store'\n\nimport AnimateBars from './Visualization/AnimateBars'\n\ninterface Props {\n  componentWidth: number;\n}\n\n// wery much in progress\n// Maybe\n// https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba\n// https://codesandbox.io/s/reorder-elements-with-slide-transition-and-react-hooks-flip-211f2?from-embed\nconst Bars: React.FC<Props> = ({componentWidth}: { componentWidth: number } ) => {\n  const listSize: number = useSelector((state: RootState) => state.numberList.size)\n  const list: number[] = useSelector((state: RootState) => state.numberList.list)\n  const selected: CurrentNumberState = useSelector((state: RootState) => state.currentNumber)\n  \n  const width: number = 100/listSize * componentWidth/listSize \n\n  return (\n    <div style={{ display: 'flex' }}>\n      <AnimateBars>\n        {\n          list.map((b, i) => {\n            const barRef = createRef<HTMLDivElement>()\n            return <Bar key={b} width={width} height={b/listSize} area={i >= selected.area.start && i <= selected.area.end}\n            // Fix types here\n            // @ts-expect-error\n              main={i === selected.main} sub={i === selected.sub} ref={barRef} // Ref is null for some reason\n            />\n        })}\n      </AnimateBars>\n    </div>\n  )\n}\n\nexport default Bars","export interface ListState {\n  list: number[];\n  size: number;\n}\n\nexport const ADD_LIST = 'ADD_LIST'\nexport const CHANGE_SIZE = 'CHANGE_SIZE'\n\ninterface SetList {\n  type: typeof ADD_LIST;\n  payload: number[];\n}\n\ninterface ChangeListSize {\n  type: typeof CHANGE_SIZE;\n  payload: number;\n}\n\nexport type ListActionType = SetList | ChangeListSize","import {\n  ListActionType,\n  ADD_LIST,\n  CHANGE_SIZE,\n} from './types'\n\n\nexport const setNewAction = (list: number[]): ListActionType => {\n  return {\n    type: ADD_LIST,\n    payload: list\n  }\n}\n\nexport const changeListSizeAction = (size: number): ListActionType => {\n  return {\n    type: CHANGE_SIZE,\n    payload: size\n  }\n}","\nlet apiBaseUrl = ''\n// eslint-disable-next-line\nif (process.env.NODE_ENV === 'development')\n  apiBaseUrl = 'http://localhost:3001/api'\nelse\n  apiBaseUrl = '/api'\n\nconst baseDelay = 250\n\nexport { apiBaseUrl, baseDelay }","export const BubbleSort = 'BubbleSort'\nexport const QuickSort = 'QuickSort'\nexport const BogoSort = 'BogoSort'\nexport const InsertionSort = 'InsertionSort'\nexport const StalinSort = 'StalinSort'\nexport const MergeSort = 'MergeSort'\n\nexport enum AlgorithmTypes {\n  BubbleSort = 'BubbleSort',\n  InsertionSort = 'InsertionSort',\n  MergeSort = 'MergeSort',\n  QuickSort = 'QuickSort',\n  BogoSort = 'BogoSort',\n  StalinSort = 'StalinSort',\n  \n}\n\nexport type Algorithms = typeof BubbleSort | typeof QuickSort | typeof BogoSort | typeof InsertionSort\n  | typeof StalinSort | typeof MergeSort\n\n","import axios from 'axios'\nimport { apiBaseUrl } from '../constants'\n\nconst fetchNew = async (size: number): Promise<number[]> => {\n  const { data: list } = await axios.get<number[]>(`${apiBaseUrl}/list?size=${size}`)\n  return list\n}\n\nexport default { fetchNew }","import {\n  ListState,\n  ListActionType,\n  ADD_LIST,\n  CHANGE_SIZE\n} from './types'\nimport { setNewAction, changeListSizeAction } from './actions'\nimport { AppType } from '../'\n\nimport listService from '../../services/lists'\n\nconst initialState: ListState = {\n  list: [],\n  size: 25\n}\n\nexport const fetchNewList = (listSize: number): AppType => async dispatch => {\n  const newList: number[] = await listService.fetchNew(listSize)\n  dispatch(setNewAction(newList))\n}\n\nexport const changeListSize = (listSize: number): AppType => async dispatch => {\n  dispatch(changeListSizeAction(listSize))\n}\n\nconst reducer = (state = initialState, action: ListActionType): ListState => {\n  switch (action.type) {\n  case ADD_LIST:\n\n    return {\n      list: [...action.payload],\n      size: state.size\n    }\n  case CHANGE_SIZE:\n    return {\n      ...state,\n      size: action.payload\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","export interface CurrentNumberState {\n  main: number;\n  sub: number | null;\n  area: {\n    start: number;\n    end: number;\n  }\n}\n\nexport const SET_CURRENT = 'SET_CURRENT'\n\nexport const SET_MAIN = 'SET_MAIN'\n\nexport const SET_SUB = 'SET_SUB'\n\nexport const REMOVE_CURRENT = 'REMOVE_CURRENT'\n\nexport const REMOVE_SUB = 'REMOVE_SUB'\n\nexport const SET_AREA = 'SET_AREA'\n\ninterface SetCurrentAction {\n  type: typeof SET_CURRENT;\n  payload: {\n    main: number;\n    sub: number | null;\n  };\n}\n\ninterface SetMainAction {\n  type: typeof SET_MAIN;\n  payload: {\n    main: number;\n  };\n}\n\ninterface SetSubAction {\n  type: typeof SET_SUB;\n  payload: {\n    sub: number;\n  };\n}\n\ninterface RemoveCurrentAction {\n  type: typeof REMOVE_CURRENT;\n}\n\ninterface RemoveSubAction {\n  type: typeof REMOVE_SUB;\n}\n\ninterface SetAreaAction {\n  type: typeof SET_AREA;\n  payload: {\n    start: number,\n    end: number\n  }\n}\n\nexport type CurrentNumberActionType = SetCurrentAction | SetMainAction | SetSubAction | RemoveCurrentAction | \n  RemoveSubAction | SetAreaAction","import { CurrentNumberActionType, SET_CURRENT, SET_MAIN, SET_SUB, REMOVE_CURRENT, REMOVE_SUB, SET_AREA } from './types'\n\nexport const setCurrentAction = (main: number, sub?: number | null): CurrentNumberActionType => {\n  return {\n    type: SET_CURRENT,\n    payload: {\n      main: main,\n      sub: sub || null\n    }\n  }\n}\n\nexport const setMainAction = (main: number): CurrentNumberActionType => {\n  return {\n    type: SET_MAIN,\n    payload: {\n      main: main,\n    }\n  }\n}\n\nexport const setSubAction = (sub: number): CurrentNumberActionType => {\n  return {\n    type: SET_SUB,\n    payload: {\n      sub: sub\n    }\n  }\n}\n\nexport const removeCurrentAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_CURRENT\n  }\n}\n\nexport const removeSubAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_SUB\n  }\n}\n\nexport const setAreaAction = (start: number, end: number): CurrentNumberActionType => {\n  return {\n    type: SET_AREA,\n    payload: {\n      start: start,\n      end: end\n    }\n  }\n}","import {\n  CurrentNumberState,\n  CurrentNumberActionType,\n  SET_CURRENT,\n  SET_MAIN,\n  SET_SUB,\n  REMOVE_CURRENT,\n  REMOVE_SUB,\n  SET_AREA\n} from './types'\nimport {\n  setCurrentAction,\n  setMainAction,\n  setSubAction,\n  removeCurrentAction,\n  removeSubAction,\n  setAreaAction\n} from './actions'\nimport { AppType } from '../'\n\nconst initialState: CurrentNumberState = {\n  main: -1,\n  sub: null,\n  area: {\n    start: -1,\n    end: -1\n  }\n}\n\nexport const setCurrent = (main: number, sub: number | null): AppType => async dispatch => {\n  dispatch(setCurrentAction(main, sub))\n}\n\nexport const setMain = (main: number): AppType => async dispatch => {\n  dispatch(setMainAction(main))\n}\n\nexport const setSub = (sub: number): AppType => async dispatch => {\n  dispatch(setSubAction(sub))\n}\n\nexport const removeCurrent = (): AppType => async dispatch => {\n  dispatch(removeCurrentAction())\n}\n\nexport const removeSub = (): AppType => async dispatch => {\n  dispatch(removeSubAction())\n}\n\nconst reducer = (state = initialState, action: CurrentNumberActionType): CurrentNumberState => {\n  switch(action.type) {\n  case SET_CURRENT:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: action.payload.sub\n    }\n  case SET_MAIN:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: state.sub\n    }\n  case SET_SUB:\n    return {\n      ...state,\n      main: state.main,\n      sub: action.payload.sub\n    }\n  case REMOVE_CURRENT:\n    return {\n      ...state,\n      main: -1\n    }\n  case REMOVE_SUB:\n    return {\n      ...state,\n      sub: null\n    }\n  case SET_AREA:\n    return {\n      ...state,\n      area: {\n        start: action.payload.start,\n        end: action.payload.end\n      }\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","export type runningType = 'running' | 'stopped' | 'finished' | 'waiting'\n\nexport const SET_RUNNING = 'SET_RUNNING'\n\nexport const SET_STOPPED = 'SET_STOPPED'\n\nexport const SET_FINISHED = 'SET_FINISHED'\n\nexport const SET_WAITING = 'SET_WAITING'\n\ninterface SetRunning {\n  type: typeof SET_RUNNING;\n}\n\ninterface SetStopped {\n  type: typeof SET_STOPPED;\n}\n\ninterface SetFinished {\n  type: typeof SET_FINISHED;\n}\n\ninterface SetWaiting {\n  type: typeof SET_WAITING;\n}\n\nexport type RunningStateAction = SetRunning | SetStopped | SetFinished | SetWaiting","import {\n  RunningStateAction,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\n\nexport const setRunningAction = (): RunningStateAction => {\n  return {\n    type: SET_RUNNING\n  }\n}\n\nexport const setStoppedAction = (): RunningStateAction => {\n  return {\n    type: SET_STOPPED\n  }\n}\n\nexport const setFinishedAction = (): RunningStateAction => {\n  return {\n    type: SET_FINISHED\n  }\n}\n\nexport const setWaitingAction = (): RunningStateAction => {\n  return {\n    type: SET_WAITING\n  }\n}","import {\n  RunningStateAction,\n  runningType,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\nimport {\n  setRunningAction,\n  setStoppedAction,\n  setFinishedAction,\n  setWaitingAction\n} from './actions'\n\nimport { AppType } from '..'\n\nconst initialState: runningType = 'waiting'\n\nexport const setRunning = (): AppType => async dispatch => {\n  dispatch(setRunningAction())\n}\n\nexport const setStopped = (): AppType => async dispatch => {\n  dispatch(setStoppedAction())\n}\n\nexport const setFinished = (): AppType => async dispatch => {\n  dispatch(setFinishedAction())\n}\n\nexport const setWaiting = (): AppType => async dispatch => {\n  dispatch(setWaitingAction())\n}\n\nconst reducer = (state = initialState, action: RunningStateAction) => {\n  switch (action.type){\n  case SET_RUNNING:\n    return 'running'\n  case SET_STOPPED:\n    return 'stopped'\n  case SET_FINISHED:\n    return 'finished'\n  case SET_WAITING:\n    return 'waiting'\n  default:\n    return state\n  }\n}\n\nexport default reducer","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { Action } from 'redux'\nimport thunk, { ThunkAction } from 'redux-thunk'\nimport listReducer from './list/listReducer'\nimport currentNumberReducer from './currentNumber/currentNumberReducer'\nimport runningStateReducer from './running/runningReducer'\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst rootReducer = combineReducers({\n  numberList: listReducer,\n  currentNumber: currentNumberReducer,\n  running: runningStateReducer\n})\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(\n      thunk\n    )\n  )\n)\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport * from './currentNumber/types'\nexport * from './list/types'\nexport * from './running/types'\n\nexport type AppType<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n\nexport default store","import state from '../store'\nimport { runningType } from '../store/running/types'\n\nexport const isRunning = (): runningType => {\n  const running = state.getState().running\n  switch (running) {\n  case 'running':\n    return 'running'\n  case 'finished':\n    return 'finished'\n  default:\n    return 'stopped'\n  }\n}\n\nexport const wait = async (ms: number): Promise<void> => await new Promise(resolve => setTimeout(resolve, ms))\n","import React, { useState, useEffect } from 'react'\nimport { Slider } from 'antd'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\n\nimport { fetchNewList, changeListSize } from '../store/list/listReducer'\n\nimport { isRunning } from '../utils'\nimport { setWaiting } from '../store/running/runningReducer'\n\n\nconst ListSizeSlider: React.FC = () => {\n  const dispatch = useDispatch()\n\n  const [sliderValue, setSliderValue] = useState(20)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  useEffect(() => {\n    dispatch(fetchNewList(listSize))\n    dispatch(setWaiting())\n  }, [listSize])\n\n  const onSliderChange = (value: any) => {\n    if (typeof value !== 'number' || isNaN(Number(value)))\n      return\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > 40)\n      value = 40\n    dispatch(changeListSize(value))\n  }\n\n  return (\n    <div>\n      <Slider\n        min={3}\n        max={40}\n        onChange={onSliderChange}\n        onAfterChange={setNewListSize}\n        value={typeof sliderValue === 'number' ? sliderValue : 20}\n        tipFormatter={null}\n        disabled={isRunning() === 'running'}\n      />\n    </div>\n  )\n}\n\nexport default ListSizeSlider","import { removeCurrentAction, removeSubAction, setMainAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst timeoutLoop = (i: number, loop: number): void => {\n\n  const list: number[] = [...store.getState().numberList.list]\n\n  setTimeout(() => {\n    if (isRunning() === 'stopped') {\n      store.dispatch(removeCurrentAction())\n      return\n    }\n    if (list[i] > list[i + 1]) {\n      [list[i], list[i + 1]] = [list[i + 1], list[i]]\n      store.dispatch(setNewAction(list))\n    }\n    i++\n    store.dispatch(setMainAction(i))\n    if (i === (loop-1)) {\n      timeoutLoop(-1, loop - 1)\n    }else if (loop === 0) {\n      store.dispatch(removeCurrentAction())\n      store.dispatch(removeSubAction())\n      store.dispatch(setFinishedAction())\n    }else  {\n      timeoutLoop(i, loop)\n    }\n  }, baseDelay)\n}\n\nexport const bubbleSort = (): void => {\n  const list: number[] = [...store.getState().numberList.list]\n  const i = 0\n  store.dispatch(setMainAction(0))\n  timeoutLoop(i, list.length)\n}","import {\n  setMainAction, setSubAction, removeCurrentAction, removeSubAction, setAreaAction\n} from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst partition = async (A: number[], low: number, high: number): Promise<number> => {\n  const list: number[] = [...A]\n  const pivot: number = list[high]\n  store.dispatch(setMainAction(high))\n  store.dispatch(setAreaAction(low, high))\n  let i = low\n\n  if (!pivot)\n    return -1\n  for (let j = low; j < high; j++) {\n    if (isRunning() === 'stopped')\n      return -1\n    store.dispatch(setSubAction(j))\n\n    await wait(baseDelay) // Wait for given amount of ms\n\n    if (list[j] < pivot) {\n      [list[i], list[j]] = [list[j], list[i]]\n      store.dispatch(setNewAction(list))\n      i++\n    }\n  }\n  [list[i], list[high]] = [list[high], list[i]]\n  store.dispatch(setNewAction(list))\n  return i\n}\n\nconst sort = async (low: number, high: number): Promise<void> => {\n  if (isRunning() === 'stopped')\n    return\n\n  const list = [...store.getState().numberList.list]\n  if (low < high) {\n    const p: number = await partition(list, low, high)\n\n    if (p === -1)\n      return\n    await sort(low, p - 1)\n    await sort(p + 1, high)\n  }\n\n}\n\nexport const quickSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(0, list.length-1)\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setAreaAction(-1, -1))\n  if (isRunning() === 'running')\n    store.dispatch(setFinishedAction())\n\n}","import { setMainAction, removeCurrentAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport { setNewAction } from '../store/list/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport _ from 'lodash'\nimport { baseDelay } from '../constants'\n\n\nconst sort = async (): Promise<void> => {\n  const list: number[] = [...store.getState().numberList.list]\n  const listSize: number = store.getState().numberList.size\n  let rerun = false\n\n  for (let i = 1; i < listSize - 1; i++) {\n    store.dispatch(setMainAction(i-1))\n    await wait(baseDelay)\n    if (isRunning() === 'stopped')\n      return\n    store.dispatch(setMainAction(i))\n    if (list[i] < list[i - 1]) {\n      rerun = !rerun\n      break\n    }\n  }\n\n  if (rerun) {\n    store.dispatch(setNewAction(_.shuffle(list)))\n    store.dispatch(setMainAction(-1))\n    await wait(300)\n    return await sort()\n  }\n  store.dispatch(setFinishedAction())\n  return\n}\n\nexport const bogoSort = async (): Promise<void> => {\n  store.dispatch(setMainAction(-1))\n  await sort()\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n\n}","import { setMainAction, removeCurrentAction, setSubAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport { baseDelay } from '../constants'\n\n\nconst sort = async (list: number[]): Promise<void> => {\n  for (let i = 1; i < list.length; i++) {\n    if (isRunning() === 'stopped')\n      return\n      \n    await wait(baseDelay)\n\n    store.dispatch(removeSubAction())\n\n    store.dispatch(setMainAction(i-1))\n    await wait(baseDelay)\n    let j = i\n    store.dispatch(setMainAction(i))\n    while (j > 0 && list[j - 1] > list[j]) {\n      if (isRunning() === 'stopped')\n        return\n      \n      store.dispatch(setSubAction(j))\n      await wait(300);\n      store.dispatch(setSubAction(j - 1));\n      store.dispatch(removeCurrentAction());\n\n      [list[j], list[j - 1]] = [list[j - 1], list[j]]\n\n      store.dispatch(setNewAction([...list]))\n      \n      j--\n    }\n    \n  }\n\n}\n\nexport const insertionSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(list)\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setFinishedAction())\n}","import { setMainAction, removeCurrentAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport { setNewAction } from '../store/list/actions'\n\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport { baseDelay } from '../constants'\n\nconst sort = async (): Promise<void> => {\n  \n  if (!isRunning())\n    return\n\n  let index = 1;\n  do {\n    const list = store.getState().numberList.list\n    store.dispatch(setMainAction(index))\n    if (list.length <= 1)\n      return\n\n    if (index === list.length)\n      return\n\n    await wait(baseDelay)\n\n    if (list[index - 1] > list[index]) {\n      const newList = list.filter(v => v !== list[index]) \n      store.dispatch(setNewAction(newList))\n      continue\n    }\n    index++\n  } while(index > 0)\n\n}\n\nexport const stalinSort = async (): Promise<void> => {\n  store.dispatch(setMainAction(-1))\n  await sort()\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setFinishedAction())\n}","import {\n\tsetMainAction, setSubAction, removeCurrentAction, removeSubAction, setAreaAction\n} from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst merge = async (arr: number[], index: number): Promise<number[] | null> => {\n\tlet list = [...store.getState().numberList.list]\n\n\n\tif (arr.length === 1)\n\t\treturn arr\n\n\tconst baseIndex = index\n\n\tconst newArr: number[] = []\n\n\tconst halfOfLength: number = Math.floor(arr.length/2)\n\n\tconst leftArr: number[] | null = await merge(arr.slice(0, halfOfLength), index)\n\tconst rightArr: number[] | null = await merge(arr.slice(halfOfLength, arr.length), list.indexOf(arr[halfOfLength]))\n\n\tif (leftArr === null || rightArr === null)\n\t\treturn null\n\t\n\tlist = [...store.getState().numberList.list]\n\n\tlet leftIndex = 0\n\tlet rightIndex = 0\n\n\tstore.dispatch(setAreaAction(list.indexOf(leftArr[0]), list.indexOf(rightArr[rightArr.length-1])))\n\t\n\tdo {\n\t\tif (isRunning() === 'stopped') \n\t\t\treturn null\n\t\t\n\t\tstore.dispatch(setMainAction(index))\n\n\t\tstore.dispatch(setSubAction(list.indexOf(rightArr[rightIndex])))\n\t\tawait wait(baseDelay)\n\t\tif (leftIndex < leftArr.length && leftArr[leftIndex] < rightArr[rightIndex] || rightIndex === rightArr.length) {\n\t\t\tnewArr.push(leftArr[leftIndex])\n\t\t\tleftIndex++\n\t\t} else {\n\t\t\tnewArr.push(rightArr[rightIndex])\n\t\t\trightIndex++\n\t\t}\n\n\t\tconst rtrArr: number[] = [...newArr, ...leftArr.filter(v => newArr.indexOf(v) === -1), ...rightArr.filter(v => newArr.indexOf(v) === -1)]\n\t\t\n\t\tstore.dispatch(removeCurrentAction())\n\t\tstore.dispatch(removeSubAction())\n\t\tstore.dispatch(setNewAction(list.map(\n\t\t\t\t(v, i) => (i-baseIndex) >= 0 && (i-baseIndex) < rtrArr.length ?\n\t\t\t\trtrArr[i-baseIndex] : v\n\t\t\t)\n\t\t\t))\n\n\t\tindex++\n\n\t} while (leftIndex < leftArr.length || rightIndex < rightArr.length)\n\n\treturn newArr\n}\n\nconst sort = async (): Promise<void> => {\n\tconst list = [...store.getState().numberList.list]\n\n\tif (isRunning() === 'stopped') \n\t\treturn\n\n\tawait merge(list, 0)\n\t\n}\n\nexport const mergeSort = async (): Promise<void> => {\n\tawait sort()\n\tstore.dispatch(removeCurrentAction())\n\tstore.dispatch(removeSubAction())\n\tstore.dispatch(setAreaAction(-1, -1))\n\tstore.dispatch(setFinishedAction())\n}","import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  InsertionSort,\n  StalinSort,\n  MergeSort,\n  Algorithms\n} from './types'\n\nimport * as a from '../../Algorithms'\n\nexport const runAlgorithm = async (type: Algorithms) => {\n  switch (type) {\n  case BubbleSort:\n    return await a.bubbleSort()\n  case QuickSort:\n    return await a.quickSort()\n  case BogoSort:\n    return await a.bogoSort()\n  case InsertionSort:\n    return await a.insertionSort()\n  case StalinSort:\n    return await a.stalinSort()\n  case MergeSort:\n    return await a.mergeSort()\n  default:\n    return\n  }\n}","import React, { useState } from 'react'\nimport {\n  Layout,\n  Typography,\n  Menu,\n  Button,\n  Divider\n} from 'antd'\n\nconst { Title } = Typography\nconst { Sider } = Layout\n\nimport ListSizeSlider from '../Components/ListSizeSlider'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setStopped, setRunning, setWaiting } from '../store/running/runningReducer'\n\nimport {\n  runAlgorithm,\n  Algorithms,\n  AlgorithmTypes\n} from '../services/AlgorithmRunner'\nimport { RootState } from '../store'\nimport { fetchNewList } from '../store/list/listReducer'\n\nconst AlgorithmSider: React.FC = () => {\n\n  const algorithmOptions: string[] = Object.values(AlgorithmTypes) as string[]\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<string>(algorithmOptions[0])\n\n  const [collapse, setCollapsed] = useState<boolean>(false)\n\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished')\n      await dispatch(fetchNewList(listSize))\n\n    dispatch(setRunning())\n    const selected: Algorithms =  selectedAlgorithm as Algorithms\n    await runAlgorithm(selected)\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n    \n  }\n\n  const menuOnClick = (event: any)  => {\n    const checkIfNotWaiting = async () => {\n      if (running !== 'waiting') {\n        await dispatch(fetchNewList(listSize))\n        dispatch(setWaiting())\n      }\n    }\n\n    checkIfNotWaiting()\n\n    setSelectedAlgorithm(event.key)\n  }\n\n  const toggleCollapsed = (collapsed: any, type: any) => {\n    setCollapsed(collapsed)\n    console.log(collapsed)\n    console.log(type)\n    \n  }\n\n  return (\n    <>\n      {/*<Button style={{ display: 'block'}} onClick={toggleCollapsed} >Yeetus</Button>*/}\n      <Sider\n        width={'19em'} className='site-layout-background' theme='light'\n         collapsedWidth=\"0\" onCollapse={toggleCollapsed} breakpoint=\"lg\"\n        onBreakpoint={(breakpoint: any) => console.log(breakpoint)}\n      >\n        {\n          !collapse ?\n          <div>\n            <Title level={2} style={{ margin: '0,5em auto', padding: '0.2em 1em' }}>Select list size</Title>\n            <ListSizeSlider />\n            {running === 'stopped' || running === 'finished' || running === 'waiting' ?\n              <Button type='primary' block size='large' style={{\n                margin: '1em auto',\n              }}\n              onClick={startVisualization}\n              >Visualize</Button> :\n              <Button type='primary' block size='large' style={{\n                margin: '1em auto'\n              }}\n              onClick={stopVisualization}\n              >Stop visualization</Button>\n            }\n            <Divider>Select sorting algorithm</Divider>\n            {/*Menu for selecting sorting algorithm*/}\n            <Menu\n              mode=\"inline\"\n              style={{ borderRight: 0 }}\n              defaultOpenKeys={['slider', 'sub2']}\n              defaultSelectedKeys={[algorithmOptions[0]]}\n              onClick={menuOnClick}\n            >\n              {algorithmOptions.map(a =>\n                <Menu.Item\n                  key={a}\n                  disabled={running === 'running' ? true : false}\n                >{a}</Menu.Item>\n              )}\n            </Menu>\n          </div> :\n          null\n        }\n\n      </Sider>\n    </>\n  )\n}\n\nexport default AlgorithmSider","import React, { useRef, useEffect, useState} from 'react'\nimport {\n  Layout,\n  Menu,\n  Skeleton,\n  Divider\n} from 'antd'\n\nconst { Header, Footer, Content } = Layout\n\nimport Bars from './Components/Bars'\nimport AlgorithmSider from './Components/AlgorithmSider'\n\n// Figure out webworkers at some point maybe?\n//import SortWorker from 'comlink-loader!./worker'\n\nimport { useContainerDimensions } from './hooks'\n\nconst App: React.FC = () => {\n\n  const [loading, setLoading] = useState<boolean>(false)\n  const componentRef = useRef<HTMLDivElement>(null)\n  const { width } = useContainerDimensions(componentRef)\n\n\n  useEffect(() => {\n    if (loading === false) {\n      setTimeout(() => {\n        setLoading(false)\n      }, 500)\n      setLoading(true)\n    }\n    \n  }, [width])\n\n  return (\n    <div>\n      <Layout>\n        <Header className='header'>\n          <div />\n          <Menu theme='dark' mode='horizontal' defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\">AlgoVis</Menu.Item>\n          </Menu>\n        </Header>\n        <Layout style={{ margin: '0 5em 0 5em' }}>\n\n          <AlgorithmSider />\n\n          <Layout style={{ padding: '0 10em em' }}>\n            <Content className=\"site-layout-content\" id='container'\n                style={{\n                  padding: 24,\n                  margin: 0,\n                }}\n              >\n              <div ref={componentRef}>\n                {\n                  loading ? <Skeleton/> :\n                    <Bars componentWidth={width} />\n                }\n                <Divider />\n                <Skeleton />\n                <Skeleton />\n              </div>\n            </Content>\n          </Layout>\n        </Layout>\n        <Footer style={{ textAlign: 'center' }}>AlgoVis algorithm visualizer @2020 Created by Jere Salmensaari</Footer>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport 'antd/dist/antd.css'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}