{"version":3,"sources":["Components/Visualization/Bar.tsx","utils/calculateBoundingBoxes.ts","Components/Visualization/AnimateBars.tsx","hooks/index.ts","Components/Bars.tsx","store/list/types.ts","store/list/actions.ts","constants.ts","services/lists.ts","services/AlgorithmRunner/types.ts","store/list/listReducer.ts","store/currentNumber/types.ts","store/currentNumber/actions.ts","store/currentNumber/currentNumberReducer.ts","store/running/types.ts","store/running/actions.ts","store/running/runningReducer.ts","store/index.ts","utils/index.ts","Components/ListSizeSlider.tsx","Algorithms/bubbleSort.ts","Algorithms/quickSort.ts","Algorithms/bogoSort.ts","Algorithms/insertionSort.ts","services/AlgorithmRunner/algorithmRunner.ts","App.tsx","index.tsx"],"names":["Bar","React","forwardRef","props","ref","style","height","maxHeight","width","background","main","sub","zIndex","borderStyle","borderWidth","borderColor","displayName","calculateBoundingBoxes","children","boundingBoxes","Children","forEach","child","current","nodeBoundingBox","getBoundingClientRect","key","AnimateBars","useState","boundingBox","setBoundingBox","prevBoundingBox","setPrevBoundingBox","prevChildren","value","prevChildrenRef","useRef","useEffect","usePrevious","useLayoutEffect","newBoundingBox","Object","keys","length","domNode","firstBox","lastBox","changeInX","left","requestAnimationFrame","transform","transition","Bars","componentWidth","listSize","useSelector","state","numberList","size","list","selected","currentNumber","display","map","b","i","barRef","createRef","ADD_LIST","CHANGE_SIZE","setNewAction","type","payload","apiBaseUrl","AlgorithmTypes","fetchNew","a","axios","get","data","initialState","fetchNewList","dispatch","listService","newList","reducer","action","SET_CURRENT","SET_MAIN","SET_SUB","REMOVE_CURRENT","REMOVE_SUB","setMainAction","setSubAction","removeCurrentAction","removeSubAction","SET_RUNNING","SET_STOPPED","SET_FINISHED","SET_WAITING","setFinishedAction","rootReducer","combineReducers","listReducer","currentNumberReducer","running","runningStateReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","isRunning","getState","wait","ms","Promise","resolve","setTimeout","ListSizeSlider","useDispatch","sliderValue","setSliderValue","min","max","onChange","isNaN","Number","onAfterChange","changeListSize","tipFormatter","disabled","timeoutLoop","loop","bubbleSort","partition","A","low","high","pivot","j","sort","p","quickSort","rerun","_","shuffle","bogoSort","insertionSort","runAlgorithm","Title","Typography","Header","Layout","Footer","Sider","Content","App","algorithmOptions","values","selectedAlgorithm","setSelectedAlgorithm","componentRef","myRef","getDimensions","offsetWidth","offsetHeight","dimensions","setDimensions","handleResize","window","addEventListener","removeEventListener","useContainerDimensions","startVisualization","className","theme","mode","defaultSelectedKeys","Item","margin","level","padding","block","onClick","borderRight","defaultOpenKeys","event","checkIfNotWaiting","id","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11f882b7.chunk.js","sourcesContent":["import React, { MutableRefObject } from 'react'\n\ntype Props = {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n}\n\ntype Ref = HTMLDivElement\n\ninterface Bar {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n}\n\n// Renders a bar to represent a number in the list\nconst Bar: React.FC<Bar> = React.forwardRef<Ref, Props>((props: Props, ref) => {\n  const maxHeight = 40\n  const style = {\n    height: `${maxHeight*props.height}em`,\n    maxHeight: `${maxHeight}em`,\n    width: `${props.width}%`,\n    background: props.main ? '#FF7A32' : props.sub ? '#2EF550' : '#1890ff',\n    zIndex: 50,\n    borderStyle: 'solid',\n    borderWidth: '1px',\n    borderColor: '#f0f2f5',\n  }\n\n  return <div style={style} ref={ref} />\n})\n\n// Eslint is being a douche\nBar.displayName = 'Bar'\n\nexport default Bar\n","/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Calculates the bounding boxes of elements given to it\n*/\n\nimport React, { ReactChildren } from 'react'\n\nimport { AnimationChild, AnimationChildren, DOMRectDict } from '../types'\n\nconst calculateBoundingBoxes = (children: AnimationChildren): DOMRectDict | null => {\n  const boundingBoxes: DOMRectDict = {}\n\n  React.Children.forEach(children, (child: AnimationChild) => {\n    if (!child.ref.current)\n      return null\n    const domNode = child.ref.current\n    const nodeBoundingBox = domNode.getBoundingClientRect()\n\n\n    boundingBoxes[child.key] = nodeBoundingBox\n  })\n\n  return boundingBoxes\n}\n\nexport default calculateBoundingBoxes","\n/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Used to animate changing bar positions\n*/\n\nimport React, { useState, useEffect, useLayoutEffect, ReactChildren } from 'react'\nimport { usePrevious } from '../../hooks'\nimport calculateBoundingBoxes from '../../utils/calculateBoundingBoxes'\n\nimport { AnimationChild, DOMRectDict } from '../../types'\n\nconst AnimateBars: React.FC<any> = ({ children }: { children: any}) => {\n  const [boundingBox, setBoundingBox] = useState<DOMRectDict | null>({})\n  const [prevBoundingBox, setPrevBoundingBox] = useState<DOMRectDict | null>({})\n  const prevChildren = usePrevious(children)\n\n  // Fix bounding boxes updating when list size updates\n  useLayoutEffect(() => {\n    const newBoundingBox = calculateBoundingBoxes(children)\n    setBoundingBox(newBoundingBox)\n  }, [children])\n\n  useLayoutEffect(() => {\n    const prevBoundingBox = calculateBoundingBoxes(prevChildren)\n    setPrevBoundingBox(prevBoundingBox)\n  }, [prevChildren])\n\n  useEffect(() => {\n    if (!prevBoundingBox || !boundingBox || Object.keys(prevBoundingBox).length < Object.keys(boundingBox).length)\n      return\n\n    const hasPrevBoundingBox = Object.keys(prevBoundingBox).length\n\n    if (hasPrevBoundingBox) {\n      React.Children.forEach(children, (child: AnimationChild) => {\n        const domNode = child.ref.current\n        const firstBox = prevBoundingBox[child.key]\n        const lastBox = boundingBox[child.key]\n        if (!firstBox || !lastBox)\n          return\n\n        const changeInX = firstBox.left - lastBox.left\n\n\n        if (changeInX) {\n          requestAnimationFrame(() => {\n            // Before DOM paints, invert child to old position\n            // Maybe longer animation time?\n            // Reduce speed of sorting so the animation shows\n            domNode.style.transform = `translateX(${changeInX}px)`\n            domNode.style.transition = `transform 0ms`\n\n            requestAnimationFrame(() => {\n              // After previous frame, remove the transition to play the animation\n              domNode.style.transform = ''\n              domNode.style.transition = 'transform 300ms'\n            })\n          })\n        }\n      })\n    }\n  }, [boundingBox, prevBoundingBox, children])\n\n  return children\n\n}\n\nexport default AnimateBars\n","import { useState, useEffect, useRef} from 'react'\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport const useContainerDimensions = (myRef: React.MutableRefObject<HTMLDivElement | null>): Dimensions => {\n  const getDimensions = (): Dimensions => ({\n    width: myRef.current?.offsetWidth || 0,\n    height: myRef.current?.offsetHeight || 0\n  })\n\n  const [dimensions, setDimensions] = useState<Dimensions>({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current)\n      setDimensions(getDimensions())\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [myRef])\n\n  return dimensions\n\n}\n\n// https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n// Used to get the previous value of an object\nexport const usePrevious = (value: any): any => {\n  const prevChildrenRef = useRef()\n\n  useEffect(() => {\n    prevChildrenRef.current = value\n  }, [value])\n\n  return prevChildrenRef.current\n}","import React, { useState, useEffect, createRef } from 'react'\n\nimport Bar from './Visualization/Bar'\n\nimport { useSelector } from 'react-redux'\n\nimport { RootState, CurrentNumberState } from '../store'\n\nimport AnimateBars from './Visualization/AnimateBars'\n\ninterface Props {\n  componentWidth: number;\n}\n\n// wery much in progress\n// Maybe\n// https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba\n// https://codesandbox.io/s/reorder-elements-with-slide-transition-and-react-hooks-flip-211f2?from-embed\nconst Bars: React.FC<Props> = ({componentWidth}: { componentWidth: number } ) => {\n  const listSize: number = useSelector((state: RootState) => state.numberList.size)\n  const list: number[] = useSelector((state: RootState) => state.numberList.list)\n  const selected: CurrentNumberState = useSelector((state: RootState) => state.currentNumber)\n  \n  const width: number = 100/listSize * componentWidth/listSize \n\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <AnimateBars>\n        {\n          list.map((b, i) => {\n            const barRef = createRef<HTMLDivElement>()\n            return <Bar key={b} width={width} height={b/listSize}\n            // Fix types here\n            // @ts-expect-error\n              main={i === selected.main} sub={i === selected.sub} ref={barRef} // Ref is null for some reason\n            />\n        })}\n      </AnimateBars>\n    </div>\n  )\n}\n\nexport default Bars","export interface ListState {\n  list: number[];\n  size: number;\n}\n\nexport const ADD_LIST = 'ADD_LIST'\nexport const CHANGE_SIZE = 'CHANGE_SIZE'\n\ninterface SetList {\n  type: typeof ADD_LIST;\n  payload: number[];\n}\n\ninterface ChangeListSize {\n  type: typeof CHANGE_SIZE;\n  payload: number;\n}\n\nexport type ListActionType = SetList | ChangeListSize","import {\n  ListActionType,\n  ADD_LIST,\n  CHANGE_SIZE,\n} from './types'\n\n\nexport const setNewAction = (list: number[]): ListActionType => {\n  return {\n    type: ADD_LIST,\n    payload: list\n  }\n}\n\nexport const changeListSizeAction = (size: number): ListActionType => {\n  return {\n    type: CHANGE_SIZE,\n    payload: size\n  }\n}","\nlet apiBaseUrl = ''\n// eslint-disable-next-line\nif (process.env.NODE_ENV === 'development')\n  apiBaseUrl = 'http://localhost:3001/api'\nelse\n  apiBaseUrl = '/api'\n\nexport { apiBaseUrl }","import axios from 'axios'\nimport { apiBaseUrl } from '../constants'\n\nconst fetchNew = async (size: number): Promise<number[]> => {\n  const { data: list } = await axios.get<number[]>(`${apiBaseUrl}/list?size=${size}`)\n  return list\n}\n\nexport default { fetchNew }","export const BubbleSort = 'BubbleSort'\nexport const QuickSort = 'QuickSort'\nexport const BogoSort = 'BogoSort'\nexport const InsertionSort = 'InsertionSort'\n\nexport enum AlgorithmTypes {\n  BubbleSort = 'BubbleSort',\n  InsertionSort = 'InsertionSort',\n  QuickSort = 'QuickSort',\n  BogoSort = 'BogoSort',\n  \n}\n\nexport type Algorithms = typeof BubbleSort | typeof QuickSort | typeof BogoSort | typeof InsertionSort\n\nexport type isAlgorithm<T> = T extends 'BubbleSort' ? typeof BubbleSort : typeof QuickSort","import {\n  ListState,\n  ListActionType,\n  ADD_LIST,\n  CHANGE_SIZE\n} from './types'\nimport { setNewAction, changeListSizeAction } from './actions'\nimport { AppType } from '../'\n\nimport listService from '../../services/lists'\n\nconst initialState: ListState = {\n  list: [],\n  size: 25\n}\n\nexport const fetchNewList = (listSize: number): AppType => async dispatch => {\n  const newList: number[] = await listService.fetchNew(listSize)\n  dispatch(setNewAction(newList))\n}\n\nexport const changeListSize = (listSize: number): AppType => async dispatch => {\n  dispatch(changeListSizeAction(listSize))\n}\n\nconst reducer = (state = initialState, action: ListActionType): ListState => {\n  switch (action.type) {\n  case ADD_LIST:\n\n    return {\n      list: [...action.payload],\n      size: state.size\n    }\n  case CHANGE_SIZE:\n    return {\n      ...state,\n      size: action.payload\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","export interface CurrentNumberState {\n  main: number;\n  sub: number | null;\n}\n\nexport const SET_CURRENT = 'SET_CURRENT'\n\nexport const SET_MAIN = 'SET_MAIN'\n\nexport const SET_SUB = 'SET_SUB'\n\nexport const REMOVE_CURRENT = 'REMOVE_CURRENT'\n\nexport const REMOVE_SUB = 'REMOVE_SUB'\n\ninterface SetCurrentAction {\n  type: typeof SET_CURRENT;\n  payload: {\n    main: number;\n    sub: number | null;\n  };\n}\n\ninterface SetMainAction {\n  type: typeof SET_MAIN;\n  payload: {\n    main: number;\n  };\n}\n\ninterface SetSubAction {\n  type: typeof SET_SUB;\n  payload: {\n    sub: number;\n  };\n}\n\ninterface RemoveCurrentAction {\n  type: typeof REMOVE_CURRENT;\n}\n\ninterface RemoveSubAction {\n  type: typeof REMOVE_SUB;\n}\n\nexport type CurrentNumberActionType = SetCurrentAction | SetMainAction | SetSubAction | RemoveCurrentAction | RemoveSubAction","import { CurrentNumberActionType, SET_CURRENT, SET_MAIN, SET_SUB, REMOVE_CURRENT, REMOVE_SUB } from './types'\n\nexport const setCurrentAction = (main: number, sub?: number | null): CurrentNumberActionType => {\n  return {\n    type: SET_CURRENT,\n    payload: {\n      main: main,\n      sub: sub || null\n    }\n  }\n}\n\nexport const setMainAction = (main: number): CurrentNumberActionType => {\n  return {\n    type: SET_MAIN,\n    payload: {\n      main: main,\n    }\n  }\n}\n\nexport const setSubAction = (sub: number): CurrentNumberActionType => {\n  return {\n    type: SET_SUB,\n    payload: {\n      sub: sub\n    }\n  }\n}\n\nexport const removeCurrentAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_CURRENT\n  }\n}\n\nexport const removeSubAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_SUB\n  }\n}","import {\n  CurrentNumberState,\n  CurrentNumberActionType,\n  SET_CURRENT,\n  SET_MAIN,\n  SET_SUB,\n  REMOVE_CURRENT,\n  REMOVE_SUB,\n} from './types'\nimport {\n  setCurrentAction,\n  setMainAction,\n  setSubAction,\n  removeCurrentAction,\n  removeSubAction\n} from './actions'\nimport { AppType } from '../'\n\nconst initialState: CurrentNumberState = {\n  main: -1,\n  sub: null\n}\n\nexport const setCurrent = (main: number, sub: number | null): AppType => async dispatch => {\n  dispatch(setCurrentAction(main, sub))\n}\n\nexport const setMain = (main: number): AppType => async dispatch => {\n  dispatch(setMainAction(main))\n}\n\nexport const setSub = (sub: number): AppType => async dispatch => {\n  dispatch(setSubAction(sub))\n}\n\nexport const removeCurrent = (): AppType => async dispatch => {\n  dispatch(removeCurrentAction())\n}\n\nexport const removeSub = (): AppType => async dispatch => {\n  dispatch(removeSubAction())\n}\n\nconst reducer = (state = initialState, action: CurrentNumberActionType): CurrentNumberState => {\n  switch(action.type) {\n  case SET_CURRENT:\n    return {\n      main: action.payload.main,\n      sub: action.payload.sub\n    }\n  case SET_MAIN:\n    return {\n      main: action.payload.main,\n      sub: state.sub\n    }\n  case SET_SUB:\n    return {\n      main: state.main,\n      sub: action.payload.sub\n    }\n  case REMOVE_CURRENT:\n    return {\n      main: -1,\n      sub: null,\n    }\n  case REMOVE_SUB:\n    return {\n      sub: null,\n      ...state\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","export type runningType = 'running' | 'stopped' | 'finished' | 'waiting'\n\nexport const SET_RUNNING = 'SET_RUNNING'\n\nexport const SET_STOPPED = 'SET_STOPPED'\n\nexport const SET_FINISHED = 'SET_FINISHED'\n\nexport const SET_WAITING = 'SET_WAITING'\n\ninterface SetRunning {\n  type: typeof SET_RUNNING;\n}\n\ninterface SetStopped {\n  type: typeof SET_STOPPED;\n}\n\ninterface SetFinished {\n  type: typeof SET_FINISHED;\n}\n\ninterface SetWaiting {\n  type: typeof SET_WAITING;\n}\n\nexport type RunningStateAction = SetRunning | SetStopped | SetFinished | SetWaiting","import {\n  RunningStateAction,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\n\nexport const setRunningAction = (): RunningStateAction => {\n  return {\n    type: SET_RUNNING\n  }\n}\n\nexport const setStoppedAction = (): RunningStateAction => {\n  return {\n    type: SET_STOPPED\n  }\n}\n\nexport const setFinishedAction = (): RunningStateAction => {\n  return {\n    type: SET_FINISHED\n  }\n}\n\nexport const setWaitingAction = (): RunningStateAction => {\n  return {\n    type: SET_WAITING\n  }\n}","import {\n  RunningStateAction,\n  runningType,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING\n} from './types'\nimport {\n  setRunningAction,\n  setStoppedAction,\n  setFinishedAction,\n  setWaitingAction\n} from './actions'\n\nimport { AppType } from '..'\n\nconst initialState: runningType = 'waiting'\n\nexport const setRunning = (): AppType => async dispatch => {\n  dispatch(setRunningAction())\n}\n\nexport const setStopped = (): AppType => async dispatch => {\n  dispatch(setStoppedAction())\n}\n\nexport const setFinished = (): AppType => async dispatch => {\n  dispatch(setFinishedAction())\n}\n\nexport const setWaiting = (): AppType => async dispatch => {\n  dispatch(setWaitingAction())\n}\n\nconst reducer = (state = initialState, action: RunningStateAction) => {\n  switch (action.type){\n  case SET_RUNNING:\n    return 'running'\n  case SET_STOPPED:\n    return 'stopped'\n  case SET_FINISHED:\n    return 'finished'\n  case SET_WAITING:\n    return 'waiting'\n  default:\n    return state\n  }\n}\n\nexport default reducer","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { Action } from 'redux'\nimport thunk, { ThunkAction } from 'redux-thunk'\nimport listReducer from './list/listReducer'\nimport currentNumberReducer from './currentNumber/currentNumberReducer'\nimport runningStateReducer from './running/runningReducer'\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst rootReducer = combineReducers({\n  numberList: listReducer,\n  currentNumber: currentNumberReducer,\n  running: runningStateReducer\n})\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(\n      thunk\n    )\n  )\n)\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport * from './currentNumber/types'\nexport * from './list/types'\nexport * from './running/types'\n\nexport type AppType<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n\nexport default store","import state from '../store'\nimport { runningType } from '../store/running/types'\n\nexport const isRunning = (): runningType => {\n  const running = state.getState().running\n  switch (running) {\n  case 'running':\n    return 'running'\n  case 'finished':\n    return 'finished'\n  default:\n    return 'stopped'\n  }\n}\n\nexport const wait = async (ms: number): Promise<void> => await new Promise(resolve => setTimeout(resolve, ms))\n","import React, { useState, useEffect } from 'react'\nimport { Slider } from 'antd'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\n\nimport { fetchNewList, changeListSize } from '../store/list/listReducer'\n\nimport { isRunning } from '../utils'\n\n\nconst ListSizeSlider: React.FC = () => {\n  const dispatch = useDispatch()\n\n  const [sliderValue, setSliderValue] = useState(25)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  useEffect(() => {\n    dispatch(fetchNewList(listSize))\n  }, [listSize])\n\n  const onSliderChange = (value: any) => {\n    if (typeof value !== 'number' || isNaN(Number(value)))\n      return\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: any) => {\n    if (typeof value !== 'number')\n      return\n    if (value > 60)\n      value = 60\n    dispatch(changeListSize(value))\n  }\n\n  return (\n    <div>\n      <Slider\n        min={3}\n        max={60}\n        onChange={onSliderChange}\n        onAfterChange={setNewListSize}\n        value={typeof sliderValue === 'number' ? sliderValue : 25}\n        tipFormatter={null}\n        disabled={isRunning() === 'running'}\n      />\n    </div>\n  )\n}\n\nexport default ListSizeSlider","import { removeCurrentAction, setMainAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning } from '../utils'\n\nconst timeoutLoop = (i: number, loop: number): void => {\n\n  const list: number[] = [...store.getState().numberList.list]\n\n  setTimeout(() => {\n    if (isRunning() === 'stopped') {\n      store.dispatch(removeCurrentAction())\n      return\n    }\n    if (list[i] > list[i + 1]) {\n      [list[i], list[i + 1]] = [list[i + 1], list[i]]\n      store.dispatch(setNewAction(list))\n    }\n    i++\n    store.dispatch(setMainAction(i))\n    if (i === (loop-1)) {\n      timeoutLoop(-1, loop - 1)\n    }else if (loop === 0) {\n      store.dispatch(removeCurrentAction())\n      store.dispatch(setFinishedAction())\n    }else  {\n      timeoutLoop(i, loop)\n    }\n  }, 500)\n}\n\nexport const bubbleSort = (): void => {\n  const list: number[] = [...store.getState().numberList.list]\n  const i = 0\n  store.dispatch(setMainAction(0))\n  timeoutLoop(i, list.length)\n}","import { setMainAction, setSubAction, removeCurrentAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nconst partition = async (A: number[], low: number, high: number): Promise<number> => {\n  const list: number[] = [...A]\n  const pivot: number = list[high]\n  store.dispatch(setMainAction(high))\n  let i = low\n\n  if (!pivot)\n    return -1\n  for (let j = low; j < high; j++) {\n    if (isRunning() === 'stopped')\n      return -1\n    store.dispatch(setSubAction(j))\n\n    await wait(400) // Wait for given amount of ms\n\n    if (list[j] < pivot) {\n      [list[i], list[j]] = [list[j], list[i]]\n      store.dispatch(setNewAction(list))\n      i++\n    }\n  }\n  [list[i], list[high]] = [list[high], list[i]]\n  store.dispatch(setNewAction(list))\n  return i\n}\n\nconst sort = async (low: number, high: number): Promise<void> => {\n  if (isRunning() === 'stopped')\n    return\n\n  const list = [...store.getState().numberList.list]\n  if (low < high) {\n    const p: number = await partition(list, low, high)\n\n    if (p === -1)\n      return\n    await sort(low, p - 1)\n    await sort(p + 1, high)\n  }\n\n}\n\nexport const quickSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(0, list.length-1)\n  store.dispatch(removeCurrentAction())\n  if (isRunning() === 'running')\n    store.dispatch(setFinishedAction())\n}","import { setMainAction, removeCurrentAction } from '../store/currentNumber/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport { setNewAction } from '../store/list/actions'\n\nimport listService from '../services/lists'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport _ from 'lodash'\n\n\nconst sort = async (): Promise<void> => {\n  const list: number[] = [...store.getState().numberList.list]\n  const listSize: number = store.getState().numberList.size\n  let rerun = false\n\n  for (let i = 0; i < listSize - 1; i++) {\n    await wait(200)\n    if (isRunning() === 'stopped')\n      return\n    store.dispatch(setMainAction(i))\n    if (list[i] > list[i + 1]) {\n      rerun = !rerun\n      break\n    }\n  }\n\n  if (rerun) {\n    store.dispatch(setNewAction(_.shuffle(list)))\n    store.dispatch(setMainAction(-1))\n    await wait(400)\n    return await sort()\n  }\n  store.dispatch(setFinishedAction())\n  return\n}\n\nexport const bogoSort = async (): Promise<void> => {\n  store.dispatch(setMainAction(-1))\n  await sort()\n  store.dispatch(removeCurrentAction())\n\n}","import { setMainAction, removeCurrentAction, setSubAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\n\nconst sort = async (list: number[]): Promise<void> => {\n  for (let i = 1; i < list.length; i++) {\n    if (isRunning() === 'stopped')\n      return\n    await wait(300)\n    let j = i\n    store.dispatch(setMainAction(i))\n    while (j > 0 && list[j - 1] > list[j]) {\n      if (isRunning() === 'stopped')\n        return\n      await wait(400);\n      store.dispatch(removeCurrentAction());\n      store.dispatch(setSubAction(j - 1));\n      \n      \n\n      [list[j], list[j - 1]] = [list[j - 1], list[j]]\n\n      store.dispatch(setNewAction([...list]))\n      \n      j--\n    }\n    store.dispatch(removeSubAction())\n  }\n\n}\n\nexport const insertionSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(list)\n  store.dispatch(removeCurrentAction())\n  store.dispatch(setFinishedAction())\n}","import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  InsertionSort,\n  Algorithms\n} from './types'\n\nimport * as a from '../../Algorithms'\n\nexport const runAlgorithm = async (type: Algorithms) => {\n  switch (type) {\n  case BubbleSort:\n    return await a.bubbleSort()\n  case QuickSort:\n    return await a.quickSort()\n  case BogoSort:\n    return await a.bogoSort()\n  case InsertionSort:\n    return await a.insertionSort()\n  default:\n    return\n  }\n}","import React, { useState, useRef} from 'react'\nimport {\n  Layout,\n  Typography,\n  Menu,\n  Button,\n  Skeleton,\n  Divider\n} from 'antd'\n\nconst { Title } = Typography\nconst { Header, Footer, Sider, Content } = Layout\n\nimport Bars from './Components/Bars'\nimport ListSizeSlider from './Components/ListSizeSlider'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setStopped, setRunning, setWaiting } from './store/running/runningReducer'\n\n// Figure out webworkers at some point maybe?\n//import SortWorker from 'comlink-loader!./worker'\n\nimport {\n  runAlgorithm,\n  Algorithms,\n  AlgorithmTypes\n} from './services/AlgorithmRunner'\nimport { RootState } from './store'\nimport { fetchNewList } from './store/list/listReducer'\nimport { useContainerDimensions } from './hooks'\n\nconst App: React.FC = () => {\n  const algorithmOptions: string[] = Object.values(AlgorithmTypes) as string[]\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<string>(algorithmOptions[0])\n\n  const componentRef = useRef<HTMLDivElement>(null)\n  const { width } = useContainerDimensions(componentRef)\n\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished')\n      await dispatch(fetchNewList(listSize))\n\n    dispatch(setRunning())\n    const selected: Algorithms =  selectedAlgorithm as Algorithms\n    await runAlgorithm(selected)\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n    \n  }\n\n  const menuOnClick = (event: any)  => {\n    const checkIfNotWaiting = async () => {\n      if (running !== 'waiting') {\n        await dispatch(fetchNewList(listSize))\n        dispatch(setWaiting())\n      }\n    }\n\n    checkIfNotWaiting()\n\n    setSelectedAlgorithm(event.key)\n  }\n\n  return (\n    <div>\n      <Layout>\n        <Header className='header'>\n          <div />\n          <Menu theme='dark' mode='horizontal' defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\">AlgoVis</Menu.Item>\n          </Menu>\n        </Header>\n        <Layout style={{ margin: '0 5em 0 5em' }}>\n          <Sider width={'20%'} className='site-layout-background' theme='light'>\n\n\n\n            <Title level={2} style={{ margin: '0,5em auto', padding: '0.2em 1em' }}>Select list size</Title>\n            <ListSizeSlider />\n            {running === 'stopped' || running === 'finished' || running === 'waiting' ?\n              <Button type='primary' block size='large' style={{\n                margin: '1em auto',\n              }}\n              onClick={startVisualization}\n              >Visualize</Button> :\n              <Button type='primary' block size='large' style={{\n                margin: '1em auto'\n              }}\n              onClick={stopVisualization}\n              >Stop visualization</Button>\n            }\n            <Divider>Select sorting algorithm</Divider>\n            {/*Menu for selecting sorting algorithm*/}\n            <Menu\n              mode=\"inline\"\n              style={{ borderRight: 0 }}\n              defaultOpenKeys={['slider', 'sub2']}\n              defaultSelectedKeys={[algorithmOptions[0]]}\n              onClick={menuOnClick}\n            >\n              {algorithmOptions.map(a =>\n                <Menu.Item\n                  key={a}\n                  disabled={running === 'running' ? true : false}\n                >{a}</Menu.Item>\n              )}\n            </Menu>\n\n          </Sider>\n          <Layout style={{ padding: '0 10em em' }}>\n            <Content className=\"site-layout-content\" id='container'\n                style={{\n                  padding: 24,\n                  margin: 0,\n                }}\n              >\n              <div ref={componentRef}>\n                <Bars componentWidth={width} />\n                <Divider />\n                <Skeleton />\n                <Skeleton />\n              </div>\n            </Content>\n          </Layout>\n        </Layout>\n        <Footer style={{ textAlign: 'center' }}>AlgoVis algorithm visualizer @2020 Created by Jere Salmensaari</Footer>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport 'antd/dist/antd.css'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}