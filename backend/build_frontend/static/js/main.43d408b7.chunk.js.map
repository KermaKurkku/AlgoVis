{"version":3,"sources":["store/list/types.ts","store/list/actions.ts","constants.ts","services/AlgorithmRunner/types.ts","services/lists.ts","store/list/listReducer.ts","store/currentNumber/types.ts","store/currentNumber/actions.ts","store/currentNumber/currentNumberReducer.ts","store/running/types.ts","store/running/actions.ts","store/running/runningReducer.ts","store/index.ts","utils/index.ts","Components/ListSizeSlider.tsx","Algorithms/bubbleSort.ts","Algorithms/quickSort.ts","Algorithms/bogoSort.ts","Algorithms/insertionSort.ts","Algorithms/stalinSort.ts","Algorithms/mergeSort.ts","services/AlgorithmRunner/index.ts","services/AlgorithmRunner/algorithmRunner.ts","Components/AlgorithmSider.tsx","Components/PageHeader.tsx","Components/Visualization/Bar.tsx","utils/calculateBoundingBoxes.ts","Components/Visualization/AnimateBars.tsx","hooks/index.ts","Components/Bars.tsx","services/descriptions.ts","Components/Description.tsx","Components/MainContent.tsx","App.tsx","index.tsx"],"names":["ADD_LIST","setNewAction","list","size","type","payload","apiBaseUrl","AlgorithmTypes","baseDelay","fetchNew","a","axios","get","data","initialState","fetchNewList","listSize","dispatch","listService","newList","reducer","state","action","SET_CURRENT","SET_MAIN","SET_SUB","REMOVE_CURRENT","REMOVE_SUB","SET_AREA","setMainAction","main","setSubAction","sub","removeCurrentAction","removeSubAction","setAreaAction","start","end","area","SET_RUNNING","SET_STOPPED","SET_FINISHED","SET_WAITING","SET_RUNNABLE","setFinishedAction","setRunnableAction","algorithmName","runnable","setRunning","setStopped","setWaiting","runningState","rootReducer","combineReducers","numberList","listReducer","currentNumber","currentNumberReducer","running","runningStateReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","isRunning","getState","wait","ms","Promise","resolve","setTimeout","ListSizeSlider","breakpoint","useDispatch","maxSliderValue","useSelector","visualizationStatus","useState","sliderValue","setSliderValue","useEffect","min","max","onChange","value","onAfterChange","tipFormatter","disabled","timeoutLoop","i","loop","length","bubbleSort","partition","A","low","high","pivot","j","sort","p","quickSort","rerun","_","shuffle","bogoSort","insertionSort","listLength","index","filter","v","stalinSort","merge","arr","baseIndex","newArr","halfOfLength","Math","floor","slice","leftArr","indexOf","rightArr","leftIndex","rightIndex","push","rtrArr","map","mergeSort","algorithmRunner","algorithm","Title","Typography","Sider","Layout","AlgorithmSider","algorithmOptions","Object","values","open","setOpen","setBreakpoint","position","currStyle","setCurrStyle","opacity","wrapperStyle","setWrappperStyle","toggleOpen","startVisualization","stopVisualization","collapsed","transition","RunButton","block","style","margin","onClick","width","className","theme","collapsedWidth","onCollapse","onBreakpoint","zIndex","zeroWidthTriggerStyle","top","level","padding","mode","borderRight","defaultSelectedKeys","event","checkIfNotWaiting","key","Item","Header","PageHeader","buttonStyle","display","float","height","transform","Bar","React","forwardRef","props","ref","normal","maxHeight","background","barStyle","borderStyle","borderWidth","borderColor","displayName","calculateBoundingBoxes","children","boundingBoxes","Children","forEach","child","current","nodeBoundingBox","getBoundingClientRect","AnimateBars","boundingBox","setBoundingBox","prevBoundingBox","setPrevBoundingBox","prevChildren","prevChildrenRef","useRef","usePrevious","useLayoutEffect","newBoundingBox","keys","domNode","firstBox","lastBox","changeInX","left","requestAnimationFrame","Bars","componentWidth","selected","b","barRef","createRef","fetchDescription","post","desc","Paragraph","Description","description","setDescription","getDesc","descriptionService","toLowerCase","console","log","split","d","par","substring","overflowWrap","fontFamily","whiteSpace","mapToParagraphs","Content","MainContent","loading","setLoading","marginTop","marginLeft","marginRight","id","paddingTop","Footer","App","componentRef","myRef","getDimensions","offsetWidth","offsetHeight","dimensions","setDimensions","handleResize","window","addEventListener","removeEventListener","useContainerDimensions","minHeight","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43d408b7.chunk.js","sourcesContent":["export interface ListState {\n  list: number[];\n  size: number;\n}\n\nexport const ADD_LIST = 'ADD_LIST'\n\ninterface SetList {\n  type: typeof ADD_LIST;\n  payload: {\n    list: number[];\n    size: number;\n  }\n}\n\nexport type ListActionType = SetList","import {\n  ListActionType,\n  ADD_LIST,\n} from './types'\n\n\nexport const setNewAction = (list: number[], size: number): ListActionType => {\n  return {\n    type: ADD_LIST,\n    payload: {\n      list: list,\n      size: size\n    }\n  }\n}","\nlet apiBaseUrl = ''\n// eslint-disable-next-line\nif (process.env.NODE_ENV === 'development')\n  apiBaseUrl = 'http://localhost:3001/api'\nelse\n  apiBaseUrl = '/api'\n\nconst baseDelay = 250\n\nexport { apiBaseUrl, baseDelay }","export const BubbleSort = 'BubbleSort'\nexport const QuickSort = 'QuickSort'\nexport const BogoSort = 'BogoSort'\nexport const InsertionSort = 'InsertionSort'\nexport const StalinSort = 'StalinSort'\nexport const MergeSort = 'MergeSort'\n\nexport enum AlgorithmTypes {\n  BubbleSort = 'BubbleSort',\n  InsertionSort = 'InsertionSort',\n  MergeSort = 'MergeSort',\n  QuickSort = 'QuickSort',\n  BogoSort = 'BogoSort',\n  StalinSort = 'StalinSort',\n  \n}\n\nexport type Algorithms = typeof BubbleSort | typeof QuickSort | typeof BogoSort | typeof InsertionSort\n  | typeof StalinSort | typeof MergeSort\n\n","import axios from 'axios'\nimport { apiBaseUrl } from '../constants'\n\nconst fetchNew = async (size: number): Promise<number[]> => {\n  const { data: list } = await axios.get<number[]>(`${apiBaseUrl}/list?size=${size}`)\n  return list\n}\n\nexport default { fetchNew }","import {\n  ListState,\n  ListActionType,\n  ADD_LIST\n} from './types'\nimport { setNewAction } from './actions'\nimport { AppType } from '../'\n\nimport listService from '../../services/lists'\n\nconst initialState: ListState = {\n  list: [],\n  size: 25\n}\n\nexport const fetchNewList = (listSize: number): AppType => async dispatch => {\n  const newList: number[] = await listService.fetchNew(listSize)\n  dispatch(setNewAction(newList, listSize))\n}\n\nconst reducer = (state = initialState, action: ListActionType): ListState => {\n  switch (action.type) {\n  case ADD_LIST:\n\n    return {\n      list: [...action.payload.list],\n      size: action.payload.size\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","export interface CurrentNumberState {\n  main: number;\n  sub: number | null;\n  area: {\n    start: number;\n    end: number;\n  }\n}\n\nexport const SET_CURRENT = 'SET_CURRENT'\n\nexport const SET_MAIN = 'SET_MAIN'\n\nexport const SET_SUB = 'SET_SUB'\n\nexport const REMOVE_CURRENT = 'REMOVE_CURRENT'\n\nexport const REMOVE_SUB = 'REMOVE_SUB'\n\nexport const SET_AREA = 'SET_AREA'\n\ninterface SetCurrentAction {\n  type: typeof SET_CURRENT;\n  payload: {\n    main: number;\n    sub: number | null;\n  };\n}\n\ninterface SetMainAction {\n  type: typeof SET_MAIN;\n  payload: {\n    main: number;\n  };\n}\n\ninterface SetSubAction {\n  type: typeof SET_SUB;\n  payload: {\n    sub: number;\n  };\n}\n\ninterface RemoveCurrentAction {\n  type: typeof REMOVE_CURRENT;\n}\n\ninterface RemoveSubAction {\n  type: typeof REMOVE_SUB;\n}\n\ninterface SetAreaAction {\n  type: typeof SET_AREA;\n  payload: {\n    start: number,\n    end: number\n  }\n}\n\nexport type CurrentNumberActionType = SetCurrentAction | SetMainAction | SetSubAction | RemoveCurrentAction | \n  RemoveSubAction | SetAreaAction","import { CurrentNumberActionType, SET_CURRENT, SET_MAIN, SET_SUB, REMOVE_CURRENT, REMOVE_SUB, SET_AREA } from './types'\n\nexport const setCurrentAction = (main: number, sub?: number | null): CurrentNumberActionType => {\n  return {\n    type: SET_CURRENT,\n    payload: {\n      main: main,\n      sub: sub || null\n    }\n  }\n}\n\nexport const setMainAction = (main: number): CurrentNumberActionType => {\n  return {\n    type: SET_MAIN,\n    payload: {\n      main: main,\n    }\n  }\n}\n\nexport const setSubAction = (sub: number): CurrentNumberActionType => {\n  return {\n    type: SET_SUB,\n    payload: {\n      sub: sub\n    }\n  }\n}\n\nexport const removeCurrentAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_CURRENT\n  }\n}\n\nexport const removeSubAction = (): CurrentNumberActionType => {\n  return {\n    type: REMOVE_SUB\n  }\n}\n\nexport const setAreaAction = (start: number, end: number): CurrentNumberActionType => {\n  return {\n    type: SET_AREA,\n    payload: {\n      start: start,\n      end: end\n    }\n  }\n}","import {\n  CurrentNumberState,\n  CurrentNumberActionType,\n  SET_CURRENT,\n  SET_MAIN,\n  SET_SUB,\n  REMOVE_CURRENT,\n  REMOVE_SUB,\n  SET_AREA\n} from './types'\nimport {\n  setCurrentAction,\n  setMainAction,\n  setSubAction,\n  removeCurrentAction,\n  removeSubAction,\n  setAreaAction\n} from './actions'\nimport { AppType } from '../'\n\nconst initialState: CurrentNumberState = {\n  main: -1,\n  sub: null,\n  area: {\n    start: -1,\n    end: -1\n  }\n}\n\nexport const setCurrent = (main: number, sub: number | null): AppType => async dispatch => {\n  dispatch(setCurrentAction(main, sub))\n}\n\nexport const setMain = (main: number): AppType => async dispatch => {\n  dispatch(setMainAction(main))\n}\n\nexport const setSub = (sub: number): AppType => async dispatch => {\n  dispatch(setSubAction(sub))\n}\n\nexport const removeCurrent = (): AppType => async dispatch => {\n  dispatch(removeCurrentAction())\n}\n\nexport const removeSub = (): AppType => async dispatch => {\n  dispatch(removeSubAction())\n}\n\nexport const setArea = (start: number, end: number): AppType => async dispatch => {\n  dispatch(setAreaAction(start, end))\n}\n\nconst reducer = (state = initialState, action: CurrentNumberActionType): CurrentNumberState => {\n  switch(action.type) {\n  case SET_CURRENT:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: action.payload.sub\n    }\n  case SET_MAIN:\n    return {\n      ...state,\n      main: action.payload.main,\n      sub: state.sub\n    }\n  case SET_SUB:\n    return {\n      ...state,\n      main: state.main,\n      sub: action.payload.sub\n    }\n  case REMOVE_CURRENT:\n    return {\n      ...state,\n      main: -1\n    }\n  case REMOVE_SUB:\n    return {\n      ...state,\n      sub: null\n    }\n  case SET_AREA:\n    return {\n      ...state,\n      area: {\n        start: action.payload.start,\n        end: action.payload.end\n      }\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","import {Algorithms} from '../../services/AlgorithmRunner'\n\nexport type RunningState = {\n  state: 'running' | 'stopped' | 'finished' | 'waiting',\n  runnable: Algorithms\n}\n\nexport type runningType = 'running' | 'stopped' | 'finished' | 'waiting'\n\nexport const SET_RUNNING = 'SET_RUNNING'\n\nexport const SET_STOPPED = 'SET_STOPPED'\n\nexport const SET_FINISHED = 'SET_FINISHED'\n\nexport const SET_WAITING = 'SET_WAITING'\n\nexport const SET_RUNNABLE = 'SET_RUNNABLE'\n\ninterface SetRunning {\n  type: typeof SET_RUNNING;\n}\n\ninterface SetStopped {\n  type: typeof SET_STOPPED;\n}\n\ninterface SetFinished {\n  type: typeof SET_FINISHED;\n}\n\ninterface SetWaiting {\n  type: typeof SET_WAITING;\n}\n\ninterface SetRunnable {\n  type: typeof SET_RUNNABLE,\n  payload: Algorithms\n}\n\nexport type RunningStateAction = SetRunning | SetStopped | SetFinished | SetWaiting | SetRunnable","import {\n  RunningStateAction,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING,\n  SET_RUNNABLE\n} from './types'\n\nimport {Algorithms} from '../../services/AlgorithmRunner'\n\n\nexport const setRunningAction = (): RunningStateAction => {\n  return {\n    type: SET_RUNNING\n  }\n}\n\nexport const setStoppedAction = (): RunningStateAction => {\n  return {\n    type: SET_STOPPED\n  }\n}\n\nexport const setFinishedAction = (): RunningStateAction => {\n  return {\n    type: SET_FINISHED\n  }\n}\n\nexport const setWaitingAction = (): RunningStateAction => {\n  return {\n    type: SET_WAITING\n  }\n}\n\nexport const setRunnableAction = (algorithmName: Algorithms): RunningStateAction => {\n  return {\n    type: SET_RUNNABLE,\n    payload: algorithmName\n  }\n}","import {\n  RunningStateAction,\n  RunningState,\n  SET_RUNNING,\n  SET_STOPPED,\n  SET_FINISHED,\n  SET_WAITING,\n  SET_RUNNABLE\n} from './types'\nimport {\n  setRunningAction,\n  setStoppedAction,\n  setFinishedAction,\n  setWaitingAction,\n  setRunnableAction\n} from './actions'\n\nimport {Algorithms} from '../../services/AlgorithmRunner'\n\n\nimport { AppType } from '..'\n\nconst initialState: RunningState = {\n  state: 'finished',\n  runnable: 'BubbleSort'\n}\n\nexport const setRunning = (): AppType => async dispatch => {\n  dispatch(setRunningAction())\n}\n\nexport const setStopped = (): AppType => async dispatch => {\n  dispatch(setStoppedAction())\n}\n\nexport const setFinished = (): AppType => async dispatch => {\n  dispatch(setFinishedAction())\n}\n\nexport const setWaiting = (): AppType => async dispatch => {\n  dispatch(setWaitingAction())\n}\n\nexport const setRunnable = (algorithmName: Algorithms): AppType => async dispatch => {\n  dispatch(setRunnableAction(algorithmName))\n}\n\nconst reducer = (runningState = initialState, action: RunningStateAction): RunningState  => {\n  switch (action.type){\n  case SET_RUNNING:\n    return {\n      state: 'running',\n      runnable: runningState.runnable\n    }\n  case SET_STOPPED:\n    return {\n      state: 'stopped',\n      runnable: runningState.runnable\n    }\n  case SET_FINISHED:\n    return {\n      state: 'finished',\n      runnable: runningState.runnable\n    }\n  case SET_WAITING:\n    return {\n      state: 'waiting',\n      runnable: runningState.runnable\n    }\n  case SET_RUNNABLE:\n    return {\n      state: runningState.state,\n      runnable: action.payload\n    }\n  default:\n    return runningState\n  }\n}\n\nexport default reducer","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { Action } from 'redux'\nimport thunk, { ThunkAction } from 'redux-thunk'\nimport listReducer from './list/listReducer'\nimport currentNumberReducer from './currentNumber/currentNumberReducer'\nimport runningStateReducer from './running/runningReducer'\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst rootReducer = combineReducers({\n  numberList: listReducer,\n  currentNumber: currentNumberReducer,\n  running: runningStateReducer\n})\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(\n      thunk\n    )\n  )\n)\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport * from './currentNumber/types'\nexport * from './list/types'\nexport * from './running/types'\n\nexport type AppType<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n\nexport default store","import state from '../store'\nimport { runningType } from '../store/running/types'\n\nexport const isRunning = (): runningType => {\n  const running = state.getState().running.state\n  switch (running) {\n  case 'running':\n    return 'running'\n  case 'finished':\n    return 'finished'\n  default:\n    return 'stopped'\n  }\n}\n\nexport const wait = async (ms: number): Promise<void> => await new Promise(resolve => setTimeout(resolve, ms))\n","import React, { useState, useEffect } from 'react'\nimport { Slider } from 'antd'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\n\nimport { fetchNewList } from '../store/list/listReducer'\n\nimport { isRunning } from '../utils'\nimport { setWaiting } from '../store/running/runningReducer'\n\ntype SliderProps = {\n  breakpoint: boolean\n}\n\nconst ListSizeSlider: React.FC<SliderProps> = ({ breakpoint }: SliderProps) => {\n  const dispatch = useDispatch()\n  const maxSliderValue = breakpoint ? 20 : 40\n\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n  const visualizationStatus = useSelector((state: RootState) => state.running.state)\n\n  const [sliderValue, setSliderValue] = useState(listSize)\n \n  useEffect(() => {\n    dispatch(setWaiting());\n    dispatch(fetchNewList(maxSliderValue/2))\n    setSliderValue(maxSliderValue/2)\n  }, [maxSliderValue])\n\n  useEffect(() => {\n    if (visualizationStatus === 'finished') {\n      dispatch(setWaiting())\n      dispatch(fetchNewList(listSize))\n    }\n    \n    \n  }, [listSize])\n\n  const onSliderChange = (value: number) => {\n    setSliderValue(value)\n  }\n\n  const setNewListSize = (value: number) => {\n    if (typeof value !== 'number')\n      return\n    if (value > maxSliderValue)\n      value = maxSliderValue\n    dispatch(fetchNewList(value))\n  }\n\n  return (\n    <div>\n      <Slider\n        min={3}\n        max={ maxSliderValue }\n        onChange={onSliderChange}\n        onAfterChange={setNewListSize}\n        value={sliderValue}\n        tipFormatter={null}\n        disabled={isRunning() === 'running'}\n      />\n    </div>\n  )\n}\n\nexport default ListSizeSlider","import { removeCurrentAction, removeSubAction, setMainAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst timeoutLoop = (i: number, loop: number): void => {\n\n  const list: number[] = [...store.getState().numberList.list]\n\n  setTimeout(() => {\n    if (isRunning() === 'stopped') {\n      store.dispatch(removeCurrentAction())\n      return\n    }\n    if (list[i] > list[i + 1]) {\n      [list[i], list[i + 1]] = [list[i + 1], list[i]]\n      store.dispatch(setNewAction(list, list.length))\n    }\n    i++\n    store.dispatch(setMainAction(i))\n    if (i === (loop-1)) {\n      timeoutLoop(-1, loop - 1)\n    }else if (loop === 0) {\n      store.dispatch(removeCurrentAction())\n      store.dispatch(removeSubAction())\n      store.dispatch(setFinishedAction())\n    }else  {\n      timeoutLoop(i, loop)\n    }\n  }, baseDelay)\n}\n\nexport const bubbleSort = (): void => {\n  const list: number[] = [...store.getState().numberList.list]\n  const i = 0\n  store.dispatch(setMainAction(0))\n  timeoutLoop(i, list.length)\n}","import {\n  setMainAction, setSubAction, removeCurrentAction, removeSubAction, setAreaAction\n} from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst partition = async (A: number[], low: number, high: number): Promise<number> => {\n  const list: number[] = [...A]\n  const pivot: number = list[high]\n  store.dispatch(setMainAction(high))\n  store.dispatch(setAreaAction(low, high))\n  let i = low\n\n  if (!pivot)\n    return -1\n  for (let j = low; j < high; j++) {\n    if (isRunning() === 'stopped')\n      return -1\n    store.dispatch(setSubAction(j))\n\n    await wait(baseDelay) // Wait for given amount of ms\n\n    if (list[j] < pivot) {\n      [list[i], list[j]] = [list[j], list[i]]\n      store.dispatch(setNewAction(list, list.length))\n      i++\n    }\n  }\n  [list[i], list[high]] = [list[high], list[i]]\n  store.dispatch(setNewAction(list, list.length))\n  await wait(baseDelay)\n  return i\n}\n\nconst sort = async (low: number, high: number): Promise<void> => {\n  if (isRunning() === 'stopped')\n    return\n\n  const list = [...store.getState().numberList.list]\n  if (low < high) {\n    const p: number = await partition(list, low, high)\n\n    if (p === -1)\n      return\n    await sort(low, p - 1)\n    await sort(p + 1, high)\n  }\n\n}\n\nexport const quickSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(0, list.length-1)\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setAreaAction(-1, -1))\n  if (isRunning() === 'running')\n    store.dispatch(setFinishedAction())\n\n}","import { setMainAction, removeCurrentAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport { setNewAction } from '../store/list/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport _ from 'lodash'\nimport { baseDelay } from '../constants'\n\n\nconst sort = async (): Promise<void> => {\n  const list: number[] = [...store.getState().numberList.list]\n  const listSize: number = store.getState().numberList.size\n  let rerun = false\n\n  for (let i = 1; i < listSize - 1; i++) {\n    store.dispatch(setMainAction(i-1))\n    await wait(baseDelay)\n    if (isRunning() === 'stopped')\n      return\n    store.dispatch(setMainAction(i))\n    if (list[i] < list[i - 1]) {\n      rerun = !rerun\n      break\n    }\n  }\n\n  if (rerun) {\n    store.dispatch(setNewAction(_.shuffle(list), list.length))\n    store.dispatch(setMainAction(-1))\n    await wait(300)\n    return await sort()\n  }\n  store.dispatch(setFinishedAction())\n  return\n}\n\nexport const bogoSort = async (): Promise<void> => {\n  store.dispatch(setMainAction(-1))\n  await sort()\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n\n}","import { setMainAction, removeCurrentAction, setSubAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport { baseDelay } from '../constants'\n\n\nconst sort = async (list: number[]): Promise<void> => {\n  for (let i = 1; i < list.length; i++) {\n    if (isRunning() === 'stopped')\n      return\n      \n    await wait(baseDelay)\n\n    store.dispatch(removeSubAction())\n\n    store.dispatch(setMainAction(i-1))\n    await wait(baseDelay)\n    let j = i\n    store.dispatch(setMainAction(i))\n    while (j > 0 && list[j - 1] > list[j]) {\n      if (isRunning() === 'stopped')\n        return\n      \n      store.dispatch(setSubAction(j))\n      await wait(300);\n      store.dispatch(setSubAction(j - 1));\n      store.dispatch(removeCurrentAction());\n\n      [list[j], list[j - 1]] = [list[j - 1], list[j]]\n\n      store.dispatch(setNewAction([...list], list.length))\n      \n      j--\n    }\n    \n  }\n\n}\n\nexport const insertionSort = async (): Promise<void> => {\n  const list = [...store.getState().numberList.list]\n  store.dispatch(setMainAction(-1))\n  await sort(list)\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setFinishedAction())\n}","import { setMainAction, removeCurrentAction, removeSubAction } from '../store/currentNumber/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport { setNewAction } from '../store/list/actions'\n\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\n\nimport { baseDelay } from '../constants'\n\nconst sort = async (): Promise<void> => {\n  const listLength = store.getState().numberList.size\n  \n  if (!isRunning())\n    return\n\n  let index = 1;\n  do {\n    if (isRunning() === 'stopped')\n      return\n    const list = store.getState().numberList.list\n    store.dispatch(setMainAction(index))\n    if (list.length <= 1)\n      return\n\n    if (index === list.length)\n      return\n\n    await wait(baseDelay)\n\n    if (list[index - 1] > list[index]) {\n      const newList = list.filter(v => v !== list[index]) \n      store.dispatch(setNewAction(newList, listLength))\n      continue\n    }\n    index++\n  } while(index > 0)\n\n}\n\nexport const stalinSort = async (): Promise<void> => {\n  store.dispatch(setMainAction(-1))\n  await sort()\n  store.dispatch(removeCurrentAction())\n  store.dispatch(removeSubAction())\n  store.dispatch(setFinishedAction())\n}","import {\n\tsetMainAction, setSubAction, removeCurrentAction, removeSubAction, setAreaAction\n} from '../store/currentNumber/actions'\nimport { setNewAction } from '../store/list/actions'\nimport { setFinishedAction } from '../store/running/actions'\n\nimport store from '../store'\n\nimport { isRunning, wait } from '../utils'\nimport { baseDelay } from '../constants'\n\nconst merge = async (arr: number[], index: number): Promise<number[] | null> => {\n\tlet list = [...store.getState().numberList.list]\n\n\n\tif (arr.length === 1)\n\t\treturn arr\n\n\tconst baseIndex = index\n\n\tconst newArr: number[] = []\n\n\tconst halfOfLength: number = Math.floor(arr.length/2)\n\n\tconst leftArr: number[] | null = await merge(arr.slice(0, halfOfLength), index)\n\tconst rightArr: number[] | null = await merge(arr.slice(halfOfLength, arr.length), list.indexOf(arr[halfOfLength]))\n\n\tif (leftArr === null || rightArr === null)\n\t\treturn null\n\t\n\tlist = [...store.getState().numberList.list]\n\n\tlet leftIndex = 0\n\tlet rightIndex = 0\n\n\tstore.dispatch(setAreaAction(list.indexOf(leftArr[0]), list.indexOf(rightArr[rightArr.length-1])))\n\t\n\tdo {\n\t\tif (isRunning() === 'stopped') \n\t\t\treturn null\n\t\t\n\t\tstore.dispatch(setMainAction(index))\n\n\t\tstore.dispatch(setSubAction(list.indexOf(rightArr[rightIndex])))\n\t\tawait wait(baseDelay)\n\t\tif (leftIndex < leftArr.length && leftArr[leftIndex] < rightArr[rightIndex] || rightIndex === rightArr.length) {\n\t\t\tnewArr.push(leftArr[leftIndex])\n\t\t\tleftIndex++\n\t\t} else {\n\t\t\tnewArr.push(rightArr[rightIndex])\n\t\t\trightIndex++\n\t\t}\n\n\t\tconst rtrArr: number[] = [...newArr, ...leftArr.filter(v => newArr.indexOf(v) === -1), ...rightArr.filter(v => newArr.indexOf(v) === -1)]\n\t\t\n\t\tstore.dispatch(removeCurrentAction())\n\t\tstore.dispatch(removeSubAction())\n\t\tstore.dispatch(setNewAction(list.map(\n\t\t\t\t(v, i) => (i-baseIndex) >= 0 && (i-baseIndex) < rtrArr.length ?\n\t\t\t\trtrArr[i-baseIndex] : v\n\t\t\t), list.length\n\t\t\t))\n\n\t\tindex++\n\n\t} while (leftIndex < leftArr.length || rightIndex < rightArr.length)\n\n\treturn newArr\n}\n\nconst sort = async (): Promise<void> => {\n\tconst list = [...store.getState().numberList.list]\n\n\tif (isRunning() === 'stopped') \n\t\treturn\n\n\tawait merge(list, 0)\n\t\n}\n\nexport const mergeSort = async (): Promise<void> => {\n\tawait sort()\n\tstore.dispatch(removeCurrentAction())\n\tstore.dispatch(removeSubAction())\n\tstore.dispatch(setAreaAction(-1, -1))\n\tstore.dispatch(setFinishedAction())\n}","import algorithmRunner from './algorithmRunner'\n\nexport * from './types'\n\nexport default algorithmRunner","import {\n  BubbleSort,\n  QuickSort,\n  BogoSort,\n  InsertionSort,\n  StalinSort,\n  MergeSort,\n  Algorithms\n} from './types'\n\nimport * as a from '../../Algorithms'\n\nconst algorithmRunner = async (algorithm: Algorithms): Promise<void> =>  {  \n    switch (algorithm) {\n    case BubbleSort:\n      return await a.bubbleSort()\n    case QuickSort:\n      return await a.quickSort()\n    case BogoSort:\n      return await a.bogoSort()\n    case InsertionSort:\n      return await a.insertionSort()\n    case StalinSort:\n      return await a.stalinSort()\n    case MergeSort:\n      return await a.mergeSort()\n    default:\n      return\n    }\n}\n\nexport default algorithmRunner","import React, { useEffect, useState } from 'react'\nimport {\n  Layout,\n  Typography,\n  Menu,\n  Button,\n  Divider\n} from 'antd'\n\nconst { Title } = Typography\nconst { Sider } = Layout\n\nimport ListSizeSlider from '../Components/ListSizeSlider'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setStopped, setRunning, setWaiting, setRunnable} from '../store/running/runningReducer'\n\nimport algorithmRunner, {\n  Algorithms,\n  AlgorithmTypes\n} from '../services/AlgorithmRunner'\nimport { RootState, runningType } from '../store'\nimport { fetchNewList } from '../store/list/listReducer'\n\nconst AlgorithmSider: React.FC = () => {\n\n  const algorithmOptions: string[] = Object.values(AlgorithmTypes) as string[]\n\n  const [open, setOpen] = useState<boolean>(false)\n  const [breakpoint, setBreakpoint] = useState<boolean>(false)\n\n  const [currStyle, setCurrStyle] = useState<React.CSSProperties>({ position: 'relative' })\n  const [wrapperStyle, setWrappperStyle] = useState<React.CSSProperties>({ opacity: 1 })\n\n  const dispatch = useDispatch()\n\n  const running: runningType = useSelector((state: RootState) => state.running.state)\n  const algorithm: Algorithms = useSelector((state: RootState) => state.running.runnable)\n  const listSize: number = useSelector((state: RootState) => state.numberList.size)\n\n  useEffect(() => {\n    if (running === 'running' && breakpoint && open)\n      toggleOpen(true)\n  }, [running])\n\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished')\n      await dispatch(fetchNewList(listSize))\n\n    dispatch(setRunning())\n    \n    await algorithmRunner(algorithm)\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n  }\n\n  // eslint-disable-next-line\n  const menuOnClick = (event: any)  => {\n    const checkIfNotWaiting = async () => {\n      if (running !== 'waiting') {\n        await dispatch(fetchNewList(listSize))\n        dispatch(setWaiting())\n      }\n    }\n\n    checkIfNotWaiting()\n    dispatch(setRunnable(event.key as Algorithms))\n\n  }\n\n  const toggleOpen = (collapsed: boolean) => {\n    3\n\n    setOpen(!collapsed)\n    if (collapsed) \n      setWrappperStyle({\n        opacity: 0,\n        transition: 'opacity, 0.2s cubic-bezier(0,1,0,1)',\n      })\n    else \n      setWrappperStyle({\n        ...wrapperStyle,\n        opacity: 1,\n        transition: 'opacity, 0.2s cubic-bezier(1,0,1,0)',\n      })\n    \n  }\n\n  const handleBreakpoint = (breakpoint: boolean) => {\n    if (breakpoint) {\n      setCurrStyle({\n        position: 'fixed',\n        zIndex: 100,\n        transition: 'all 0.2s'\n      })\n      setWrappperStyle({\n        opacity: 0,\n        transition: 'opacity, 0.2s cubic-bezier(0,1,0,1)',\n      })\n    } else {\n      setCurrStyle({\n        position: 'relative',\n        zIndex: 1,\n        transition: 'none'\n      })\n      setWrappperStyle({\n        ...wrapperStyle,\n        opacity: 1,\n        transition: 'none',\n      })\n    }\n      \n\n    setBreakpoint(breakpoint)\n  }\n\n  const RunButton = () => (\n    running === 'stopped' || running === 'finished' || running === 'waiting' ?\n      <Button type='primary' block size='large' style={{\n          margin: '1em auto',\n        }}\n        onClick={startVisualization}\n      >Visualize</Button> :\n      <Button type='primary' block size='large' style={{\n          margin: '1em auto'\n        }}\n        onClick={stopVisualization}\n      >Stop visualization</Button>\n    \n  )\n\n\n  return (\n    <>\n      <Sider\n        width={'19em'} className='sider-root' theme='light'\n        collapsed={!open}\n        collapsedWidth=\"0\" onCollapse={toggleOpen} breakpoint=\"lg\"\n        onBreakpoint={handleBreakpoint} style={currStyle} zeroWidthTriggerStyle={{ top: 0 }}\n      >\n       <div className='sider-wrapper' style={wrapperStyle}>\n        <Title level={2} style={{ margin: '0,5em auto', padding: '0.2em 1em' }}>Select list size</Title>\n          {/* List size slider */}\n          <ListSizeSlider breakpoint={breakpoint} />\n\n          {/* Run button */}\n          {\n            breakpoint ? null \n            : <RunButton />\n          }\n\n          <Divider>Select sorting algorithm</Divider>\n          {/*Menu for selecting sorting algorithm*/}\n          <Menu\n            mode=\"inline\"\n            style={{ borderRight: 0 , transition: 'none'}}\n            defaultSelectedKeys={[algorithm]}\n            onClick={menuOnClick}\n          >\n          \n          {algorithmOptions.map(a =>\n            <Menu.Item\n              key={a}\n              disabled={running === 'running' ? true : false}\n              style={{ transition: 'none' }}\n            >{a}</Menu.Item>\n          )}\n          </Menu>\n       </div>\n      </Sider>\n    </>\n  )\n}\n\nexport default AlgorithmSider","import React from 'react'\nimport {\n  Layout,\n  Menu,\n  Button\n} from 'antd'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport algorithmRunner, {\n} from '../services/AlgorithmRunner'\n\nimport { RootState } from '../store'\nimport { fetchNewList } from '../store/list/listReducer'\nimport { setStopped, setRunning,  } from '../store/running/runningReducer'\n\n\nconst { Header } = Layout\n\ntype PageHeaderProps = {\n  width: number\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({ width }: PageHeaderProps) => {\n  const dispatch = useDispatch()\n\n  const running = useSelector((state: RootState) => state.running.state)\n  const algorithm = useSelector((state: RootState) => state.running.runnable)\n  const listSize = useSelector((state: RootState) => state.numberList.size)\n\n  const startVisualization = async (): Promise<void> => {\n    if (running === 'finished')\n      await dispatch(fetchNewList(listSize))\n\n    dispatch(setRunning())\n    \n    await algorithmRunner(algorithm)\n  }\n\n  const stopVisualization = (): void => {\n    dispatch(setStopped())\n  }\n\n  const buttonStyle: React.CSSProperties = { \n    display: 'inline-block', float: 'right', height: '90%', margin: 'auto 1em', \n    width: 'auto', transform: 'translate(0, -50%)', top: '50%'\n  }\n\n  const RunButton = () => (\n    running !== 'running' ?\n          <Button \n            type='primary' block size='large'\n            style={buttonStyle}\n            onClick={startVisualization}\n          >\n          Start Visualization\n          </Button>\n          : <Button\n              type='primary' block size='large'\n              style={buttonStyle} onClick={stopVisualization}\n            >\n              Stop Visualization\n            </Button>\n  )\n\n  return (\n    <Header className='header' style={{ \n      padding: width > 992 ? '0 5em 0 5em' : '0 1em 0 1em',\n      position: width > 922 ? 'relative' : 'fixed', width: '100%',\n      zIndex: 1000\n      }}>\n      <div />\n      <Menu\n        theme='dark' mode='horizontal' defaultSelectedKeys={['1']}\n        style={{ display: 'inline-block'}}\n      >\n        <Menu.Item key=\"1\">AlgoVis</Menu.Item>\n      </Menu>\n        {\n          width < 992 ? \n          <RunButton />\n          :null\n        }\n    </Header>\n  )\n}\n\nexport default PageHeader","import React from 'react'\n\ntype Props = {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\ntype Ref = HTMLDivElement\n\ninterface Bar {\n  height: number;\n  width: number;\n  main: boolean;\n  sub: boolean;\n  area: boolean;\n}\n\n// Renders a bar to represent a number in the list\nconst Bar: React.FC<Bar> = React.forwardRef<Ref, Props>((props: Props, ref) => {\n\n  const normal = !props.main && !props.sub\n  const maxHeight = 30\n  const style = {\n    height: `${maxHeight+1}em`,\n    width: `${props.width}%`,\n    background: props.area ? \"rgb(170, 182, 193, 0.6)\" : 'transparent',\n    \n  }\n  const barStyle = {\n    height: `${maxHeight*props.height}em`,\n    maxHeight: `${maxHeight}em`,\n    width: 'auto',\n    background: normal ? '#f0f2f5' : props.main ? '#FF7A32' : \n    props.sub ? '#2EF550' : '#f0f2f5',\n    zIndex: 50,\n    borderStyle: 'solid',\n    borderWidth: '0.2em',\n    borderColor: '#1890ff',\n    margin: '0.1em',\n    opacity: '100%'\n  }\n\n  return (\n    <div style={style} >\n      <div style={barStyle} ref={ref} />\n    </div>\n  )\n})\n\n// Eslint is being a douche\nBar.displayName = 'Bar'\n\nexport default Bar\n","/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Calculates the bounding boxes of elements given to it\n*/\n\nimport React from 'react'\n\nimport { AnimationChild, AnimationChildren, DOMRectDict } from '../types'\n\nconst calculateBoundingBoxes = (children: AnimationChildren): DOMRectDict | null => {\n  const boundingBoxes: DOMRectDict = {}\n\n  React.Children.forEach(children, (child: AnimationChild) => {\n    if (!child.ref.current)\n      return null\n    const domNode = child.ref.current\n    const nodeBoundingBox = domNode.getBoundingClientRect()\n\n\n    boundingBoxes[child.key] = nodeBoundingBox\n  })\n\n  return boundingBoxes\n}\n\nexport default calculateBoundingBoxes","\n/*\n  Based on https://itnext.io/animating-list-reordering-with-react-hooks-aca5e7eeafba by Tara Ojo\n  Used to animate changing bar positions\n*/\n\nimport React, { useState, useEffect, useLayoutEffect } from 'react'\nimport { usePrevious } from '../../hooks'\nimport calculateBoundingBoxes from '../../utils/calculateBoundingBoxes'\n\nimport { AnimationChild, DOMRectDict } from '../../types'\n\ntype propType = { // eslint-disable-next-line\n  children: any\n}\n\nconst AnimateBars: React.FC<propType> = ({ children }: propType) => {\n  const [boundingBox, setBoundingBox] = useState<DOMRectDict | null>({})\n  const [prevBoundingBox, setPrevBoundingBox] = useState<DOMRectDict | null>({})\n  const prevChildren = usePrevious(children)\n\n  useLayoutEffect(() => {\n    const newBoundingBox = calculateBoundingBoxes(children)\n    setBoundingBox(newBoundingBox)\n  }, [children])\n\n  useLayoutEffect(() => {\n    const prevBoundingBox = calculateBoundingBoxes(prevChildren)\n    setPrevBoundingBox(prevBoundingBox)\n  }, [prevChildren])\n\n  useEffect(() => {\n    if (!prevBoundingBox || !boundingBox || Object.keys(prevBoundingBox).length < Object.keys(boundingBox).length)\n      return\n\n    const hasPrevBoundingBox = Object.keys(prevBoundingBox).length\n\n    if (hasPrevBoundingBox) {\n      React.Children.forEach(children, (child: AnimationChild) => {\n        const domNode = child.ref.current\n        const firstBox = prevBoundingBox[child.key]\n        const lastBox = boundingBox[child.key]\n        if (!firstBox || !lastBox)\n          return\n\n        const changeInX = firstBox.left - lastBox.left\n\n\n        if (changeInX) {\n          requestAnimationFrame(() => {\n            // Before DOM paints, invert child to old position\n            // Maybe longer animation time?\n            // Reduce speed of sorting so the animation shows\n            domNode.style.transform = `translateX(${changeInX}px)`\n            domNode.style.transition = `transform 0ms`\n\n            requestAnimationFrame(() => {\n              // After previous frame, remove the transition to play the animation\n              domNode.style.transform = ''\n              domNode.style.transition = 'transform 200ms'\n            })\n          })\n        }\n      })\n    }\n  }, [boundingBox, prevBoundingBox, children])\n\n  return children\n\n}\n\nexport default AnimateBars\n","import { useState, useEffect, useRef} from 'react'\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport const useContainerDimensions = (myRef: React.MutableRefObject<HTMLDivElement | null>): Dimensions => {\n  const getDimensions = (): Dimensions => ({\n    width: myRef.current?.offsetWidth || 0,\n    height: myRef.current?.offsetHeight || 0\n  })\n\n  const [dimensions, setDimensions] = useState<Dimensions>({ width: 0, height: 0 })\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions())\n    }\n\n    if (myRef.current)\n      setDimensions(getDimensions())\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [myRef])\n\n  return dimensions\n\n}\n\n// https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n// Used to get the previous value of an object\n\n//eslint-disable-next-line\nexport const usePrevious = (value: any): any => {\n  const prevChildrenRef = useRef()\n\n  useEffect(() => {\n    prevChildrenRef.current = value\n  }, [value])\n\n  return prevChildrenRef.current\n}","import React, { createRef } from 'react'\n\nimport Bar from './Visualization/Bar'\n\nimport { useSelector } from 'react-redux'\n\nimport { RootState, CurrentNumberState } from '../store'\n\nimport AnimateBars from './Visualization/AnimateBars'\n\ninterface Props {\n  componentWidth: number;\n}\n\nconst Bars: React.FC<Props> = ({componentWidth}: { componentWidth: number } ) => {\n  const listSize: number = useSelector((state: RootState) => state.numberList.size)\n  const list: number[] = useSelector((state: RootState) => state.numberList.list)\n  const selected: CurrentNumberState = useSelector((state: RootState) => state.currentNumber)\n  \n  const width: number = 100/listSize * componentWidth/listSize \n\n  return (\n    <div style={{ display: 'flex' }}>\n      \n      <AnimateBars>\n        {\n          list.map((b, i) => {\n            const barRef = createRef<HTMLDivElement>()\n            return <Bar key={b} width={width} height={b/listSize} area={i >= selected.area.start && i <= selected.area.end}\n            // Fix types here\n            // @ts-expect-error\n              main={i === selected.main} sub={i === selected.sub} ref={barRef}\n            />\n        })}\n      </AnimateBars>\n    </div>\n  )\n}\n\nexport default Bars","import axios from 'axios'\nimport {apiBaseUrl} from '../constants'\n\nconst fetchDescription = async (algorithmName: string): Promise<string | null> => {\n\tconst { data: desc } = await axios.post(`${apiBaseUrl}/description`, {algorithm: algorithmName})\n\treturn desc\n}\n\nexport default { fetchDescription }","import React, { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\n\n\nimport { Skeleton, Typography } from 'antd'\nconst { Paragraph, Title } = Typography\n\nimport descriptionService from '../services/descriptions'\nimport { RootState } from '../store'\n\ntype propType = {\n\twidth: number\n}\n\nconst Description: React.FC<propType> = ({width}: propType) => {\n\tconst [description, setDescription] = useState<string>(\"\")\n\n\tconst algorithm = useSelector((state: RootState) => state.running.runnable)\n\t\n\tuseEffect(() => {\n\t\tconst getDesc = async () => {\n\t\t\tconst desc = await descriptionService.fetchDescription(algorithm.toLowerCase())\n\t\t\tif (!desc)\n\t\t\t\tsetDescription(\"\")\n\t\t\telse\n\t\t\t\tsetDescription(desc)\n\t\t\tconsole.log(desc)\n\t\t}\n\t\tconsole.log('useEffect')\n\t\tconsole.log(algorithm)\n\n\t\tgetDesc()\n\t}, [algorithm])\n\n\tconst mapToParagraphs = (par: string, i: number) => {\n\t\tconsole.log\n\n\t\tconst mapToCode = (desc: string, i: number) => {\n\t\t\treturn <p key={i} style={{whiteSpace: width > 700 ? 'pre-wrap' : 'pre-line' }}>{desc}<br/></p>\n\t\t}\n\n\t\tif (par[0] === '#')\n\t\t\treturn <Title level={4} key={par.substring(1,3)}>{par.substring(1)}</Title>\n\t\telse if (par[0]==='/' && par[1]==='/')\n\t\t\treturn <Paragraph \n\t\t\t\tkey={`code${par.substring(2,4)}`}\n\t\t\t\tstyle={{ overflowWrap: 'break-word', fontFamily: 'monospace'}}\n\t\t\t>{par.substring(2).split('//').map(mapToCode)}</Paragraph>\n\t\telse \n\t\t\treturn <Paragraph key={i}>{par}</Paragraph>\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Title level={3}>Description</Title>\n\t\t\t{description ? \n\t\t\tdescription.split(\"\\n\").map((d, i) => mapToParagraphs(d, i)) : \n\t\t\t<div>\n\t\t\t\t<Skeleton/>\n\t\t\t\t<Skeleton/>\n\t\t\t</div>}\n\t\t</div>\n\t)\n}\n\nexport default Description","import {\n\tDivider,\n\tLayout,\n\tSkeleton,\n\tTypography,\n} from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Algorithms } from '../services/AlgorithmRunner'\nimport { RootState } from '../store'\nimport Bars from './Bars'\nimport Description from './Description'\n\nconst { Title } = Typography\nconst { Content } = Layout\n\ntype propType = {\n\twidth: number\n}\n\nconst MainContent: React.FC<propType> = ({width}: propType) => {\n\tconst [loading, setLoading] = useState<boolean>(false)\n  const algorithm: Algorithms = useSelector((state: RootState) => state.running.runnable)\n\n\n\tuseEffect(() => {\n    if (loading === false) {\n      setTimeout(() => {\n        setLoading(false)\n      }, 250)\n      setLoading(true)\n    }\n    \n  }, [width])\n\n\treturn (\n\t\t<Layout style={{ padding: '0 10em em' }}>\n\t\t\t<span style={{ display: 'block', marginTop: '1em', marginLeft: width > 992 ? '5em' : 'auto', marginRight: 'auto' }}>\n\t\t\t\t<Title level={3} style={{}}>{algorithm}</Title>\n\t\t\t</span>\n\t\t\t<Content className=\"site-layout-content\" id='container'\n\t\t\t\tstyle={{\n\t\t\t\t\tpadding: 24,\n\t\t\t\t\tpaddingTop: width > 922 ? 24 : 5,\n\t\t\t\t\tmarginTop: width > 922 ? 0 : 10,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div className=\"bar-desc-container\" >\n\t\t\t\t\t{\n\t\t\t\t\t\tloading ? <Skeleton /> :\n\t\t\t\t\t\t\t<Bars componentWidth={width} />\n\t\t\t\t\t}\n\t\t\t\t\t<Divider />\n\t\t\t\t\t<Description width={width} />\n\t\t\t\t</div>\n\t\t\t</Content>\n\t\t</Layout>\n\t)\n}\n\nexport default MainContent","import React, { useRef } from 'react'\nimport {\n  Layout,\n} from 'antd'\n\n\nconst { Footer } = Layout\n\nimport AlgorithmSider from './Components/AlgorithmSider'\nimport PageHeader from './Components/PageHeader'\n\nimport { useContainerDimensions } from './hooks'\n\nimport MainContent from './Components/MainContent'\n\n\n\nconst App: React.FC = () => {\n\n  const componentRef = useRef<HTMLDivElement>(null)\n  const { width } = useContainerDimensions(componentRef)\n\n  return (\n    <div ref={componentRef}>\n      <Layout>\n        <PageHeader width={width} />\n        <Layout style={{ \n          margin: width > 992 ? '0 5em 0 5em' : '0',\n          marginTop: width > 922 ? 0 : '64px',\n          minHeight: '90vh'\n        }}>\n\n          <AlgorithmSider />\n\n          <MainContent width={width} />\n        </Layout>\n        <Footer style={{ textAlign: 'center' }}>AlgoVis algorithm visualizer @2020 Created by Jere Salmensaari</Footer>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport 'antd/dist/antd.css'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}